{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "instances.memcache.gcp.upbound.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.13.0"
    }
  },
  "spec": {
    "group": "memcache.gcp.upbound.io",
    "names": {
      "plural": "instances",
      "singular": "instance",
      "kind": "Instance",
      "listKind": "InstanceList",
      "categories": [
        "crossplane",
        "managed",
        "gcp"
      ]
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "Instance is the Schema for the Instances API. A Google Cloud Memcache instance.",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "InstanceSpec defines the desired state of Instance",
                "type": "object",
                "required": [
                  "forProvider"
                ],
                "properties": {
                  "deletionPolicy": {
                    "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
                    "type": "string",
                    "default": "Delete",
                    "enum": [
                      "Orphan",
                      "Delete"
                    ]
                  },
                  "forProvider": {
                    "type": "object",
                    "properties": {
                      "authorizedNetwork": {
                        "description": "The full name of the GCE network to connect the instance to.  If not provided, 'default' will be used.",
                        "type": "string"
                      },
                      "authorizedNetworkRef": {
                        "description": "Reference to a Connection in servicenetworking to populate authorizedNetwork.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "authorizedNetworkSelector": {
                        "description": "Selector for a Connection in servicenetworking to populate authorizedNetwork.",
                        "type": "object",
                        "properties": {
                          "matchControllerRef": {
                            "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                            "type": "boolean"
                          },
                          "matchLabels": {
                            "description": "MatchLabels ensures an object with matching labels is selected.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "policy": {
                            "description": "Policies for selection.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "displayName": {
                        "description": "A user-visible name for the instance.",
                        "type": "string"
                      },
                      "labels": {
                        "description": "Resource labels to represent user-provided metadata.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "maintenancePolicy": {
                        "description": "Maintenance policy for an instance. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "description": "Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.",
                              "type": "string"
                            },
                            "weeklyMaintenanceWindow": {
                              "description": "Required. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_maintenance_windows is expected to be one. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "day": {
                                    "description": "Required. The day of week that maintenance updates occur.",
                                    "type": "string"
                                  },
                                  "duration": {
                                    "description": "Required. The length of the maintenance window, ranging from 3 hours to 8 hours. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: \"3.5s\".",
                                    "type": "string"
                                  },
                                  "startTime": {
                                    "description": "Required. Start time of the window in UTC time. Structure is documented below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "hours": {
                                          "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
                                          "type": "number"
                                        },
                                        "minutes": {
                                          "description": "Minutes of hour of day. Must be from 0 to 59.",
                                          "type": "number"
                                        },
                                        "nanos": {
                                          "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
                                          "type": "number"
                                        },
                                        "seconds": {
                                          "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
                                          "type": "number"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "memcacheParameters": {
                        "description": "User-specified parameters for this memcache instance. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "params": {
                              "description": "User-defined set of parameters to use in the memcache process.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "memcacheVersion": {
                        "description": "The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is MEMCACHE_1_5. The minor version will be automatically determined by our system based on the latest supported minor version. Default value is MEMCACHE_1_5. Possible values are: MEMCACHE_1_5.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The resource name of the instance.",
                        "type": "string"
                      },
                      "nodeConfig": {
                        "description": "Configuration for memcache nodes. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "cpuCount": {
                              "description": "Number of CPUs per node.",
                              "type": "number"
                            },
                            "memorySizeMb": {
                              "description": "Memory size in Mebibytes for each memcache node.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "nodeCount": {
                        "description": "Number of nodes in the memcache instance.",
                        "type": "number"
                      },
                      "project": {
                        "description": "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
                        "type": "string"
                      },
                      "region": {
                        "description": "The region of the Memcache instance. If it is not provided, the provider region is used.",
                        "type": "string"
                      },
                      "zones": {
                        "description": "Zones where memcache nodes should be provisioned.  If not provided, all zones will be used.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "initProvider": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
                    "type": "object",
                    "properties": {
                      "displayName": {
                        "description": "A user-visible name for the instance.",
                        "type": "string"
                      },
                      "labels": {
                        "description": "Resource labels to represent user-provided metadata.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "maintenancePolicy": {
                        "description": "Maintenance policy for an instance. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "description": "Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.",
                              "type": "string"
                            },
                            "weeklyMaintenanceWindow": {
                              "description": "Required. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_maintenance_windows is expected to be one. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "day": {
                                    "description": "Required. The day of week that maintenance updates occur.",
                                    "type": "string"
                                  },
                                  "duration": {
                                    "description": "Required. The length of the maintenance window, ranging from 3 hours to 8 hours. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: \"3.5s\".",
                                    "type": "string"
                                  },
                                  "startTime": {
                                    "description": "Required. Start time of the window in UTC time. Structure is documented below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "hours": {
                                          "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
                                          "type": "number"
                                        },
                                        "minutes": {
                                          "description": "Minutes of hour of day. Must be from 0 to 59.",
                                          "type": "number"
                                        },
                                        "nanos": {
                                          "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
                                          "type": "number"
                                        },
                                        "seconds": {
                                          "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
                                          "type": "number"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "memcacheParameters": {
                        "description": "User-specified parameters for this memcache instance. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "params": {
                              "description": "User-defined set of parameters to use in the memcache process.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "memcacheVersion": {
                        "description": "The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is MEMCACHE_1_5. The minor version will be automatically determined by our system based on the latest supported minor version. Default value is MEMCACHE_1_5. Possible values are: MEMCACHE_1_5.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The resource name of the instance.",
                        "type": "string"
                      },
                      "nodeConfig": {
                        "description": "Configuration for memcache nodes. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "cpuCount": {
                              "description": "Number of CPUs per node.",
                              "type": "number"
                            },
                            "memorySizeMb": {
                              "description": "Memory size in Mebibytes for each memcache node.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "nodeCount": {
                        "description": "Number of nodes in the memcache instance.",
                        "type": "number"
                      },
                      "project": {
                        "description": "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
                        "type": "string"
                      },
                      "region": {
                        "description": "The region of the Memcache instance. If it is not provided, the provider region is used.",
                        "type": "string"
                      },
                      "zones": {
                        "description": "Zones where memcache nodes should be provisioned.  If not provided, all zones will be used.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "managementPolicies": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
                    "type": "array",
                    "default": [
                      "*"
                    ],
                    "items": {
                      "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
                      "type": "string",
                      "enum": [
                        "Observe",
                        "Create",
                        "Update",
                        "Delete",
                        "LateInitialize",
                        "*"
                      ]
                    }
                  },
                  "providerConfigRef": {
                    "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
                    "type": "object",
                    "default": {
                      "name": "default"
                    },
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "publishConnectionDetailsTo": {
                    "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "configRef": {
                        "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
                        "type": "object",
                        "default": {
                          "name": "default"
                        },
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "Metadata is the metadata for connection secret.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "type": {
                            "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name of the connection secret.",
                        "type": "string"
                      }
                    }
                  },
                  "writeConnectionSecretToRef": {
                    "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
                    "type": "object",
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  }
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
                    "message": "spec.forProvider.name is a required parameter"
                  },
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeConfig) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.nodeConfig))",
                    "message": "spec.forProvider.nodeConfig is a required parameter"
                  },
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeCount) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.nodeCount))",
                    "message": "spec.forProvider.nodeCount is a required parameter"
                  }
                ]
              },
              "status": {
                "description": "InstanceStatus defines the observed state of Instance.",
                "type": "object",
                "properties": {
                  "atProvider": {
                    "type": "object",
                    "properties": {
                      "authorizedNetwork": {
                        "description": "The full name of the GCE network to connect the instance to.  If not provided, 'default' will be used.",
                        "type": "string"
                      },
                      "createTime": {
                        "description": "Creation timestamp in RFC3339 text format.",
                        "type": "string"
                      },
                      "discoveryEndpoint": {
                        "description": "Endpoint for Discovery API",
                        "type": "string"
                      },
                      "displayName": {
                        "description": "A user-visible name for the instance.",
                        "type": "string"
                      },
                      "id": {
                        "description": "an identifier for the resource with format projects/{{project}}/locations/{{region}}/instances/{{name}}",
                        "type": "string"
                      },
                      "labels": {
                        "description": "Resource labels to represent user-provided metadata.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "maintenancePolicy": {
                        "description": "Maintenance policy for an instance. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "createTime": {
                              "description": "(Output) Output only. The time when the policy was created. A timestamp in RFC3339 UTC \"Zulu\" format, with nanosecond resolution and up to nine fractional digits",
                              "type": "string"
                            },
                            "description": {
                              "description": "Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.",
                              "type": "string"
                            },
                            "updateTime": {
                              "description": "(Output) Output only. The time when the policy was updated. A timestamp in RFC3339 UTC \"Zulu\" format, with nanosecond resolution and up to nine fractional digits.",
                              "type": "string"
                            },
                            "weeklyMaintenanceWindow": {
                              "description": "Required. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_maintenance_windows is expected to be one. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "day": {
                                    "description": "Required. The day of week that maintenance updates occur.",
                                    "type": "string"
                                  },
                                  "duration": {
                                    "description": "Required. The length of the maintenance window, ranging from 3 hours to 8 hours. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: \"3.5s\".",
                                    "type": "string"
                                  },
                                  "startTime": {
                                    "description": "Required. Start time of the window in UTC time. Structure is documented below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "hours": {
                                          "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
                                          "type": "number"
                                        },
                                        "minutes": {
                                          "description": "Minutes of hour of day. Must be from 0 to 59.",
                                          "type": "number"
                                        },
                                        "nanos": {
                                          "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
                                          "type": "number"
                                        },
                                        "seconds": {
                                          "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
                                          "type": "number"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "maintenanceSchedule": {
                        "description": "Output only. Published maintenance schedule. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "endTime": {
                              "description": "(Output) Output only. The end time of any upcoming scheduled maintenance for this instance. A timestamp in RFC3339 UTC \"Zulu\" format, with nanosecond resolution and up to nine fractional digits.",
                              "type": "string"
                            },
                            "scheduleDeadlineTime": {
                              "description": "(Output) Output only. The deadline that the maintenance schedule start time can not go beyond, including reschedule. A timestamp in RFC3339 UTC \"Zulu\" format, with nanosecond resolution and up to nine fractional digits.",
                              "type": "string"
                            },
                            "startTime": {
                              "description": "(Output) Output only. The start time of any upcoming scheduled maintenance for this instance. A timestamp in RFC3339 UTC \"Zulu\" format, with nanosecond resolution and up to nine fractional digits.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "memcacheFullVersion": {
                        "description": "The full version of memcached server running on this instance.",
                        "type": "string"
                      },
                      "memcacheNodes": {
                        "description": "Additional information about the instance state, if available. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "host": {
                              "description": "(Output) Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.",
                              "type": "string"
                            },
                            "nodeId": {
                              "description": "(Output) Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.",
                              "type": "string"
                            },
                            "port": {
                              "description": "(Output) The port number of the Memcached server on this node.",
                              "type": "number"
                            },
                            "state": {
                              "description": "(Output) Current state of the Memcached node.",
                              "type": "string"
                            },
                            "zone": {
                              "description": "(Output) Location (GCP Zone) for the Memcached node.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "memcacheParameters": {
                        "description": "User-specified parameters for this memcache instance. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "(Output) This is a unique ID associated with this set of parameters.",
                              "type": "string"
                            },
                            "params": {
                              "description": "User-defined set of parameters to use in the memcache process.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "memcacheVersion": {
                        "description": "The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is MEMCACHE_1_5. The minor version will be automatically determined by our system based on the latest supported minor version. Default value is MEMCACHE_1_5. Possible values are: MEMCACHE_1_5.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The resource name of the instance.",
                        "type": "string"
                      },
                      "nodeConfig": {
                        "description": "Configuration for memcache nodes. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "cpuCount": {
                              "description": "Number of CPUs per node.",
                              "type": "number"
                            },
                            "memorySizeMb": {
                              "description": "Memory size in Mebibytes for each memcache node.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "nodeCount": {
                        "description": "Number of nodes in the memcache instance.",
                        "type": "number"
                      },
                      "project": {
                        "description": "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
                        "type": "string"
                      },
                      "region": {
                        "description": "The region of the Memcache instance. If it is not provided, the provider region is used.",
                        "type": "string"
                      },
                      "zones": {
                        "description": "Zones where memcache nodes should be provisioned.  If not provided, all zones will be used.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "conditions": {
                    "description": "Conditions of the resource.",
                    "type": "array",
                    "items": {
                      "description": "A Condition that may apply to a resource.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "A Reason for this condition's last transition from one status to another.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of this condition; is it currently True, False, or Unknown?",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "READY",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
          },
          {
            "name": "SYNCED",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Synced')].status"
          },
          {
            "name": "EXTERNAL-NAME",
            "type": "string",
            "jsonPath": ".metadata.annotations.crossplane\\.io/external-name"
          },
          {
            "name": "AGE",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}