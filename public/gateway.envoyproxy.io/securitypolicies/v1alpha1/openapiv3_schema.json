{
  "$schema": "http://json-schema.org/schema#",
  "description": "SecurityPolicy allows the user to configure various security settings for a Gateway.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "gateway.envoyproxy.io/v1alpha1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "SecurityPolicy"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. \n Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "Spec defines the desired state of SecurityPolicy.",
      "type": "object",
      "required": [
        "targetRef"
      ],
      "properties": {
        "cors": {
          "description": "CORS defines the configuration for Cross-Origin Resource Sharing (CORS).",
          "type": "object",
          "properties": {
            "allowHeaders": {
              "description": "AllowHeaders defines the headers that are allowed to be sent with requests.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowMethods": {
              "description": "AllowMethods defines the methods that are allowed to make requests.",
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            },
            "allowOrigins": {
              "description": "AllowOrigins defines the origins that are allowed to make requests.",
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "StringMatch defines how to match any strings. This is a general purpose match condition that can be used by other EG APIs that need to match against a string.",
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "type": {
                    "description": "Type specifies how to match against a string.",
                    "type": "string",
                    "default": "Exact",
                    "enum": [
                      "Exact",
                      "Prefix",
                      "Suffix",
                      "RegularExpression"
                    ]
                  },
                  "value": {
                    "description": "Value specifies the string value that the match must have.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1
                  }
                }
              }
            },
            "exposeHeaders": {
              "description": "ExposeHeaders defines the headers that can be exposed in the responses.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "maxAge": {
              "description": "MaxAge defines how long the results of a preflight request can be cached.",
              "type": "string"
            }
          }
        },
        "jwt": {
          "description": "JWT defines the configuration for JSON Web Token (JWT) authentication.",
          "type": "object",
          "required": [
            "providers"
          ],
          "properties": {
            "providers": {
              "description": "Providers defines the JSON Web Token (JWT) authentication provider type. \n When multiple JWT providers are specified, the JWT is considered valid if any of the providers successfully validate the JWT. For additional details, see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/jwt_authn_filter.html.",
              "type": "array",
              "maxItems": 4,
              "minItems": 1,
              "items": {
                "description": "JWTProvider defines how a JSON Web Token (JWT) can be verified.",
                "type": "object",
                "required": [
                  "name",
                  "remoteJWKS"
                ],
                "properties": {
                  "audiences": {
                    "description": "Audiences is a list of JWT audiences allowed access. For additional details, see https://tools.ietf.org/html/rfc7519#section-4.1.3. If not provided, JWT audiences are not checked.",
                    "type": "array",
                    "maxItems": 8,
                    "items": {
                      "type": "string"
                    }
                  },
                  "claimToHeaders": {
                    "description": "ClaimToHeaders is a list of JWT claims that must be extracted into HTTP request headers For examples, following config: The claim must be of type; string, int, double, bool. Array type claims are not supported",
                    "type": "array",
                    "items": {
                      "description": "ClaimToHeader defines a configuration to convert JWT claims into HTTP headers",
                      "type": "object",
                      "required": [
                        "claim",
                        "header"
                      ],
                      "properties": {
                        "claim": {
                          "description": "Claim is the JWT Claim that should be saved into the header : it can be a nested claim of type (eg. \"claim.nested.key\", \"sub\"). The nested claim name must use dot \".\" to separate the JSON name path.",
                          "type": "string"
                        },
                        "header": {
                          "description": "Header defines the name of the HTTP request header that the JWT Claim will be saved into.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "issuer": {
                    "description": "Issuer is the principal that issued the JWT and takes the form of a URL or email address. For additional details, see https://tools.ietf.org/html/rfc7519#section-4.1.1 for URL format and https://rfc-editor.org/rfc/rfc5322.html for email format. If not provided, the JWT issuer is not checked.",
                    "type": "string",
                    "maxLength": 253
                  },
                  "name": {
                    "description": "Name defines a unique name for the JWT provider. A name can have a variety of forms, including RFC1123 subdomains, RFC 1123 labels, or RFC 1035 labels.",
                    "type": "string",
                    "maxLength": 253,
                    "minLength": 1
                  },
                  "remoteJWKS": {
                    "description": "RemoteJWKS defines how to fetch and cache JSON Web Key Sets (JWKS) from a remote HTTP/HTTPS endpoint.",
                    "type": "object",
                    "required": [
                      "uri"
                    ],
                    "properties": {
                      "uri": {
                        "description": "URI is the HTTPS URI to fetch the JWKS. Envoy's system trust bundle is used to validate the server certificate.",
                        "type": "string",
                        "maxLength": 253,
                        "minLength": 1
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "targetRef": {
          "description": "TargetRef is the name of the Gateway resource this policy is being attached to. This Policy and the TargetRef MUST be in the same namespace for this Policy to have effect and be applied to the Gateway. TargetRef",
          "type": "object",
          "required": [
            "group",
            "kind",
            "name"
          ],
          "properties": {
            "group": {
              "description": "Group is the group of the target resource.",
              "type": "string",
              "maxLength": 253,
              "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
            },
            "kind": {
              "description": "Kind is kind of the target resource.",
              "type": "string",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
            },
            "name": {
              "description": "Name is the name of the target resource.",
              "type": "string",
              "maxLength": 253,
              "minLength": 1
            },
            "namespace": {
              "description": "Namespace is the namespace of the referent. When unspecified, the local namespace is inferred. Even when policy targets a resource in a different namespace, it MUST only apply to traffic originating from the same namespace as the policy.",
              "type": "string",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
            },
            "sectionName": {
              "description": "SectionName is the name of a section within the target resource. When unspecified, this targetRef targets the entire resource. In the following resources, SectionName is interpreted as the following: \n * Gateway: Listener Name * Service: Port Name \n If a SectionName is specified, but does not exist on the targeted object, the Policy must fail to attach, and the policy implementation should record a `ResolvedRefs` or similar Condition in the Policy's status.",
              "type": "string",
              "maxLength": 253,
              "minLength": 1,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
            }
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.group == 'gateway.networking.k8s.io'",
              "message": "this policy can only have a targetRef.group of gateway.networking.k8s.io"
            },
            {
              "rule": "self.kind in ['Gateway', 'HTTPRoute', 'GRPCRoute']",
              "message": "this policy can only have a targetRef.kind of Gateway/HTTPRoute/GRPCRoute"
            },
            {
              "rule": "!has(self.sectionName)",
              "message": "this policy does not yet support the sectionName field"
            }
          ]
        }
      }
    }
  }
}