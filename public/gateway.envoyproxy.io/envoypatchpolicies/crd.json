{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "envoypatchpolicies.gateway.envoyproxy.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.13.0"
    }
  },
  "spec": {
    "group": "gateway.envoyproxy.io",
    "names": {
      "plural": "envoypatchpolicies",
      "singular": "envoypatchpolicy",
      "shortNames": [
        "epp"
      ],
      "kind": "EnvoyPatchPolicy",
      "listKind": "EnvoyPatchPolicyList"
    },
    "scope": "Namespaced",
    "versions": [
      {
        "name": "v1alpha1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "EnvoyPatchPolicy allows the user to modify the generated Envoy xDS resources by Envoy Gateway using this patch API",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "Spec defines the desired state of EnvoyPatchPolicy.",
                "type": "object",
                "required": [
                  "targetRef",
                  "type"
                ],
                "properties": {
                  "jsonPatches": {
                    "description": "JSONPatch defines the JSONPatch configuration.",
                    "type": "array",
                    "items": {
                      "description": "EnvoyJSONPatchConfig defines the configuration for patching a Envoy xDS Resource using JSONPatch semantic",
                      "type": "object",
                      "required": [
                        "name",
                        "operation",
                        "type"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name is the name of the resource",
                          "type": "string"
                        },
                        "operation": {
                          "description": "Patch defines the JSON Patch Operation",
                          "type": "object",
                          "required": [
                            "op",
                            "path",
                            "value"
                          ],
                          "properties": {
                            "op": {
                              "description": "Op is the type of operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "remove",
                                "replace",
                                "move",
                                "copy",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "Path is the location of the target document/field where the operation will be performed Refer to https://datatracker.ietf.org/doc/html/rfc6901 for more details.",
                              "type": "string"
                            },
                            "value": {
                              "description": "Value is the new value of the path location.",
                              "x-kubernetes-preserve-unknown-fields": true
                            }
                          }
                        },
                        "type": {
                          "description": "Type is the typed URL of the Envoy xDS Resource",
                          "type": "string",
                          "enum": [
                            "type.googleapis.com/envoy.config.listener.v3.Listener",
                            "type.googleapis.com/envoy.config.route.v3.RouteConfiguration",
                            "type.googleapis.com/envoy.config.cluster.v3.Cluster",
                            "type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment"
                          ]
                        }
                      }
                    }
                  },
                  "priority": {
                    "description": "Priority of the EnvoyPatchPolicy. If multiple EnvoyPatchPolicies are applied to the same TargetRef, they will be applied in the ascending order of the priority i.e. int32.min has the highest priority and int32.max has the lowest priority. Defaults to 0.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "targetRef": {
                    "description": "TargetRef is the name of the Gateway API resource this policy is being attached to. Currently only attaching to Gateway is supported This Policy and the TargetRef MUST be in the same namespace for this Policy to have effect and be applied to the Gateway TargetRef",
                    "type": "object",
                    "required": [
                      "group",
                      "kind",
                      "name"
                    ],
                    "properties": {
                      "group": {
                        "description": "Group is the group of the target resource.",
                        "type": "string",
                        "maxLength": 253,
                        "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                      },
                      "kind": {
                        "description": "Kind is kind of the target resource.",
                        "type": "string",
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                      },
                      "name": {
                        "description": "Name is the name of the target resource.",
                        "type": "string",
                        "maxLength": 253,
                        "minLength": 1
                      },
                      "namespace": {
                        "description": "Namespace is the namespace of the referent. When unspecified, the local namespace is inferred. Even when policy targets a resource in a different namespace, it MUST only apply to traffic originating from the same namespace as the policy.",
                        "type": "string",
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                      }
                    }
                  },
                  "type": {
                    "description": "Type decides the type of patch. Valid EnvoyPatchType values are \"JSONPatch\".",
                    "type": "string",
                    "enum": [
                      "JSONPatch"
                    ]
                  }
                }
              },
              "status": {
                "description": "Status defines the current status of EnvoyPatchPolicy.",
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "Conditions describe the current conditions of the EnvoyPatchPolicy.",
                    "type": "array",
                    "maxItems": 8,
                    "items": {
                      "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "message",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                          "type": "string",
                          "maxLength": 32768
                        },
                        "observedGeneration": {
                          "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                          "type": "integer",
                          "format": "int64",
                          "minimum": 0
                        },
                        "reason": {
                          "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                          "type": "string",
                          "maxLength": 1024,
                          "minLength": 1,
                          "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                        },
                        "status": {
                          "description": "status of the condition, one of True, False, Unknown.",
                          "type": "string",
                          "enum": [
                            "True",
                            "False",
                            "Unknown"
                          ]
                        },
                        "type": {
                          "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                          "type": "string",
                          "maxLength": 316,
                          "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                        }
                      }
                    },
                    "x-kubernetes-list-map-keys": [
                      "type"
                    ],
                    "x-kubernetes-list-type": "map"
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "Status",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type==\"Programmed\")].reason"
          },
          {
            "name": "Age",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}