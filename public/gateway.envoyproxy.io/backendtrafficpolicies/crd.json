{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "backendtrafficpolicies.gateway.envoyproxy.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.13.0"
    }
  },
  "spec": {
    "group": "gateway.envoyproxy.io",
    "names": {
      "plural": "backendtrafficpolicies",
      "singular": "backendtrafficpolicy",
      "shortNames": [
        "btp"
      ],
      "kind": "BackendTrafficPolicy",
      "listKind": "BackendTrafficPolicyList"
    },
    "scope": "Namespaced",
    "versions": [
      {
        "name": "v1alpha1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "BackendTrafficPolicy allows the user to configure the behavior of the connection between the downstream client and Envoy Proxy listener.",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "spec defines the desired state of BackendTrafficPolicy.",
                "type": "object",
                "required": [
                  "targetRef"
                ],
                "properties": {
                  "loadBalancer": {
                    "description": "LoadBalancer policy to apply when routing traffic from the gateway to the backend endpoints",
                    "type": "object",
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "consistentHash": {
                        "description": "ConsistentHash defines the configuration when the load balancer type is set to ConsistentHash",
                        "type": "object",
                        "required": [
                          "type"
                        ],
                        "properties": {
                          "type": {
                            "description": "ConsistentHashType defines the type of input to hash on.",
                            "type": "string",
                            "enum": [
                              "SourceIP"
                            ]
                          }
                        }
                      },
                      "type": {
                        "description": "Type decides the type of Load Balancer policy. Valid LoadBalancerType values are \"ConsistentHash\", \"LeastRequest\", \"Random\", \"RoundRobin\",",
                        "type": "string",
                        "enum": [
                          "ConsistentHash",
                          "LeastRequest",
                          "Random",
                          "RoundRobin"
                        ]
                      }
                    },
                    "x-kubernetes-validations": [
                      {
                        "rule": "self.type == 'ConsistentHash' ? has(self.consistentHash) : !has(self.consistentHash)",
                        "message": "If LoadBalancer type is consistentHash, consistentHash field needs to be set."
                      }
                    ]
                  },
                  "rateLimit": {
                    "description": "RateLimit allows the user to limit the number of incoming requests to a predefined value based on attributes within the traffic flow.",
                    "type": "object",
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "global": {
                        "description": "Global defines global rate limit configuration.",
                        "type": "object",
                        "required": [
                          "rules"
                        ],
                        "properties": {
                          "rules": {
                            "description": "Rules are a list of RateLimit selectors and limits. Each rule and its associated limit is applied in a mutually exclusive way i.e. if multiple rules get selected, each of their associated limits get applied, so a single traffic request might increase the rate limit counters for multiple rules if selected.",
                            "type": "array",
                            "maxItems": 16,
                            "items": {
                              "description": "RateLimitRule defines the semantics for matching attributes from the incoming requests, and setting limits for them.",
                              "type": "object",
                              "required": [
                                "limit"
                              ],
                              "properties": {
                                "clientSelectors": {
                                  "description": "ClientSelectors holds the list of select conditions to select specific clients using attributes from the traffic flow. All individual select conditions must hold True for this rule and its limit to be applied. If this field is empty, it is equivalent to True, and the limit is applied.",
                                  "type": "array",
                                  "maxItems": 8,
                                  "items": {
                                    "description": "RateLimitSelectCondition specifies the attributes within the traffic flow that can be used to select a subset of clients to be ratelimited. All the individual conditions must hold True for the overall condition to hold True.",
                                    "type": "object",
                                    "properties": {
                                      "headers": {
                                        "description": "Headers is a list of request headers to match. Multiple header values are ANDed together, meaning, a request MUST match all the specified headers.",
                                        "type": "array",
                                        "maxItems": 16,
                                        "items": {
                                          "description": "HeaderMatch defines the match attributes within the HTTP Headers of the request.",
                                          "type": "object",
                                          "required": [
                                            "name"
                                          ],
                                          "properties": {
                                            "name": {
                                              "description": "Name of the HTTP header.",
                                              "type": "string",
                                              "maxLength": 256,
                                              "minLength": 1
                                            },
                                            "type": {
                                              "description": "Type specifies how to match against the value of the header.",
                                              "type": "string",
                                              "default": "Exact",
                                              "enum": [
                                                "Exact",
                                                "RegularExpression",
                                                "Distinct"
                                              ]
                                            },
                                            "value": {
                                              "description": "Value within the HTTP header. Due to the case-insensitivity of header names, \"foo\" and \"Foo\" are considered equivalent. Do not set this field when Type=\"Distinct\", implying matching on any/all unique values within the header.",
                                              "type": "string",
                                              "maxLength": 1024
                                            }
                                          }
                                        },
                                        "x-kubernetes-list-map-keys": [
                                          "name"
                                        ],
                                        "x-kubernetes-list-type": "map"
                                      },
                                      "sourceCIDR": {
                                        "description": "SourceCIDR is the client IP Address range to match on.",
                                        "type": "object",
                                        "required": [
                                          "value"
                                        ],
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "default": "Exact"
                                          },
                                          "value": {
                                            "description": "Value is the IP CIDR that represents the range of Source IP Addresses of the client. These could also be the intermediate addresses through which the request has flown through and is part of the  `X-Forwarded-For` header. For example, `192.168.0.1/32`, `192.168.0.0/24`, `001:db8::/64`.",
                                            "type": "string",
                                            "maxLength": 256,
                                            "minLength": 1
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "limit": {
                                  "description": "Limit holds the rate limit values. This limit is applied for traffic flows when the selectors compute to True, causing the request to be counted towards the limit. The limit is enforced and the request is ratelimited, i.e. a response with 429 HTTP status code is sent back to the client when the selected requests have reached the limit.",
                                  "type": "object",
                                  "required": [
                                    "requests",
                                    "unit"
                                  ],
                                  "properties": {
                                    "requests": {
                                      "type": "integer"
                                    },
                                    "unit": {
                                      "description": "RateLimitUnit specifies the intervals for setting rate limits. Valid RateLimitUnit values are \"Second\", \"Minute\", \"Hour\", and \"Day\".",
                                      "type": "string",
                                      "enum": [
                                        "Second",
                                        "Minute",
                                        "Hour",
                                        "Day"
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "type": {
                        "description": "Type decides the scope for the RateLimits. Valid RateLimitType values are \"Global\".",
                        "type": "string",
                        "enum": [
                          "Global"
                        ]
                      }
                    }
                  },
                  "targetRef": {
                    "description": "targetRef is the name of the resource this policy is being attached to. This Policy and the TargetRef MUST be in the same namespace for this Policy to have effect and be applied to the Gateway.",
                    "type": "object",
                    "required": [
                      "group",
                      "kind",
                      "name"
                    ],
                    "properties": {
                      "group": {
                        "description": "Group is the group of the target resource.",
                        "type": "string",
                        "maxLength": 253,
                        "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                      },
                      "kind": {
                        "description": "Kind is kind of the target resource.",
                        "type": "string",
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                      },
                      "name": {
                        "description": "Name is the name of the target resource.",
                        "type": "string",
                        "maxLength": 253,
                        "minLength": 1
                      },
                      "namespace": {
                        "description": "Namespace is the namespace of the referent. When unspecified, the local namespace is inferred. Even when policy targets a resource in a different namespace, it MUST only apply to traffic originating from the same namespace as the policy.",
                        "type": "string",
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                      },
                      "sectionName": {
                        "description": "SectionName is the name of a section within the target resource. When unspecified, this targetRef targets the entire resource. In the following resources, SectionName is interpreted as the following: \n * Gateway: Listener Name * Service: Port Name \n If a SectionName is specified, but does not exist on the targeted object, the Policy must fail to attach, and the policy implementation should record a `ResolvedRefs` or similar Condition in the Policy's status.",
                        "type": "string",
                        "maxLength": 253,
                        "minLength": 1,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                      }
                    },
                    "x-kubernetes-validations": [
                      {
                        "rule": "self.group == 'gateway.networking.k8s.io'",
                        "message": "this policy can only have a targetRef.group of gateway.networking.k8s.io"
                      },
                      {
                        "rule": "self.kind in ['Gateway', 'HTTPRoute', 'GRPCRoute', 'UDPRoute', 'TCPRoute', 'TLSRoute']",
                        "message": "this policy can only have a targetRef.kind of Gateway/HTTPRoute/GRPCRoute/TCPRoute/UDPRoute/TLSRoute"
                      },
                      {
                        "rule": "!has(self.sectionName)",
                        "message": "this policy does not yet support the sectionName field"
                      }
                    ]
                  }
                }
              },
              "status": {
                "description": "status defines the current status of BackendTrafficPolicy.",
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "Conditions describe the current conditions of the BackendTrafficPolicy.",
                    "type": "array",
                    "maxItems": 8,
                    "items": {
                      "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "message",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                          "type": "string",
                          "maxLength": 32768
                        },
                        "observedGeneration": {
                          "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                          "type": "integer",
                          "format": "int64",
                          "minimum": 0
                        },
                        "reason": {
                          "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                          "type": "string",
                          "maxLength": 1024,
                          "minLength": 1,
                          "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                        },
                        "status": {
                          "description": "status of the condition, one of True, False, Unknown.",
                          "type": "string",
                          "enum": [
                            "True",
                            "False",
                            "Unknown"
                          ]
                        },
                        "type": {
                          "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                          "type": "string",
                          "maxLength": 316,
                          "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                        }
                      }
                    },
                    "x-kubernetes-list-map-keys": [
                      "type"
                    ],
                    "x-kubernetes-list-type": "map"
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "Status",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type==\"Accepted\")].reason"
          },
          {
            "name": "Age",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}