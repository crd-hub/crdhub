{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "providerrevisions.pkg.crossplane.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.12.1"
    }
  },
  "spec": {
    "group": "pkg.crossplane.io",
    "names": {
      "plural": "providerrevisions",
      "singular": "providerrevision",
      "kind": "ProviderRevision",
      "listKind": "ProviderRevisionList",
      "categories": [
        "crossplane",
        "pkgrev"
      ]
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "A ProviderRevision that has been added to Crossplane.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "PackageRevisionSpec specifies the desired state of a PackageRevision.",
                "type": "object",
                "required": [
                  "desiredState",
                  "image",
                  "revision"
                ],
                "properties": {
                  "commonLabels": {
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "controllerConfigRef": {
                    "description": "ControllerConfigRef references a ControllerConfig resource that will be used to configure the packaged controller Deployment.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the ControllerConfig.",
                        "type": "string"
                      }
                    }
                  },
                  "desiredState": {
                    "description": "DesiredState of the PackageRevision. Can be either Active or Inactive.",
                    "type": "string"
                  },
                  "essTLSSecretName": {
                    "description": "ESSTLSSecretName is the secret name of the TLS certificates that will be used by the provider for External Secret Stores.",
                    "type": "string"
                  },
                  "ignoreCrossplaneConstraints": {
                    "description": "IgnoreCrossplaneConstraints indicates to the package manager whether to honor Crossplane version constrains specified by the package. Default is false.",
                    "type": "boolean",
                    "default": false
                  },
                  "image": {
                    "description": "Package image used by install Pod to extract package contents.",
                    "type": "string"
                  },
                  "packagePullPolicy": {
                    "description": "PackagePullPolicy defines the pull policy for the package. It is also applied to any images pulled for the package, such as a provider's controller image. Default is IfNotPresent.",
                    "type": "string",
                    "default": "IfNotPresent"
                  },
                  "packagePullSecrets": {
                    "description": "PackagePullSecrets are named secrets in the same namespace that can be used to fetch packages from private registries. They are also applied to any images pulled for the package, such as a provider's controller image.",
                    "type": "array",
                    "items": {
                      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                          "type": "string"
                        }
                      },
                      "x-kubernetes-map-type": "atomic"
                    }
                  },
                  "revision": {
                    "description": "Revision number. Indicates when the revision will be garbage collected based on the parent's RevisionHistoryLimit.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "skipDependencyResolution": {
                    "description": "SkipDependencyResolution indicates to the package manager whether to skip resolving dependencies for a package. Setting this value to true may have unintended consequences. Default is false.",
                    "type": "boolean",
                    "default": false
                  },
                  "webhookTLSSecretName": {
                    "description": "WebhookTLSSecretName is the name of the TLS Secret that will be used by the provider to serve a TLS-enabled webhook server. The certificate will be injected to webhook configurations as well as CRD conversion webhook strategy if needed. If it's not given, provider will not have a certificate mounted to its filesystem, webhook configurations won't be deployed and if there is a CRD with webhook conversion strategy, the installation will fail.",
                    "type": "string"
                  }
                }
              },
              "status": {
                "description": "PackageRevisionStatus represents the observed state of a PackageRevision.",
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "Conditions of the resource.",
                    "type": "array",
                    "items": {
                      "description": "A Condition that may apply to a resource.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "A Reason for this condition's last transition from one status to another.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of this condition; is it currently True, False, or Unknown?",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "controllerRef": {
                    "description": "ControllerRef references the controller (e.g. Deployment), if any, that is responsible for reconciling the objects this package revision installed.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the controller.",
                        "type": "string"
                      }
                    }
                  },
                  "foundDependencies": {
                    "description": "Dependency information.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "installedDependencies": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "invalidDependencies": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "objectRefs": {
                    "description": "References to objects owned by PackageRevision.",
                    "type": "array",
                    "items": {
                      "description": "A TypedReference refers to an object by Name, Kind, and APIVersion. It is commonly used to reference cluster-scoped objects or objects where the namespace is already known.",
                      "type": "object",
                      "required": [
                        "apiVersion",
                        "kind",
                        "name"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion of the referenced object.",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind of the referenced object.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "uid": {
                          "description": "UID of the referenced object.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "permissionRequests": {
                    "description": "PermissionRequests made by this package. The package declares that its controller needs these permissions to run. The RBAC manager is responsible for granting them.",
                    "type": "array",
                    "items": {
                      "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
                      "type": "object",
                      "required": [
                        "verbs"
                      ],
                      "properties": {
                        "apiGroups": {
                          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. \"\" represents the core API group and \"*\" represents all API groups.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "nonResourceURLs": {
                          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "resourceNames": {
                          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "resources": {
                          "description": "Resources is a list of resources this rule applies to. '*' represents all resources.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "verbs": {
                          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "HEALTHY",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Healthy')].status"
          },
          {
            "name": "REVISION",
            "type": "string",
            "jsonPath": ".spec.revision"
          },
          {
            "name": "IMAGE",
            "type": "string",
            "jsonPath": ".spec.image"
          },
          {
            "name": "STATE",
            "type": "string",
            "jsonPath": ".spec.desiredState"
          },
          {
            "name": "DEP-FOUND",
            "type": "string",
            "jsonPath": ".status.foundDependencies"
          },
          {
            "name": "DEP-INSTALLED",
            "type": "string",
            "jsonPath": ".status.installedDependencies"
          },
          {
            "name": "AGE",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}