{
  "$schema": "http://json-schema.org/schema#",
  "description": "A ProviderRevision that has been added to Crossplane.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "pkg.crossplane.io/v1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "ProviderRevision"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "PackageRevisionSpec specifies the desired state of a PackageRevision.",
      "type": "object",
      "required": [
        "desiredState",
        "image",
        "revision"
      ],
      "properties": {
        "commonLabels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "controllerConfigRef": {
          "description": "ControllerConfigRef references a ControllerConfig resource that will be used to configure the packaged controller Deployment.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the ControllerConfig.",
              "type": "string"
            }
          }
        },
        "desiredState": {
          "description": "DesiredState of the PackageRevision. Can be either Active or Inactive.",
          "type": "string"
        },
        "essTLSSecretName": {
          "description": "ESSTLSSecretName is the secret name of the TLS certificates that will be used by the provider for External Secret Stores.",
          "type": "string"
        },
        "ignoreCrossplaneConstraints": {
          "description": "IgnoreCrossplaneConstraints indicates to the package manager whether to honor Crossplane version constrains specified by the package. Default is false.",
          "type": "boolean",
          "default": false
        },
        "image": {
          "description": "Package image used by install Pod to extract package contents.",
          "type": "string"
        },
        "packagePullPolicy": {
          "description": "PackagePullPolicy defines the pull policy for the package. It is also applied to any images pulled for the package, such as a provider's controller image. Default is IfNotPresent.",
          "type": "string",
          "default": "IfNotPresent"
        },
        "packagePullSecrets": {
          "description": "PackagePullSecrets are named secrets in the same namespace that can be used to fetch packages from private registries. They are also applied to any images pulled for the package, such as a provider's controller image.",
          "type": "array",
          "items": {
            "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
            "type": "object",
            "properties": {
              "name": {
                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                "type": "string"
              }
            },
            "x-kubernetes-map-type": "atomic"
          }
        },
        "revision": {
          "description": "Revision number. Indicates when the revision will be garbage collected based on the parent's RevisionHistoryLimit.",
          "type": "integer",
          "format": "int64"
        },
        "skipDependencyResolution": {
          "description": "SkipDependencyResolution indicates to the package manager whether to skip resolving dependencies for a package. Setting this value to true may have unintended consequences. Default is false.",
          "type": "boolean",
          "default": false
        },
        "webhookTLSSecretName": {
          "description": "WebhookTLSSecretName is the name of the TLS Secret that will be used by the provider to serve a TLS-enabled webhook server. The certificate will be injected to webhook configurations as well as CRD conversion webhook strategy if needed. If it's not given, provider will not have a certificate mounted to its filesystem, webhook configurations won't be deployed and if there is a CRD with webhook conversion strategy, the installation will fail.",
          "type": "string"
        }
      }
    }
  }
}