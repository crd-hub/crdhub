{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "metricsconfigurations.metrics.appscode.com",
    "creationTimestamp": null,
    "labels": {
      "app.kubernetes.io/name": "metrics"
    }
  },
  "spec": {
    "group": "metrics.appscode.com",
    "names": {
      "plural": "metricsconfigurations",
      "singular": "metricsconfiguration",
      "kind": "MetricsConfiguration",
      "listKind": "MetricsConfigurationList",
      "categories": [
        "metrics",
        "appscode",
        "all"
      ]
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1alpha1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "MetricsConfigurationSpec is the spec of MetricsConfiguration object.",
                "type": "object",
                "required": [
                  "metrics",
                  "targetRef"
                ],
                "properties": {
                  "commonLabels": {
                    "description": "CommonLabels defines the common labels added to all the exported metrics",
                    "type": "array",
                    "items": {
                      "description": "Label contains the information of a metric label.\nGiven labels are always added in the metrics along with resource name and namespace.\nResource's name and namespace are always added in the labels by default.\nNo configuration is needed for name and namespace labels.\n\nExample: kube_pod_info{pod=\"\u003cpod_name\u003e\", namespace=\"\u003cpod_namespace\u003e\", host_ip=\"172.18.0.2\", pod_ip=\"10.244.0.14\", node=\"kind-control-plane\"}  1\nIn the example pod, namespace, host_ip, pod_ip, node are labels.\npod(resource name) and namespace are default labels. No configurations is needed for those.\n\n# To generate others labels, config should be given in the following way\n\nlabels:\n  - key: host_ip\n    valuePath: .status.hostIP\n  - key: pod_ip\n    valuePath: .status.podIP\n  - key: node\n    valuePath: .spec.nodeName\n\nEither Value or ValuePath must be specified for a Label.\nIf both is specified, ValuePath is ignored.\nNote that if a valuePath doesn't exist for a label key, the label will be ignored.",
                      "type": "object",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "key": {
                          "description": "Key defines the label key",
                          "type": "string"
                        },
                        "value": {
                          "description": "Value defines the hard coded label value.\nExample:\nlabels:\n  - key: unit\n    value: byte\n  - key: environment\n    value: production",
                          "type": "string"
                        },
                        "valuePath": {
                          "description": "ValuePath defines the label value path.\nExample: To add deployment's resource version as labels,\nlabels:\n  - key: version\n    valuePath: .metadata.resourceVersion",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "metrics": {
                    "description": "List of Metrics configuration for the resource object defined in TargetRef",
                    "type": "array",
                    "items": {
                      "description": "Metrics contains the configuration of a metric in prometheus style.",
                      "type": "object",
                      "required": [
                        "help",
                        "name",
                        "type"
                      ],
                      "properties": {
                        "field": {
                          "description": "Field defines the metric value path of the manifest file and the type of that value",
                          "type": "object",
                          "required": [
                            "path",
                            "type"
                          ],
                          "properties": {
                            "path": {
                              "description": "Path defines the json path of the object.\nExample: For deployment spec replica count, the path will be .spec.replicas",
                              "type": "string"
                            },
                            "type": {
                              "description": "Type defines the type of the value in the given Path\nType can be \"Integer\" for integer value like .spec.replicas,\n\"DateTime\" for time stamp value like .metadata.creationTimestamp\n\"Array\" for array field like .spec.containers\n\"String\" for string field like .statue.phase (for pod status)",
                              "type": "string",
                              "enum": [
                                "Integer",
                                "DateTime",
                                "Array",
                                "String"
                              ]
                            }
                          }
                        },
                        "help": {
                          "description": "Help is used to describe the metrics.\nExample: For kube_deployment_spec_replicas, help string can be \"Number of desired pods for a deployment.\"",
                          "type": "string"
                        },
                        "labels": {
                          "description": "Labels defines the metric labels as a key-value pair",
                          "type": "array",
                          "items": {
                            "description": "Label contains the information of a metric label.\nGiven labels are always added in the metrics along with resource name and namespace.\nResource's name and namespace are always added in the labels by default.\nNo configuration is needed for name and namespace labels.\n\nExample: kube_pod_info{pod=\"\u003cpod_name\u003e\", namespace=\"\u003cpod_namespace\u003e\", host_ip=\"172.18.0.2\", pod_ip=\"10.244.0.14\", node=\"kind-control-plane\"}  1\nIn the example pod, namespace, host_ip, pod_ip, node are labels.\npod(resource name) and namespace are default labels. No configurations is needed for those.\n\n# To generate others labels, config should be given in the following way\n\nlabels:\n  - key: host_ip\n    valuePath: .status.hostIP\n  - key: pod_ip\n    valuePath: .status.podIP\n  - key: node\n    valuePath: .spec.nodeName\n\nEither Value or ValuePath must be specified for a Label.\nIf both is specified, ValuePath is ignored.\nNote that if a valuePath doesn't exist for a label key, the label will be ignored.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "Key defines the label key",
                                "type": "string"
                              },
                              "value": {
                                "description": "Value defines the hard coded label value.\nExample:\nlabels:\n  - key: unit\n    value: byte\n  - key: environment\n    value: production",
                                "type": "string"
                              },
                              "valuePath": {
                                "description": "ValuePath defines the label value path.\nExample: To add deployment's resource version as labels,\nlabels:\n  - key: version\n    valuePath: .metadata.resourceVersion",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "metricValue": {
                          "description": "MetricValue defines the configuration to obtain metric value.\n\nMetrics must contain either States or MetricValue.\nIf both are specified, MetricValue will be ignored.",
                          "type": "object",
                          "properties": {
                            "value": {
                              "description": "Value contains the metric value. It is always equal to 1.\nIt is defined when some information of the object is\ncollected as labels but there is no specific metric value.\n\nExample: For metrics \"kube_pod_info\", there are some information\nlike host_ip, pod_ip, node name is collected as labels.\nAs there must be a metric value, metric value is kept as 1.\nThe metric will look like `kube_pod_info{host_ip=\"172.18.0.2\", pod_ip=\"10.244.0.14\", node=\"kind-control-plane\" .....}  1`",
                              "type": "number",
                              "format": "double"
                            },
                            "valueFromExpression": {
                              "description": "ValueFromExpression contains an expression for the metric value\nexpression can be a function as well. Parameters is used in the expression string\n\nAvailable expression evaluation functions are:\n\nint() returns 1 if the expression is true otherwise 0,\nexample: int(phase == 'Running')\n\npercentage(percent, total, roundUp) returns the value of (percent * total%) when `percent` contains the percent(%) value.\nIf percent represents an Integer value, then it will simply return it.\nroundUp is an optional field. By default, its value is false. If roundUp is set as `true`, the resultant value will be rounded up.\nexample: (i) percentage(\"25%\", 4) will return 1.\n        (ii) percentage(\"25%\", 1 , true) will return 1 as roundUp is set as true.\n       (iii) percentage(2, 4) will return 2 as percent is representing an Integer value.\n\ncpu_cores() returns the cpu in unit core\nexample: cpu_cores(cpu), for cpu value 150m, it will return 0.15\n\nbytes() returns the memory size in byte\nexample: bytes(memory), for memory value 1 ki, it will return 1024\n\nunix() returns the DateTime string into unix format.\nexample: unix(dateTime) will return the corresponding unix value for the given dateTime\n\nin above examples phase, replicas, maxUnavailable, cpu, memory, dateTime are Parameter's key\nthose values will come from corresponding Parameter's value\n\nSome expression evaluation functions are used for calculating resource requests and limits.\nThose functions are stated here: https://github.com/kmodules/resource-metrics/blob/master/eval.go",
                              "type": "string"
                            },
                            "valueFromPath": {
                              "description": "ValueFromPath contains the field path of the manifest file of a object.\nValueFromPath is used when the metric value is coming from\nany specific json path of the object.\n\nExample: For metrics \"kube_deployment_spec_replicas\",\nthe metricValue is coming from a specific path .spec.replicas\nIn this case, valueFromPath: .spec.replicas\nSome example of json path: .metadata.observedGeneration, .spec.restartPolicy, .status.startTime\n\nSome example of json path\nwhich is coming from an element of an array: .spec.containers[*].image, .status.containerStatuses[*].restartCount",
                              "type": "string"
                            }
                          }
                        },
                        "name": {
                          "description": "Name defines the metrics name. Name should be in snake case.\nExample: kube_deployment_spec_replicas",
                          "type": "string"
                        },
                        "params": {
                          "description": "Params is list of parameters configuration used in expression evaluation",
                          "type": "array",
                          "items": {
                            "description": "Parameter contains the information of a parameter used in expression evaluation\nParameter should contain an user defined key and corresponding Value or ValuePath.\nEither Value or ValuePath must be specified.\nIf both are specified, ValuePath is ignored.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "Key defines the parameter's key",
                                "type": "string"
                              },
                              "value": {
                                "description": "Value defines user defined parameter's value.",
                                "type": "string"
                              },
                              "valuePath": {
                                "description": "ValuePath defines the manifest field path for the parameter's value.\nExample: To add deployment's spec replica count as parameter,\nparams:\n  - key: replica\n    valuePath: .spec.replicas",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "states": {
                          "description": "States handle metrics with label cardinality.\nStates specify the possible states for a label\nand their corresponding MetricValue configuration.\n\nMetrics must contain either States or MetricValue.\nIf both are specified, MetricValue will be ignored.",
                          "type": "object",
                          "required": [
                            "labelKey",
                            "values"
                          ],
                          "properties": {
                            "labelKey": {
                              "description": "LabelKey defines an user defined label key of the label\nwhich label cardinality is greater than one.\nExample: For metric \"kube_pod_status_phase\", the LabelKey can be \"phase\"",
                              "type": "string"
                            },
                            "values": {
                              "description": "Values contains the list of state values.\nThe size of the list is always equal to the cardinality of that label.\nExample: \"kube_pod_statue_phase\" metric has a label \"phase\"\nwhich cardinality is equal to 5. So Values should have StateValues config for all of them.",
                              "type": "array",
                              "items": {
                                "description": "StateValues contains the information of a state value.\nStateValues is used to define state with all possible\nlabel values and corresponding MetricValue.",
                                "type": "object",
                                "required": [
                                  "labelValue",
                                  "metricValue"
                                ],
                                "properties": {
                                  "labelValue": {
                                    "description": "LabelValue defines the value of the label.\nExample: For labelKey \"phase\" (metric: kube_pod_status_phase path: .status.phase )\nlabel value can be \"Running\", \"Succeeded\", \"Failed\", \"Unknown\" and \"Pending\"",
                                    "type": "string"
                                  },
                                  "metricValue": {
                                    "description": "MetricValue defines the configuration of the metric value for the corresponding LabelValue",
                                    "type": "object",
                                    "properties": {
                                      "value": {
                                        "description": "Value contains the metric value. It is always equal to 1.\nIt is defined when some information of the object is\ncollected as labels but there is no specific metric value.\n\nExample: For metrics \"kube_pod_info\", there are some information\nlike host_ip, pod_ip, node name is collected as labels.\nAs there must be a metric value, metric value is kept as 1.\nThe metric will look like `kube_pod_info{host_ip=\"172.18.0.2\", pod_ip=\"10.244.0.14\", node=\"kind-control-plane\" .....}  1`",
                                        "type": "number",
                                        "format": "double"
                                      },
                                      "valueFromExpression": {
                                        "description": "ValueFromExpression contains an expression for the metric value\nexpression can be a function as well. Parameters is used in the expression string\n\nAvailable expression evaluation functions are:\n\nint() returns 1 if the expression is true otherwise 0,\nexample: int(phase == 'Running')\n\npercentage(percent, total, roundUp) returns the value of (percent * total%) when `percent` contains the percent(%) value.\nIf percent represents an Integer value, then it will simply return it.\nroundUp is an optional field. By default, its value is false. If roundUp is set as `true`, the resultant value will be rounded up.\nexample: (i) percentage(\"25%\", 4) will return 1.\n        (ii) percentage(\"25%\", 1 , true) will return 1 as roundUp is set as true.\n       (iii) percentage(2, 4) will return 2 as percent is representing an Integer value.\n\ncpu_cores() returns the cpu in unit core\nexample: cpu_cores(cpu), for cpu value 150m, it will return 0.15\n\nbytes() returns the memory size in byte\nexample: bytes(memory), for memory value 1 ki, it will return 1024\n\nunix() returns the DateTime string into unix format.\nexample: unix(dateTime) will return the corresponding unix value for the given dateTime\n\nin above examples phase, replicas, maxUnavailable, cpu, memory, dateTime are Parameter's key\nthose values will come from corresponding Parameter's value\n\nSome expression evaluation functions are used for calculating resource requests and limits.\nThose functions are stated here: https://github.com/kmodules/resource-metrics/blob/master/eval.go",
                                        "type": "string"
                                      },
                                      "valueFromPath": {
                                        "description": "ValueFromPath contains the field path of the manifest file of a object.\nValueFromPath is used when the metric value is coming from\nany specific json path of the object.\n\nExample: For metrics \"kube_deployment_spec_replicas\",\nthe metricValue is coming from a specific path .spec.replicas\nIn this case, valueFromPath: .spec.replicas\nSome example of json path: .metadata.observedGeneration, .spec.restartPolicy, .status.startTime\n\nSome example of json path\nwhich is coming from an element of an array: .spec.containers[*].image, .status.containerStatuses[*].restartCount",
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "type": {
                          "description": "Type defines the metrics type.\nFor kubernetes based object, types can only be \"gauge\"",
                          "type": "string",
                          "enum": [
                            "gauge"
                          ]
                        }
                      }
                    }
                  },
                  "targetRef": {
                    "description": "TargetRef defines the object for which metrics will be collected",
                    "type": "object",
                    "required": [
                      "apiVersion",
                      "kind"
                    ],
                    "properties": {
                      "apiVersion": {
                        "description": "APIVersion defines the versioned schema of this representation of an object.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind is a string value representing the REST resource this object represents.\nIn CamelCase.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {},
        "additionalPrinterColumns": [
          {
            "name": "APIVersion",
            "type": "string",
            "jsonPath": ".spec.targetRef.apiVersion"
          },
          {
            "name": "Kind",
            "type": "string",
            "jsonPath": ".spec.targetRef.kind"
          },
          {
            "name": "Age",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}