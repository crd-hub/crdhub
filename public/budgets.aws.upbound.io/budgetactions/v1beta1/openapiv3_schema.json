{
  "$schema": "http://json-schema.org/schema#",
  "description": "BudgetAction is the Schema for the BudgetActions API. Provides a budget action resource.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "budgets.aws.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "BudgetAction"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "BudgetActionSpec defines the desired state of BudgetAction",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "accountId": {
              "description": "The ID of the target account for budget. Will use current user's account_id by default if omitted.",
              "type": "string"
            },
            "actionThreshold": {
              "description": "The trigger threshold of the action. See Action Threshold.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "actionThresholdType": {
                    "description": "The type of threshold for a notification. Valid values are PERCENTAGE or ABSOLUTE_VALUE.",
                    "type": "string"
                  },
                  "actionThresholdValue": {
                    "description": "The threshold of a notification.",
                    "type": "number"
                  }
                }
              }
            },
            "actionType": {
              "description": "The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. Valid values are APPLY_IAM_POLICY, APPLY_SCP_POLICY, and RUN_SSM_DOCUMENTS.",
              "type": "string"
            },
            "approvalModel": {
              "description": "This specifies if the action needs manual or automatic approval. Valid values are AUTOMATIC and MANUAL.",
              "type": "string"
            },
            "budgetName": {
              "description": "The name of a budget.",
              "type": "string"
            },
            "budgetNameRef": {
              "description": "Reference to a Budget in budgets to populate budgetName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "budgetNameSelector": {
              "description": "Selector for a Budget in budgets to populate budgetName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "definition": {
              "description": "Specifies all of the type-specific parameters. See Definition.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "iamActionDefinition": {
                    "description": "The AWS Identity and Access Management (IAM) action definition details. See IAM Action Definition.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "groups": {
                          "description": "A list of groups to be attached. There must be at least one group.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "policyArn": {
                          "description": "The Amazon Resource Name (ARN) of the policy to be attached.",
                          "type": "string"
                        },
                        "policyArnRef": {
                          "description": "Reference to a Policy in iam to populate policyArn.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name of the referenced object.",
                              "type": "string"
                            },
                            "policy": {
                              "description": "Policies for referencing.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "policyArnSelector": {
                          "description": "Selector for a Policy in iam to populate policyArn.",
                          "type": "object",
                          "properties": {
                            "matchControllerRef": {
                              "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                              "type": "boolean"
                            },
                            "matchLabels": {
                              "description": "MatchLabels ensures an object with matching labels is selected.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "policy": {
                              "description": "Policies for selection.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "roles": {
                          "description": "A list of roles to be attached. There must be at least one role.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "users": {
                          "description": "A list of users to be attached. There must be at least one user.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "scpActionDefinition": {
                    "description": "The service control policies (SCPs) action definition details. See SCP Action Definition.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "policyId": {
                          "description": "The policy ID attached.",
                          "type": "string"
                        },
                        "targetIds": {
                          "description": "A list of target IDs.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "ssmActionDefinition": {
                    "description": "The AWS Systems Manager (SSM) action definition details. See SSM Action Definition.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "region"
                      ],
                      "properties": {
                        "actionSubType": {
                          "description": "The action subType. Valid values are STOP_EC2_INSTANCES or STOP_RDS_INSTANCES.",
                          "type": "string"
                        },
                        "instanceIds": {
                          "description": "The EC2 and RDS instance IDs.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "region": {
                          "description": "The Region to run the SSM document.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "executionRoleArn": {
              "description": "The role passed for action execution and reversion. Roles and actions must be in the same account.",
              "type": "string"
            },
            "executionRoleArnRef": {
              "description": "Reference to a Role in iam to populate executionRoleArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "executionRoleArnSelector": {
              "description": "Selector for a Role in iam to populate executionRoleArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "notificationType": {
              "description": "The type of a notification. Valid values are ACTUAL or FORECASTED.",
              "type": "string"
            },
            "region": {
              "description": "The Region to run the SSM document. Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "subscriber": {
              "description": "A list of subscribers. See Subscriber.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "address": {
                    "description": "The address that AWS sends budget notifications to, either an SNS topic or an email.",
                    "type": "string"
                  },
                  "subscriptionType": {
                    "description": "The type of notification that AWS sends to a subscriber. Valid values are SNS or EMAIL.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "accountId": {
              "description": "The ID of the target account for budget. Will use current user's account_id by default if omitted.",
              "type": "string"
            },
            "actionThreshold": {
              "description": "The trigger threshold of the action. See Action Threshold.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "actionThresholdType": {
                    "description": "The type of threshold for a notification. Valid values are PERCENTAGE or ABSOLUTE_VALUE.",
                    "type": "string"
                  },
                  "actionThresholdValue": {
                    "description": "The threshold of a notification.",
                    "type": "number"
                  }
                }
              }
            },
            "actionType": {
              "description": "The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. Valid values are APPLY_IAM_POLICY, APPLY_SCP_POLICY, and RUN_SSM_DOCUMENTS.",
              "type": "string"
            },
            "approvalModel": {
              "description": "This specifies if the action needs manual or automatic approval. Valid values are AUTOMATIC and MANUAL.",
              "type": "string"
            },
            "definition": {
              "description": "Specifies all of the type-specific parameters. See Definition.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "iamActionDefinition": {
                    "description": "The AWS Identity and Access Management (IAM) action definition details. See IAM Action Definition.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "groups": {
                          "description": "A list of groups to be attached. There must be at least one group.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "roles": {
                          "description": "A list of roles to be attached. There must be at least one role.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "users": {
                          "description": "A list of users to be attached. There must be at least one user.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "scpActionDefinition": {
                    "description": "The service control policies (SCPs) action definition details. See SCP Action Definition.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "policyId": {
                          "description": "The policy ID attached.",
                          "type": "string"
                        },
                        "targetIds": {
                          "description": "A list of target IDs.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "ssmActionDefinition": {
                    "description": "The AWS Systems Manager (SSM) action definition details. See SSM Action Definition.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "actionSubType": {
                          "description": "The action subType. Valid values are STOP_EC2_INSTANCES or STOP_RDS_INSTANCES.",
                          "type": "string"
                        },
                        "instanceIds": {
                          "description": "The EC2 and RDS instance IDs.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "notificationType": {
              "description": "The type of a notification. Valid values are ACTUAL or FORECASTED.",
              "type": "string"
            },
            "subscriber": {
              "description": "A list of subscribers. See Subscriber.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "address": {
                    "description": "The address that AWS sends budget notifications to, either an SNS topic or an email.",
                    "type": "string"
                  },
                  "subscriptionType": {
                    "description": "The type of notification that AWS sends to a subscriber. Valid values are SNS or EMAIL.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.actionThreshold) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.actionThreshold))",
          "message": "spec.forProvider.actionThreshold is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.actionType) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.actionType))",
          "message": "spec.forProvider.actionType is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.approvalModel) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.approvalModel))",
          "message": "spec.forProvider.approvalModel is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.definition) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.definition))",
          "message": "spec.forProvider.definition is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.notificationType) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.notificationType))",
          "message": "spec.forProvider.notificationType is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subscriber) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.subscriber))",
          "message": "spec.forProvider.subscriber is a required parameter"
        }
      ]
    }
  }
}