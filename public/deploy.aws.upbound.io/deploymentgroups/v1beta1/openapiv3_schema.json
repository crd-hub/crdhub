{
  "$schema": "http://json-schema.org/schema#",
  "description": "DeploymentGroup is the Schema for the DeploymentGroups API. Provides a CodeDeploy deployment group.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "deploy.aws.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "DeploymentGroup"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "DeploymentGroupSpec defines the desired state of DeploymentGroup",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "alarmConfiguration": {
              "description": "Configuration block of alarms associated with the deployment group (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "alarms": {
                    "description": "A list of alarms configured for the deployment group. A maximum of 10 alarms can be added to a deployment group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "enabled": {
                    "description": "Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.",
                    "type": "boolean"
                  },
                  "ignorePollAlarmFailure": {
                    "description": "Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is false.",
                    "type": "boolean"
                  }
                }
              }
            },
            "appName": {
              "description": "The name of the application.",
              "type": "string"
            },
            "appNameRef": {
              "description": "Reference to a App in deploy to populate appName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "appNameSelector": {
              "description": "Selector for a App in deploy to populate appName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "autoRollbackConfiguration": {
              "description": "Configuration block of the automatic rollback configuration associated with the deployment group (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "description": "Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.",
                    "type": "boolean"
                  },
                  "events": {
                    "description": "The event type or types that trigger a rollback. Supported types are DEPLOYMENT_FAILURE and DEPLOYMENT_STOP_ON_ALARM.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "autoscalingGroups": {
              "description": "Autoscaling groups associated with the deployment group.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "blueGreenDeploymentConfig": {
              "description": "Configuration block of the blue/green deployment options for a deployment group (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deploymentReadyOption": {
                    "description": "Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "actionOnTimeout": {
                          "description": "When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.",
                          "type": "string"
                        },
                        "waitTimeInMinutes": {
                          "description": "The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for action_on_timeout.",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "greenFleetProvisioningOption": {
                    "description": "Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "action": {
                          "description": "The method used to add instances to a replacement environment.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "terminateBlueInstancesOnDeploymentSuccess": {
                    "description": "Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "action": {
                          "description": "The method used to add instances to a replacement environment.",
                          "type": "string"
                        },
                        "terminationWaitTimeInMinutes": {
                          "description": "The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "deploymentConfigName": {
              "description": "The name of the group's deployment config. The default is \"CodeDeployDefault.OneAtATime\".",
              "type": "string"
            },
            "deploymentStyle": {
              "description": "Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deploymentOption": {
                    "description": "Indicates whether to route deployment traffic behind a load balancer. Valid Values are WITH_TRAFFIC_CONTROL or WITHOUT_TRAFFIC_CONTROL. Default is WITHOUT_TRAFFIC_CONTROL.",
                    "type": "string"
                  },
                  "deploymentType": {
                    "description": "Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are IN_PLACE or BLUE_GREEN. Default is IN_PLACE.",
                    "type": "string"
                  }
                }
              }
            },
            "ec2TagFilter": {
              "description": "Tag filters associated with the deployment group. See the AWS docs for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "The key of the tag filter.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The value of the tag filter.",
                    "type": "string"
                  }
                }
              }
            },
            "ec2TagSet": {
              "description": "Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "ec2TagFilter": {
                    "description": "Tag filters associated with the deployment group. See the AWS docs for details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "The key of the tag filter.",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.",
                          "type": "string"
                        },
                        "value": {
                          "description": "The value of the tag filter.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "ecsService": {
              "description": "Configuration block(s) of the ECS services for a deployment group (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "clusterName": {
                    "description": "The name of the ECS cluster.",
                    "type": "string"
                  },
                  "clusterNameRef": {
                    "description": "Reference to a Cluster in ecs to populate clusterName.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "clusterNameSelector": {
                    "description": "Selector for a Cluster in ecs to populate clusterName.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "serviceName": {
                    "description": "The name of the ECS service.",
                    "type": "string"
                  },
                  "serviceNameRef": {
                    "description": "Reference to a Service in ecs to populate serviceName.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "serviceNameSelector": {
                    "description": "Selector for a Service in ecs to populate serviceName.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "loadBalancerInfo": {
              "description": "Single configuration block of the load balancer to use in a blue/green deployment (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "elbInfo": {
                    "description": "The Classic Elastic Load Balancer to use in a deployment. Conflicts with target_group_info and target_group_pair_info.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.",
                          "type": "string"
                        },
                        "nameRef": {
                          "description": "Reference to a ELB in elb to populate name.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name of the referenced object.",
                              "type": "string"
                            },
                            "policy": {
                              "description": "Policies for referencing.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "nameSelector": {
                          "description": "Selector for a ELB in elb to populate name.",
                          "type": "object",
                          "properties": {
                            "matchControllerRef": {
                              "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                              "type": "boolean"
                            },
                            "matchLabels": {
                              "description": "MatchLabels ensures an object with matching labels is selected.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "policy": {
                              "description": "Policies for selection.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "targetGroupInfo": {
                    "description": "The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with elb_info and target_group_pair_info.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "targetGroupPairInfo": {
                    "description": "The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with elb_info and target_group_info.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "prodTrafficRoute": {
                          "description": "Configuration block for the production traffic route (documented below).",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "listenerArns": {
                                "description": "List of Amazon Resource Names (ARNs) of the load balancer listeners.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "targetGroup": {
                          "description": "Configuration blocks for a target group within a target group pair (documented below).",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.",
                                "type": "string"
                              },
                              "nameRef": {
                                "description": "Reference to a LBTargetGroup in elbv2 to populate name.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name of the referenced object.",
                                    "type": "string"
                                  },
                                  "policy": {
                                    "description": "Policies for referencing.",
                                    "type": "object",
                                    "properties": {
                                      "resolution": {
                                        "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                        "type": "string",
                                        "default": "Required",
                                        "enum": [
                                          "Required",
                                          "Optional"
                                        ]
                                      },
                                      "resolve": {
                                        "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                        "type": "string",
                                        "enum": [
                                          "Always",
                                          "IfNotPresent"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "nameSelector": {
                                "description": "Selector for a LBTargetGroup in elbv2 to populate name.",
                                "type": "object",
                                "properties": {
                                  "matchControllerRef": {
                                    "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                    "type": "boolean"
                                  },
                                  "matchLabels": {
                                    "description": "MatchLabels ensures an object with matching labels is selected.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "policy": {
                                    "description": "Policies for selection.",
                                    "type": "object",
                                    "properties": {
                                      "resolution": {
                                        "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                        "type": "string",
                                        "default": "Required",
                                        "enum": [
                                          "Required",
                                          "Optional"
                                        ]
                                      },
                                      "resolve": {
                                        "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                        "type": "string",
                                        "enum": [
                                          "Always",
                                          "IfNotPresent"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "testTrafficRoute": {
                          "description": "Configuration block for the test traffic route (documented below).",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "listenerArns": {
                                "description": "List of Amazon Resource Names (ARNs) of the load balancer listeners.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "onPremisesInstanceTagFilter": {
              "description": "On premise tag filters associated with the group. See the AWS docs for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "The key of the tag filter.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The value of the tag filter.",
                    "type": "string"
                  }
                }
              }
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "serviceRoleArn": {
              "description": "The service role ARN that allows deployments.",
              "type": "string"
            },
            "serviceRoleArnRef": {
              "description": "Reference to a Role in iam to populate serviceRoleArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "serviceRoleArnSelector": {
              "description": "Selector for a Role in iam to populate serviceRoleArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "triggerConfiguration": {
              "description": "Configuration block(s) of the triggers for the deployment group (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "triggerEvents": {
                    "description": "The event type or types for which notifications are triggered. Some values that are supported: DeploymentStart, DeploymentSuccess, DeploymentFailure, DeploymentStop, DeploymentRollback, InstanceStart, InstanceSuccess, InstanceFailure.  See the CodeDeploy documentation for all possible values.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "triggerName": {
                    "description": "The name of the notification trigger.",
                    "type": "string"
                  },
                  "triggerTargetArn": {
                    "description": "The ARN of the SNS topic through which notifications are sent.",
                    "type": "string"
                  },
                  "triggerTargetArnRef": {
                    "description": "Reference to a Topic in sns to populate triggerTargetArn.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "triggerTargetArnSelector": {
                    "description": "Selector for a Topic in sns to populate triggerTargetArn.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "alarmConfiguration": {
              "description": "Configuration block of alarms associated with the deployment group (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "alarms": {
                    "description": "A list of alarms configured for the deployment group. A maximum of 10 alarms can be added to a deployment group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "enabled": {
                    "description": "Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.",
                    "type": "boolean"
                  },
                  "ignorePollAlarmFailure": {
                    "description": "Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is false.",
                    "type": "boolean"
                  }
                }
              }
            },
            "autoRollbackConfiguration": {
              "description": "Configuration block of the automatic rollback configuration associated with the deployment group (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "description": "Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.",
                    "type": "boolean"
                  },
                  "events": {
                    "description": "The event type or types that trigger a rollback. Supported types are DEPLOYMENT_FAILURE and DEPLOYMENT_STOP_ON_ALARM.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "autoscalingGroups": {
              "description": "Autoscaling groups associated with the deployment group.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "blueGreenDeploymentConfig": {
              "description": "Configuration block of the blue/green deployment options for a deployment group (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deploymentReadyOption": {
                    "description": "Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "actionOnTimeout": {
                          "description": "When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.",
                          "type": "string"
                        },
                        "waitTimeInMinutes": {
                          "description": "The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for action_on_timeout.",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "greenFleetProvisioningOption": {
                    "description": "Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "action": {
                          "description": "The method used to add instances to a replacement environment.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "terminateBlueInstancesOnDeploymentSuccess": {
                    "description": "Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "action": {
                          "description": "The method used to add instances to a replacement environment.",
                          "type": "string"
                        },
                        "terminationWaitTimeInMinutes": {
                          "description": "The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "deploymentConfigName": {
              "description": "The name of the group's deployment config. The default is \"CodeDeployDefault.OneAtATime\".",
              "type": "string"
            },
            "deploymentStyle": {
              "description": "Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deploymentOption": {
                    "description": "Indicates whether to route deployment traffic behind a load balancer. Valid Values are WITH_TRAFFIC_CONTROL or WITHOUT_TRAFFIC_CONTROL. Default is WITHOUT_TRAFFIC_CONTROL.",
                    "type": "string"
                  },
                  "deploymentType": {
                    "description": "Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are IN_PLACE or BLUE_GREEN. Default is IN_PLACE.",
                    "type": "string"
                  }
                }
              }
            },
            "ec2TagFilter": {
              "description": "Tag filters associated with the deployment group. See the AWS docs for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "The key of the tag filter.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The value of the tag filter.",
                    "type": "string"
                  }
                }
              }
            },
            "ec2TagSet": {
              "description": "Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "ec2TagFilter": {
                    "description": "Tag filters associated with the deployment group. See the AWS docs for details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "The key of the tag filter.",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.",
                          "type": "string"
                        },
                        "value": {
                          "description": "The value of the tag filter.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "ecsService": {
              "description": "Configuration block(s) of the ECS services for a deployment group (documented below).",
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "loadBalancerInfo": {
              "description": "Single configuration block of the load balancer to use in a blue/green deployment (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "elbInfo": {
                    "description": "The Classic Elastic Load Balancer to use in a deployment. Conflicts with target_group_info and target_group_pair_info.",
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "targetGroupInfo": {
                    "description": "The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with elb_info and target_group_pair_info.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "targetGroupPairInfo": {
                    "description": "The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with elb_info and target_group_info.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "prodTrafficRoute": {
                          "description": "Configuration block for the production traffic route (documented below).",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "listenerArns": {
                                "description": "List of Amazon Resource Names (ARNs) of the load balancer listeners.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "targetGroup": {
                          "description": "Configuration blocks for a target group within a target group pair (documented below).",
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        },
                        "testTrafficRoute": {
                          "description": "Configuration block for the test traffic route (documented below).",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "listenerArns": {
                                "description": "List of Amazon Resource Names (ARNs) of the load balancer listeners.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "onPremisesInstanceTagFilter": {
              "description": "On premise tag filters associated with the group. See the AWS docs for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "The key of the tag filter.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The value of the tag filter.",
                    "type": "string"
                  }
                }
              }
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "triggerConfiguration": {
              "description": "Configuration block(s) of the triggers for the deployment group (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "triggerEvents": {
                    "description": "The event type or types for which notifications are triggered. Some values that are supported: DeploymentStart, DeploymentSuccess, DeploymentFailure, DeploymentStop, DeploymentRollback, InstanceStart, InstanceSuccess, InstanceFailure.  See the CodeDeploy documentation for all possible values.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "triggerName": {
                    "description": "The name of the notification trigger.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      }
    }
  }
}