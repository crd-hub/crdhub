{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "clusterresourcesets.addons.cluster.x-k8s.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.17.2"
    }
  },
  "spec": {
    "group": "addons.cluster.x-k8s.io",
    "names": {
      "plural": "clusterresourcesets",
      "singular": "clusterresourceset",
      "kind": "ClusterResourceSet",
      "listKind": "ClusterResourceSetList",
      "categories": [
        "cluster-api"
      ]
    },
    "scope": "Namespaced",
    "versions": [
      {
        "name": "v1alpha3",
        "served": false,
        "storage": false,
        "deprecated": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "ClusterResourceSet is the Schema for the clusterresourcesets API.\n\nDeprecated: This type will be removed in one of the next releases.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "spec is the desired state of ClusterResourceSet.",
                "type": "object",
                "required": [
                  "clusterSelector"
                ],
                "properties": {
                  "clusterSelector": {
                    "description": "clusterSelector is the label selector for Clusters. The Clusters that are\nselected by this will be the ones affected by this ClusterResourceSet.\nIt must match the Cluster labels. This field is immutable.",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "x-kubernetes-list-type": "atomic"
                            }
                          }
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "resources": {
                    "description": "resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.",
                    "type": "array",
                    "items": {
                      "description": "ResourceRef specifies a resource.",
                      "type": "object",
                      "required": [
                        "kind",
                        "name"
                      ],
                      "properties": {
                        "kind": {
                          "description": "kind of the resource. Supported kinds are: Secrets and ConfigMaps.",
                          "type": "string",
                          "enum": [
                            "Secret",
                            "ConfigMap"
                          ]
                        },
                        "name": {
                          "description": "name of the resource that is in the same namespace with ClusterResourceSet object.",
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    }
                  },
                  "strategy": {
                    "description": "strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.",
                    "type": "string",
                    "enum": [
                      "ApplyOnce"
                    ]
                  }
                }
              },
              "status": {
                "description": "status is the observed state of ClusterResourceSet.",
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "conditions defines current state of the ClusterResourceSet.",
                    "type": "array",
                    "items": {
                      "description": "Condition defines an observation of a Cluster API resource operational state.",
                      "type": "object",
                      "required": [
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "message is a human readable message indicating details about the transition.\nThis field may be empty.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "reason is the reason for the condition's last transition in CamelCase.\nThe specific API may choose whether or not this field is considered a guaranteed API.\nThis field may not be empty.",
                          "type": "string"
                        },
                        "severity": {
                          "description": "severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                          "type": "string"
                        },
                        "status": {
                          "description": "status of the condition, one of True, False, Unknown.",
                          "type": "string"
                        },
                        "type": {
                          "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions\ncan be useful (see .node.status.conditions), the ability to deconflict is important.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "observedGeneration": {
                    "description": "observedGeneration reflects the generation of the most recently observed ClusterResourceSet.",
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        }
      },
      {
        "name": "v1alpha4",
        "served": false,
        "storage": false,
        "deprecated": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "ClusterResourceSet is the Schema for the clusterresourcesets API.\n\nDeprecated: This type will be removed in one of the next releases.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "spec is the desired state of ClusterResourceSet.",
                "type": "object",
                "required": [
                  "clusterSelector"
                ],
                "properties": {
                  "clusterSelector": {
                    "description": "clusterSelector is the label selector for Clusters. The Clusters that are\nselected by this will be the ones affected by this ClusterResourceSet.\nIt must match the Cluster labels. This field is immutable.\nLabel selector cannot be empty.",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "x-kubernetes-list-type": "atomic"
                            }
                          }
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "resources": {
                    "description": "resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.",
                    "type": "array",
                    "items": {
                      "description": "ResourceRef specifies a resource.",
                      "type": "object",
                      "required": [
                        "kind",
                        "name"
                      ],
                      "properties": {
                        "kind": {
                          "description": "kind of the resource. Supported kinds are: Secrets and ConfigMaps.",
                          "type": "string",
                          "enum": [
                            "Secret",
                            "ConfigMap"
                          ]
                        },
                        "name": {
                          "description": "name of the resource that is in the same namespace with ClusterResourceSet object.",
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    }
                  },
                  "strategy": {
                    "description": "strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.",
                    "type": "string",
                    "enum": [
                      "ApplyOnce"
                    ]
                  }
                }
              },
              "status": {
                "description": "status is the observed state of ClusterResourceSet.",
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "conditions defines current state of the ClusterResourceSet.",
                    "type": "array",
                    "items": {
                      "description": "Condition defines an observation of a Cluster API resource operational state.",
                      "type": "object",
                      "required": [
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "message is a human readable message indicating details about the transition.\nThis field may be empty.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "reason is the reason for the condition's last transition in CamelCase.\nThe specific API may choose whether or not this field is considered a guaranteed API.\nThis field may not be empty.",
                          "type": "string"
                        },
                        "severity": {
                          "description": "severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                          "type": "string"
                        },
                        "status": {
                          "description": "status of the condition, one of True, False, Unknown.",
                          "type": "string"
                        },
                        "type": {
                          "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions\ncan be useful (see .node.status.conditions), the ability to deconflict is important.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "observedGeneration": {
                    "description": "observedGeneration reflects the generation of the most recently observed ClusterResourceSet.",
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "Age",
            "type": "date",
            "description": "Time duration since creation of ClusterResourceSet",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      },
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "ClusterResourceSet is the Schema for the clusterresourcesets API.\nFor advanced use cases an add-on provider should be used instead.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "spec is the desired state of ClusterResourceSet.",
                "type": "object",
                "required": [
                  "clusterSelector"
                ],
                "properties": {
                  "clusterSelector": {
                    "description": "clusterSelector is the label selector for Clusters. The Clusters that are\nselected by this will be the ones affected by this ClusterResourceSet.\nIt must match the Cluster labels. This field is immutable.\nLabel selector cannot be empty.",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "x-kubernetes-list-type": "atomic"
                            }
                          }
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "resources": {
                    "description": "resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.",
                    "type": "array",
                    "maxItems": 100,
                    "items": {
                      "description": "ResourceRef specifies a resource.",
                      "type": "object",
                      "required": [
                        "kind",
                        "name"
                      ],
                      "properties": {
                        "kind": {
                          "description": "kind of the resource. Supported kinds are: Secrets and ConfigMaps.",
                          "type": "string",
                          "enum": [
                            "Secret",
                            "ConfigMap"
                          ]
                        },
                        "name": {
                          "description": "name of the resource that is in the same namespace with ClusterResourceSet object.",
                          "type": "string",
                          "maxLength": 253,
                          "minLength": 1
                        }
                      }
                    }
                  },
                  "strategy": {
                    "description": "strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.",
                    "type": "string",
                    "enum": [
                      "ApplyOnce",
                      "Reconcile"
                    ]
                  }
                }
              },
              "status": {
                "description": "status is the observed state of ClusterResourceSet.",
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "conditions defines current state of the ClusterResourceSet.",
                    "type": "array",
                    "items": {
                      "description": "Condition defines an observation of a Cluster API resource operational state.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "message is a human readable message indicating details about the transition.\nThis field may be empty.",
                          "type": "string",
                          "maxLength": 10240,
                          "minLength": 1
                        },
                        "reason": {
                          "description": "reason is the reason for the condition's last transition in CamelCase.\nThe specific API may choose whether or not this field is considered a guaranteed API.\nThis field may be empty.",
                          "type": "string",
                          "maxLength": 256,
                          "minLength": 1
                        },
                        "severity": {
                          "description": "severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                          "type": "string",
                          "maxLength": 32
                        },
                        "status": {
                          "description": "status of the condition, one of True, False, Unknown.",
                          "type": "string"
                        },
                        "type": {
                          "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions\ncan be useful (see .node.status.conditions), the ability to deconflict is important.",
                          "type": "string",
                          "maxLength": 256,
                          "minLength": 1
                        }
                      }
                    }
                  },
                  "observedGeneration": {
                    "description": "observedGeneration reflects the generation of the most recently observed ClusterResourceSet.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "v1beta2": {
                    "description": "v1beta2 groups all the fields that will be added or modified in ClusterResourceSet's status with the V1Beta2 version.",
                    "type": "object",
                    "properties": {
                      "conditions": {
                        "description": "conditions represents the observations of a ClusterResourceSet's current state.\nKnown condition types are ResourceSetApplied, Deleting.",
                        "type": "array",
                        "maxItems": 32,
                        "items": {
                          "description": "Condition contains details for one aspect of the current state of this API Resource.",
                          "type": "object",
                          "required": [
                            "lastTransitionTime",
                            "message",
                            "reason",
                            "status",
                            "type"
                          ],
                          "properties": {
                            "lastTransitionTime": {
                              "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                              "type": "string",
                              "format": "date-time"
                            },
                            "message": {
                              "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                              "type": "string",
                              "maxLength": 32768
                            },
                            "observedGeneration": {
                              "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                              "type": "integer",
                              "format": "int64",
                              "minimum": 0
                            },
                            "reason": {
                              "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                              "type": "string",
                              "maxLength": 1024,
                              "minLength": 1,
                              "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                            },
                            "status": {
                              "description": "status of the condition, one of True, False, Unknown.",
                              "type": "string",
                              "enum": [
                                "True",
                                "False",
                                "Unknown"
                              ]
                            },
                            "type": {
                              "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                              "type": "string",
                              "maxLength": 316,
                              "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                            }
                          }
                        },
                        "x-kubernetes-list-map-keys": [
                          "type"
                        ],
                        "x-kubernetes-list-type": "map"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "Age",
            "type": "date",
            "description": "Time duration since creation of ClusterResourceSet",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}