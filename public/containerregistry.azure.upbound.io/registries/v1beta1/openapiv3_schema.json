{
  "$schema": "http://json-schema.org/schema#",
  "description": "Registry is the Schema for the Registrys API. Manages an Azure Container Registry.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "containerregistry.azure.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "Registry"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "RegistrySpec defines the desired state of Registry",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "adminEnabled": {
              "description": "Specifies whether the admin user is enabled. Defaults to false.",
              "type": "boolean"
            },
            "anonymousPullEnabled": {
              "description": "Whether allows anonymous (unauthenticated) pull access to this Container Registry? This is only supported on resources with the Standard or Premium SKU.",
              "type": "boolean"
            },
            "dataEndpointEnabled": {
              "description": "Whether to enable dedicated data endpoints for this Container Registry? This is only supported on resources with the Premium SKU.",
              "type": "boolean"
            },
            "encryption": {
              "description": "An encryption block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "description": "Boolean value that indicates whether encryption is enabled.",
                    "type": "boolean"
                  },
                  "identityClientId": {
                    "description": "The client ID of the managed identity associated with the encryption key.",
                    "type": "string"
                  },
                  "identityClientIdRef": {
                    "description": "Reference to a UserAssignedIdentity in managedidentity to populate identityClientId.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "identityClientIdSelector": {
                    "description": "Selector for a UserAssignedIdentity in managedidentity to populate identityClientId.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "keyVaultKeyId": {
                    "description": "The ID of the Key Vault Key.",
                    "type": "string"
                  }
                }
              }
            },
            "exportPolicyEnabled": {
              "description": "Boolean value that indicates whether export policy is enabled. Defaults to true. In order to set it to false, make sure the public_network_access_enabled is also set to false.",
              "type": "boolean"
            },
            "georeplications": {
              "description": "A georeplications block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "location": {
                    "description": "A location where the container registry should be geo-replicated.",
                    "type": "string"
                  },
                  "regionalEndpointEnabled": {
                    "description": "Whether regional endpoint is enabled for this Container Registry?",
                    "type": "boolean"
                  },
                  "tags": {
                    "description": "A mapping of tags to assign to this replication location.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "zoneRedundancyEnabled": {
                    "description": "Whether zone redundancy is enabled for this Container Registry? Changing this forces a new resource to be created. Defaults to false.",
                    "type": "boolean"
                  }
                }
              }
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "identityIds": {
                    "description": "Specifies a list of User Assigned Managed Identity IDs to be assigned to this Container Registry.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "type": {
                    "description": "Specifies the type of Managed Service Identity that should be configured on this Container Registry. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).",
                    "type": "string"
                  }
                }
              }
            },
            "location": {
              "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "networkRuleBypassOption": {
              "description": "Whether to allow trusted Azure services to access a network restricted Container Registry? Possible values are None and AzureServices. Defaults to AzureServices.",
              "type": "string"
            },
            "networkRuleSet": {
              "description": "A network_rule_set block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "defaultAction": {
                    "description": "The behaviour for requests matching no rules. Either Allow or Deny. Defaults to Allow",
                    "type": "string"
                  },
                  "ipRule": {
                    "description": "One or more ip_rule blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "action": {
                          "description": "The behaviour for requests matching this rule. At this time the only supported value is Allow",
                          "type": "string"
                        },
                        "ipRange": {
                          "description": "The CIDR block from which requests will match the rule.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "virtualNetwork": {
                    "description": "One or more virtual_network blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "action": {
                          "description": "The behaviour for requests matching this rule. At this time the only supported value is Allow",
                          "type": "string"
                        },
                        "subnetId": {
                          "description": "The subnet id from which requests will match the rule.",
                          "type": "string"
                        },
                        "subnetIdRef": {
                          "description": "Reference to a Subnet in network to populate subnetId.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name of the referenced object.",
                              "type": "string"
                            },
                            "policy": {
                              "description": "Policies for referencing.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "subnetIdSelector": {
                          "description": "Selector for a Subnet in network to populate subnetId.",
                          "type": "object",
                          "properties": {
                            "matchControllerRef": {
                              "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                              "type": "boolean"
                            },
                            "matchLabels": {
                              "description": "MatchLabels ensures an object with matching labels is selected.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "policy": {
                              "description": "Policies for selection.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "publicNetworkAccessEnabled": {
              "description": "Whether public network access is allowed for the container registry. Defaults to true.",
              "type": "boolean"
            },
            "quarantinePolicyEnabled": {
              "description": "Boolean value that indicates whether quarantine policy is enabled.",
              "type": "boolean"
            },
            "resourceGroupName": {
              "description": "The name of the resource group in which to create the Container Registry. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "retentionPolicy": {
              "description": "A retention_policy block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "days": {
                    "description": "The number of days to retain an untagged manifest after which it gets purged. Default is 7.",
                    "type": "number"
                  },
                  "enabled": {
                    "description": "Boolean value that indicates whether the policy is enabled.",
                    "type": "boolean"
                  }
                }
              }
            },
            "sku": {
              "description": "The SKU name of the container registry. Possible values are Basic, Standard and Premium.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "trustPolicy": {
              "description": "A trust_policy block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "description": "Boolean value that indicates whether the policy is enabled.",
                    "type": "boolean"
                  }
                }
              }
            },
            "zoneRedundancyEnabled": {
              "description": "Whether zone redundancy is enabled for this Container Registry? Changing this forces a new resource to be created. Defaults to false.",
              "type": "boolean"
            }
          }
        },
        "initProvider": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "adminEnabled": {
              "description": "Specifies whether the admin user is enabled. Defaults to false.",
              "type": "boolean"
            },
            "anonymousPullEnabled": {
              "description": "Whether allows anonymous (unauthenticated) pull access to this Container Registry? This is only supported on resources with the Standard or Premium SKU.",
              "type": "boolean"
            },
            "dataEndpointEnabled": {
              "description": "Whether to enable dedicated data endpoints for this Container Registry? This is only supported on resources with the Premium SKU.",
              "type": "boolean"
            },
            "encryption": {
              "description": "An encryption block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "description": "Boolean value that indicates whether encryption is enabled.",
                    "type": "boolean"
                  },
                  "keyVaultKeyId": {
                    "description": "The ID of the Key Vault Key.",
                    "type": "string"
                  }
                }
              }
            },
            "exportPolicyEnabled": {
              "description": "Boolean value that indicates whether export policy is enabled. Defaults to true. In order to set it to false, make sure the public_network_access_enabled is also set to false.",
              "type": "boolean"
            },
            "georeplications": {
              "description": "A georeplications block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "location": {
                    "description": "A location where the container registry should be geo-replicated.",
                    "type": "string"
                  },
                  "regionalEndpointEnabled": {
                    "description": "Whether regional endpoint is enabled for this Container Registry?",
                    "type": "boolean"
                  },
                  "tags": {
                    "description": "A mapping of tags to assign to this replication location.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "zoneRedundancyEnabled": {
                    "description": "Whether zone redundancy is enabled for this Container Registry? Changing this forces a new resource to be created. Defaults to false.",
                    "type": "boolean"
                  }
                }
              }
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "identityIds": {
                    "description": "Specifies a list of User Assigned Managed Identity IDs to be assigned to this Container Registry.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "type": {
                    "description": "Specifies the type of Managed Service Identity that should be configured on this Container Registry. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).",
                    "type": "string"
                  }
                }
              }
            },
            "location": {
              "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "networkRuleBypassOption": {
              "description": "Whether to allow trusted Azure services to access a network restricted Container Registry? Possible values are None and AzureServices. Defaults to AzureServices.",
              "type": "string"
            },
            "networkRuleSet": {
              "description": "A network_rule_set block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "defaultAction": {
                    "description": "The behaviour for requests matching no rules. Either Allow or Deny. Defaults to Allow",
                    "type": "string"
                  },
                  "ipRule": {
                    "description": "One or more ip_rule blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "action": {
                          "description": "The behaviour for requests matching this rule. At this time the only supported value is Allow",
                          "type": "string"
                        },
                        "ipRange": {
                          "description": "The CIDR block from which requests will match the rule.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "virtualNetwork": {
                    "description": "One or more virtual_network blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "action": {
                          "description": "The behaviour for requests matching this rule. At this time the only supported value is Allow",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "publicNetworkAccessEnabled": {
              "description": "Whether public network access is allowed for the container registry. Defaults to true.",
              "type": "boolean"
            },
            "quarantinePolicyEnabled": {
              "description": "Boolean value that indicates whether quarantine policy is enabled.",
              "type": "boolean"
            },
            "retentionPolicy": {
              "description": "A retention_policy block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "days": {
                    "description": "The number of days to retain an untagged manifest after which it gets purged. Default is 7.",
                    "type": "number"
                  },
                  "enabled": {
                    "description": "Boolean value that indicates whether the policy is enabled.",
                    "type": "boolean"
                  }
                }
              }
            },
            "sku": {
              "description": "The SKU name of the container registry. Possible values are Basic, Standard and Premium.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "trustPolicy": {
              "description": "A trust_policy block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "description": "Boolean value that indicates whether the policy is enabled.",
                    "type": "boolean"
                  }
                }
              }
            },
            "zoneRedundancyEnabled": {
              "description": "Whether zone redundancy is enabled for this Container Registry? Changing this forces a new resource to be created. Defaults to false.",
              "type": "boolean"
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.location))",
          "message": "spec.forProvider.location is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sku) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.sku))",
          "message": "spec.forProvider.sku is a required parameter"
        }
      ]
    }
  }
}