{
  "$schema": "http://json-schema.org/schema#",
  "description": "DataSetDelimitedText is the Schema for the DataSetDelimitedTexts API. Manages an Azure Delimited Text Dataset inside an Azure Data Factory.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "datafactory.azure.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "DataSetDelimitedText"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "DataSetDelimitedTextSpec defines the desired state of DataSetDelimitedText",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "additionalProperties": {
              "description": "A map of additional properties to associate with the Data Factory Dataset.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "annotations": {
              "description": "List of tags that can be used for describing the Data Factory Dataset.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "azureBlobFsLocation": {
              "description": "An azure_blob_fs_location block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "fileSystem": {
                    "description": "The storage data lake gen2 file system on the Azure Blob Storage Account hosting the file.",
                    "type": "string"
                  },
                  "filename": {
                    "description": "The filename of the file.",
                    "type": "string"
                  },
                  "path": {
                    "description": "The folder path to the file.",
                    "type": "string"
                  }
                }
              }
            },
            "azureBlobStorageLocation": {
              "description": "An azure_blob_storage_location block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "container": {
                    "description": "The container on the Azure Blob Storage Account hosting the file.",
                    "type": "string"
                  },
                  "dynamicContainerEnabled": {
                    "description": "Is the container using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicFilenameEnabled": {
                    "description": "Is the filename using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicPathEnabled": {
                    "description": "Is the path using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "filename": {
                    "description": "The filename of the file.",
                    "type": "string"
                  },
                  "path": {
                    "description": "The folder path to the file. This can be an empty string.",
                    "type": "string"
                  }
                }
              }
            },
            "columnDelimiter": {
              "description": "The column delimiter. Defaults to ,.",
              "type": "string"
            },
            "compressionCodec": {
              "description": "The compression codec used to read/write text files. Valid values are None, bzip2, gzip, deflate, ZipDeflate, TarGzip, Tar, snappy and lz4. Please note these values are case sensitive.",
              "type": "string"
            },
            "compressionLevel": {
              "description": "The compression ratio for the Data Factory Dataset. Valid values are Fastest or Optimal. Please note these values are case sensitive.",
              "type": "string"
            },
            "dataFactoryId": {
              "description": "The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.",
              "type": "string"
            },
            "dataFactoryIdRef": {
              "description": "Reference to a Factory in datafactory to populate dataFactoryId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "dataFactoryIdSelector": {
              "description": "Selector for a Factory in datafactory to populate dataFactoryId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "description": {
              "description": "The description for the Data Factory Dataset.",
              "type": "string"
            },
            "encoding": {
              "description": "The encoding format for the file.",
              "type": "string"
            },
            "escapeCharacter": {
              "description": "The escape character. Defaults to \\.",
              "type": "string"
            },
            "firstRowAsHeader": {
              "description": "When used as input, treat the first row of data as headers. When used as output, write the headers into the output as the first row of data. Defaults to false.",
              "type": "boolean"
            },
            "folder": {
              "description": "The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.",
              "type": "string"
            },
            "httpServerLocation": {
              "description": "A http_server_location block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "dynamicFilenameEnabled": {
                    "description": "Is the filename using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicPathEnabled": {
                    "description": "Is the path using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "filename": {
                    "description": "The filename of the file on the web server.",
                    "type": "string"
                  },
                  "path": {
                    "description": "The folder path to the file on the web server.",
                    "type": "string"
                  },
                  "relativeUrl": {
                    "description": "The base URL to the web server hosting the file.",
                    "type": "string"
                  }
                }
              }
            },
            "linkedServiceName": {
              "description": "The Data Factory Linked Service name in which to associate the Dataset with.",
              "type": "string"
            },
            "linkedServiceNameRef": {
              "description": "Reference to a LinkedServiceWeb in datafactory to populate linkedServiceName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "linkedServiceNameSelector": {
              "description": "Selector for a LinkedServiceWeb in datafactory to populate linkedServiceName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "nullValue": {
              "description": "The null value string. Defaults to an empty string. Defaults to \"\".",
              "type": "string"
            },
            "parameters": {
              "description": "A map of parameters to associate with the Data Factory Dataset.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "quoteCharacter": {
              "description": "The quote character. Defaults to \".",
              "type": "string"
            },
            "rowDelimiter": {
              "description": "The row delimiter. Defaults to any of the following values on read: \\r\\n, \\r, \\n, and \\n or \\r\\n on write by mapping data flow and Copy activity respectively.",
              "type": "string"
            },
            "schemaColumn": {
              "description": "A schema_column block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "The description of the column.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the column.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of the column. Valid values are Byte, Byte[], Boolean, Date, DateTime,DateTimeOffset, Decimal, Double, Guid, Int16, Int32, Int64, Single, String, TimeSpan. Please note these values are case sensitive.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "additionalProperties": {
              "description": "A map of additional properties to associate with the Data Factory Dataset.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "annotations": {
              "description": "List of tags that can be used for describing the Data Factory Dataset.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "azureBlobFsLocation": {
              "description": "An azure_blob_fs_location block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "fileSystem": {
                    "description": "The storage data lake gen2 file system on the Azure Blob Storage Account hosting the file.",
                    "type": "string"
                  },
                  "filename": {
                    "description": "The filename of the file.",
                    "type": "string"
                  },
                  "path": {
                    "description": "The folder path to the file.",
                    "type": "string"
                  }
                }
              }
            },
            "azureBlobStorageLocation": {
              "description": "An azure_blob_storage_location block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "container": {
                    "description": "The container on the Azure Blob Storage Account hosting the file.",
                    "type": "string"
                  },
                  "dynamicContainerEnabled": {
                    "description": "Is the container using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicFilenameEnabled": {
                    "description": "Is the filename using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicPathEnabled": {
                    "description": "Is the path using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "filename": {
                    "description": "The filename of the file.",
                    "type": "string"
                  },
                  "path": {
                    "description": "The folder path to the file. This can be an empty string.",
                    "type": "string"
                  }
                }
              }
            },
            "columnDelimiter": {
              "description": "The column delimiter. Defaults to ,.",
              "type": "string"
            },
            "compressionCodec": {
              "description": "The compression codec used to read/write text files. Valid values are None, bzip2, gzip, deflate, ZipDeflate, TarGzip, Tar, snappy and lz4. Please note these values are case sensitive.",
              "type": "string"
            },
            "compressionLevel": {
              "description": "The compression ratio for the Data Factory Dataset. Valid values are Fastest or Optimal. Please note these values are case sensitive.",
              "type": "string"
            },
            "description": {
              "description": "The description for the Data Factory Dataset.",
              "type": "string"
            },
            "encoding": {
              "description": "The encoding format for the file.",
              "type": "string"
            },
            "escapeCharacter": {
              "description": "The escape character. Defaults to \\.",
              "type": "string"
            },
            "firstRowAsHeader": {
              "description": "When used as input, treat the first row of data as headers. When used as output, write the headers into the output as the first row of data. Defaults to false.",
              "type": "boolean"
            },
            "folder": {
              "description": "The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.",
              "type": "string"
            },
            "httpServerLocation": {
              "description": "A http_server_location block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "dynamicFilenameEnabled": {
                    "description": "Is the filename using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicPathEnabled": {
                    "description": "Is the path using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "filename": {
                    "description": "The filename of the file on the web server.",
                    "type": "string"
                  },
                  "path": {
                    "description": "The folder path to the file on the web server.",
                    "type": "string"
                  },
                  "relativeUrl": {
                    "description": "The base URL to the web server hosting the file.",
                    "type": "string"
                  }
                }
              }
            },
            "nullValue": {
              "description": "The null value string. Defaults to an empty string. Defaults to \"\".",
              "type": "string"
            },
            "parameters": {
              "description": "A map of parameters to associate with the Data Factory Dataset.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "quoteCharacter": {
              "description": "The quote character. Defaults to \".",
              "type": "string"
            },
            "rowDelimiter": {
              "description": "The row delimiter. Defaults to any of the following values on read: \\r\\n, \\r, \\n, and \\n or \\r\\n on write by mapping data flow and Copy activity respectively.",
              "type": "string"
            },
            "schemaColumn": {
              "description": "A schema_column block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "The description of the column.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the column.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of the column. Valid values are Byte, Byte[], Boolean, Date, DateTime,DateTimeOffset, Decimal, Double, Guid, Int16, Int32, Int64, Single, String, TimeSpan. Please note these values are case sensitive.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      }
    }
  }
}