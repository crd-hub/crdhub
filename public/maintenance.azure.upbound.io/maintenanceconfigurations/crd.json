{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "maintenanceconfigurations.maintenance.azure.upbound.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.13.0"
    }
  },
  "spec": {
    "group": "maintenance.azure.upbound.io",
    "names": {
      "plural": "maintenanceconfigurations",
      "singular": "maintenanceconfiguration",
      "kind": "MaintenanceConfiguration",
      "listKind": "MaintenanceConfigurationList",
      "categories": [
        "crossplane",
        "managed",
        "azure"
      ]
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "MaintenanceConfiguration is the Schema for the MaintenanceConfigurations API. Manages a Maintenance Configuration.",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "MaintenanceConfigurationSpec defines the desired state of MaintenanceConfiguration",
                "type": "object",
                "required": [
                  "forProvider"
                ],
                "properties": {
                  "deletionPolicy": {
                    "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
                    "type": "string",
                    "default": "Delete",
                    "enum": [
                      "Orphan",
                      "Delete"
                    ]
                  },
                  "forProvider": {
                    "type": "object",
                    "properties": {
                      "inGuestUserPatchMode": {
                        "description": "The in guest user patch mode. Possible values are Platform or User. Must be specified when scope is InGuestPatch.",
                        "type": "string"
                      },
                      "installPatches": {
                        "description": "An install_patches block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "linux": {
                              "description": "A linux block as defined above. This property only applies when scope is set to InGuestPatch",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "classificationsToInclude": {
                                    "description": "List of Classification category of patches to be patched. Possible values are Critical, Security, UpdateRollup, FeaturePack, ServicePack, Definition, Tools and Updates.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "packageNamesMaskToExclude": {
                                    "description": "List of package names to be excluded from patching.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "packageNamesMaskToInclude": {
                                    "description": "List of package names to be included for patching.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "reboot": {
                              "description": "Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed. Possible values are Always, IfRequired and Never. This property only applies when scope is set to InGuestPatch.",
                              "type": "string"
                            },
                            "windows": {
                              "description": "A windows block as defined above. This property only applies when scope is set to InGuestPatch",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "classificationsToInclude": {
                                    "description": "List of Classification category of patches to be patched. Possible values are Critical, Security, UpdateRollup, FeaturePack, ServicePack, Definition, Tools and Updates.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "kbNumbersToExclude": {
                                    "description": "List of KB numbers to be excluded from patching.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "kbNumbersToInclude": {
                                    "description": "List of KB numbers to be included for patching.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "location": {
                        "description": "Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "properties": {
                        "description": "A mapping of properties to assign to the resource.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "resourceGroupName": {
                        "description": "The name of the Resource Group where the Maintenance Configuration should exist. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "resourceGroupNameRef": {
                        "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "resourceGroupNameSelector": {
                        "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
                        "type": "object",
                        "properties": {
                          "matchControllerRef": {
                            "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                            "type": "boolean"
                          },
                          "matchLabels": {
                            "description": "MatchLabels ensures an object with matching labels is selected.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "policy": {
                            "description": "Policies for selection.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "scope": {
                        "description": "The scope of the Maintenance Configuration. Possible values are Extension, Host, InGuestPatch, OSImage, SQLDB or SQLManagedInstance.",
                        "type": "string"
                      },
                      "tags": {
                        "description": "A mapping of tags to assign to the resource. The key could not contain upper case letter.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "visibility": {
                        "description": "The visibility of the Maintenance Configuration. The only allowable value is Custom.",
                        "type": "string"
                      },
                      "window": {
                        "description": "A window block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "duration": {
                              "description": "The duration of the maintenance window in HH:mm format.",
                              "type": "string"
                            },
                            "expirationDateTime": {
                              "description": "Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format.",
                              "type": "string"
                            },
                            "recurEvery": {
                              "description": "The rate at which a maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules.",
                              "type": "string"
                            },
                            "startDateTime": {
                              "description": "Effective start date of the maintenance window in YYYY-MM-DD hh:mm format.",
                              "type": "string"
                            },
                            "timeZone": {
                              "description": "The time zone for the maintenance window. A list of timezones can be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "initProvider": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
                    "type": "object",
                    "properties": {
                      "inGuestUserPatchMode": {
                        "description": "The in guest user patch mode. Possible values are Platform or User. Must be specified when scope is InGuestPatch.",
                        "type": "string"
                      },
                      "installPatches": {
                        "description": "An install_patches block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "linux": {
                              "description": "A linux block as defined above. This property only applies when scope is set to InGuestPatch",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "classificationsToInclude": {
                                    "description": "List of Classification category of patches to be patched. Possible values are Critical, Security, UpdateRollup, FeaturePack, ServicePack, Definition, Tools and Updates.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "packageNamesMaskToExclude": {
                                    "description": "List of package names to be excluded from patching.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "packageNamesMaskToInclude": {
                                    "description": "List of package names to be included for patching.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "reboot": {
                              "description": "Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed. Possible values are Always, IfRequired and Never. This property only applies when scope is set to InGuestPatch.",
                              "type": "string"
                            },
                            "windows": {
                              "description": "A windows block as defined above. This property only applies when scope is set to InGuestPatch",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "classificationsToInclude": {
                                    "description": "List of Classification category of patches to be patched. Possible values are Critical, Security, UpdateRollup, FeaturePack, ServicePack, Definition, Tools and Updates.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "kbNumbersToExclude": {
                                    "description": "List of KB numbers to be excluded from patching.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "kbNumbersToInclude": {
                                    "description": "List of KB numbers to be included for patching.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "location": {
                        "description": "Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "properties": {
                        "description": "A mapping of properties to assign to the resource.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "scope": {
                        "description": "The scope of the Maintenance Configuration. Possible values are Extension, Host, InGuestPatch, OSImage, SQLDB or SQLManagedInstance.",
                        "type": "string"
                      },
                      "tags": {
                        "description": "A mapping of tags to assign to the resource. The key could not contain upper case letter.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "visibility": {
                        "description": "The visibility of the Maintenance Configuration. The only allowable value is Custom.",
                        "type": "string"
                      },
                      "window": {
                        "description": "A window block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "duration": {
                              "description": "The duration of the maintenance window in HH:mm format.",
                              "type": "string"
                            },
                            "expirationDateTime": {
                              "description": "Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format.",
                              "type": "string"
                            },
                            "recurEvery": {
                              "description": "The rate at which a maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules.",
                              "type": "string"
                            },
                            "startDateTime": {
                              "description": "Effective start date of the maintenance window in YYYY-MM-DD hh:mm format.",
                              "type": "string"
                            },
                            "timeZone": {
                              "description": "The time zone for the maintenance window. A list of timezones can be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "managementPolicies": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
                    "type": "array",
                    "default": [
                      "*"
                    ],
                    "items": {
                      "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
                      "type": "string",
                      "enum": [
                        "Observe",
                        "Create",
                        "Update",
                        "Delete",
                        "LateInitialize",
                        "*"
                      ]
                    }
                  },
                  "providerConfigRef": {
                    "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
                    "type": "object",
                    "default": {
                      "name": "default"
                    },
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "publishConnectionDetailsTo": {
                    "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "configRef": {
                        "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
                        "type": "object",
                        "default": {
                          "name": "default"
                        },
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "Metadata is the metadata for connection secret.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "type": {
                            "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name of the connection secret.",
                        "type": "string"
                      }
                    }
                  },
                  "writeConnectionSecretToRef": {
                    "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
                    "type": "object",
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  }
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.location))",
                    "message": "spec.forProvider.location is a required parameter"
                  },
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scope) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.scope))",
                    "message": "spec.forProvider.scope is a required parameter"
                  }
                ]
              },
              "status": {
                "description": "MaintenanceConfigurationStatus defines the observed state of MaintenanceConfiguration.",
                "type": "object",
                "properties": {
                  "atProvider": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "The ID of the Maintenance Configuration.",
                        "type": "string"
                      },
                      "inGuestUserPatchMode": {
                        "description": "The in guest user patch mode. Possible values are Platform or User. Must be specified when scope is InGuestPatch.",
                        "type": "string"
                      },
                      "installPatches": {
                        "description": "An install_patches block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "linux": {
                              "description": "A linux block as defined above. This property only applies when scope is set to InGuestPatch",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "classificationsToInclude": {
                                    "description": "List of Classification category of patches to be patched. Possible values are Critical, Security, UpdateRollup, FeaturePack, ServicePack, Definition, Tools and Updates.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "packageNamesMaskToExclude": {
                                    "description": "List of package names to be excluded from patching.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "packageNamesMaskToInclude": {
                                    "description": "List of package names to be included for patching.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "reboot": {
                              "description": "Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed. Possible values are Always, IfRequired and Never. This property only applies when scope is set to InGuestPatch.",
                              "type": "string"
                            },
                            "windows": {
                              "description": "A windows block as defined above. This property only applies when scope is set to InGuestPatch",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "classificationsToInclude": {
                                    "description": "List of Classification category of patches to be patched. Possible values are Critical, Security, UpdateRollup, FeaturePack, ServicePack, Definition, Tools and Updates.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "kbNumbersToExclude": {
                                    "description": "List of KB numbers to be excluded from patching.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "kbNumbersToInclude": {
                                    "description": "List of KB numbers to be included for patching.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "location": {
                        "description": "Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "properties": {
                        "description": "A mapping of properties to assign to the resource.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "resourceGroupName": {
                        "description": "The name of the Resource Group where the Maintenance Configuration should exist. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "scope": {
                        "description": "The scope of the Maintenance Configuration. Possible values are Extension, Host, InGuestPatch, OSImage, SQLDB or SQLManagedInstance.",
                        "type": "string"
                      },
                      "tags": {
                        "description": "A mapping of tags to assign to the resource. The key could not contain upper case letter.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "visibility": {
                        "description": "The visibility of the Maintenance Configuration. The only allowable value is Custom.",
                        "type": "string"
                      },
                      "window": {
                        "description": "A window block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "duration": {
                              "description": "The duration of the maintenance window in HH:mm format.",
                              "type": "string"
                            },
                            "expirationDateTime": {
                              "description": "Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format.",
                              "type": "string"
                            },
                            "recurEvery": {
                              "description": "The rate at which a maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules.",
                              "type": "string"
                            },
                            "startDateTime": {
                              "description": "Effective start date of the maintenance window in YYYY-MM-DD hh:mm format.",
                              "type": "string"
                            },
                            "timeZone": {
                              "description": "The time zone for the maintenance window. A list of timezones can be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "conditions": {
                    "description": "Conditions of the resource.",
                    "type": "array",
                    "items": {
                      "description": "A Condition that may apply to a resource.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "A Reason for this condition's last transition from one status to another.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of this condition; is it currently True, False, or Unknown?",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "READY",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
          },
          {
            "name": "SYNCED",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Synced')].status"
          },
          {
            "name": "EXTERNAL-NAME",
            "type": "string",
            "jsonPath": ".metadata.annotations.crossplane\\.io/external-name"
          },
          {
            "name": "AGE",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}