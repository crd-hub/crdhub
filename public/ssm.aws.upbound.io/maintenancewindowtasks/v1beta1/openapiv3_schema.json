{
  "$schema": "http://json-schema.org/schema#",
  "description": "MaintenanceWindowTask is the Schema for the MaintenanceWindowTasks API. Provides an SSM Maintenance Window Task resource",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "ssm.aws.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "MaintenanceWindowTask"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "MaintenanceWindowTaskSpec defines the desired state of MaintenanceWindowTask",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "cutoffBehavior": {
              "description": "Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. Valid values are CONTINUE_TASK and CANCEL_TASK.",
              "type": "string"
            },
            "description": {
              "description": "The description of the maintenance window task.",
              "type": "string"
            },
            "maxConcurrency": {
              "description": "The maximum number of targets this task can be run for in parallel.",
              "type": "string"
            },
            "maxErrors": {
              "description": "The maximum number of errors allowed before this task stops being scheduled.",
              "type": "string"
            },
            "name": {
              "description": "The name of the maintenance window task.",
              "type": "string"
            },
            "priority": {
              "description": "The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.",
              "type": "number"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "serviceRoleArn": {
              "description": "The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.",
              "type": "string"
            },
            "serviceRoleArnRef": {
              "description": "Reference to a Role in iam to populate serviceRoleArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "serviceRoleArnSelector": {
              "description": "Selector for a Role in iam to populate serviceRoleArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "targets": {
              "description": "The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "values": {
                    "description": "The array of strings.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "taskArn": {
              "description": "The ARN of the task to execute.",
              "type": "string"
            },
            "taskArnRef": {
              "description": "Reference to a Function in lambda to populate taskArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "taskArnSelector": {
              "description": "Selector for a Function in lambda to populate taskArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "taskInvocationParameters": {
              "description": "Configuration block with parameters for task execution.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "automationParameters": {
                    "description": "The parameters for an AUTOMATION task type. Documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "documentVersion": {
                          "description": "The version of an Automation document to use during task execution.",
                          "type": "string"
                        },
                        "parameter": {
                          "description": "The parameters for the RUN_COMMAND task execution. Documented below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "The name of the maintenance window task.",
                                "type": "string"
                              },
                              "values": {
                                "description": "The array of strings.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "lambdaParameters": {
                    "description": "The parameters for a LAMBDA task type. Documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "clientContext": {
                          "description": "Pass client-specific information to the Lambda function that you are invoking.",
                          "type": "string"
                        },
                        "payloadSecretRef": {
                          "description": "JSON to provide to your Lambda function as input.",
                          "type": "object",
                          "required": [
                            "key",
                            "name",
                            "namespace"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the secret.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace of the secret.",
                              "type": "string"
                            }
                          }
                        },
                        "qualifier": {
                          "description": "Specify a Lambda function version or alias name.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "runCommandParameters": {
                    "description": "The parameters for a RUN_COMMAND task type. Documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "cloudwatchConfig": {
                          "description": "Configuration options for sending command output to CloudWatch Logs. Documented below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "cloudwatchLogGroupName": {
                                "description": "The name of the CloudWatch log group where you want to send command output. If you don't specify a group name, Systems Manager automatically creates a log group for you. The log group uses the following naming format: aws/ssm/SystemsManagerDocumentName.",
                                "type": "string"
                              },
                              "cloudwatchOutputEnabled": {
                                "description": "Enables Systems Manager to send command output to CloudWatch Logs.",
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "comment": {
                          "description": "Information about the command(s) to execute.",
                          "type": "string"
                        },
                        "documentHash": {
                          "description": "The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.",
                          "type": "string"
                        },
                        "documentHashType": {
                          "description": "SHA-256 or SHA-1. SHA-1 hashes have been deprecated. Valid values: Sha256 and Sha1",
                          "type": "string"
                        },
                        "documentVersion": {
                          "description": "The version of an Automation document to use during task execution.",
                          "type": "string"
                        },
                        "notificationConfig": {
                          "description": "Configurations for sending notifications about command status changes on a per-instance basis. Documented below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "notificationArn": {
                                "description": "An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.",
                                "type": "string"
                              },
                              "notificationArnRef": {
                                "description": "Reference to a Topic in sns to populate notificationArn.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name of the referenced object.",
                                    "type": "string"
                                  },
                                  "policy": {
                                    "description": "Policies for referencing.",
                                    "type": "object",
                                    "properties": {
                                      "resolution": {
                                        "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                        "type": "string",
                                        "default": "Required",
                                        "enum": [
                                          "Required",
                                          "Optional"
                                        ]
                                      },
                                      "resolve": {
                                        "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                        "type": "string",
                                        "enum": [
                                          "Always",
                                          "IfNotPresent"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "notificationArnSelector": {
                                "description": "Selector for a Topic in sns to populate notificationArn.",
                                "type": "object",
                                "properties": {
                                  "matchControllerRef": {
                                    "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                    "type": "boolean"
                                  },
                                  "matchLabels": {
                                    "description": "MatchLabels ensures an object with matching labels is selected.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "policy": {
                                    "description": "Policies for selection.",
                                    "type": "object",
                                    "properties": {
                                      "resolution": {
                                        "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                        "type": "string",
                                        "default": "Required",
                                        "enum": [
                                          "Required",
                                          "Optional"
                                        ]
                                      },
                                      "resolve": {
                                        "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                        "type": "string",
                                        "enum": [
                                          "Always",
                                          "IfNotPresent"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "notificationEvents": {
                                "description": "The different events for which you can receive notifications. Valid values: All, InProgress, Success, TimedOut, Cancelled, and Failed",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "notificationType": {
                                "description": "When specified with Command, receive notification when the status of a command changes. When specified with Invocation, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: Command and Invocation",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "outputS3Bucket": {
                          "description": "The name of the Amazon S3 bucket.",
                          "type": "string"
                        },
                        "outputS3BucketRef": {
                          "description": "Reference to a Bucket in s3 to populate outputS3Bucket.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name of the referenced object.",
                              "type": "string"
                            },
                            "policy": {
                              "description": "Policies for referencing.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "outputS3BucketSelector": {
                          "description": "Selector for a Bucket in s3 to populate outputS3Bucket.",
                          "type": "object",
                          "properties": {
                            "matchControllerRef": {
                              "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                              "type": "boolean"
                            },
                            "matchLabels": {
                              "description": "MatchLabels ensures an object with matching labels is selected.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "policy": {
                              "description": "Policies for selection.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "outputS3KeyPrefix": {
                          "description": "The Amazon S3 bucket subfolder.",
                          "type": "string"
                        },
                        "parameter": {
                          "description": "The parameters for the RUN_COMMAND task execution. Documented below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "The name of the maintenance window task.",
                                "type": "string"
                              },
                              "values": {
                                "description": "The array of strings.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "serviceRoleArn": {
                          "description": "The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.",
                          "type": "string"
                        },
                        "serviceRoleArnRef": {
                          "description": "Reference to a Role in iam to populate serviceRoleArn.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name of the referenced object.",
                              "type": "string"
                            },
                            "policy": {
                              "description": "Policies for referencing.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "serviceRoleArnSelector": {
                          "description": "Selector for a Role in iam to populate serviceRoleArn.",
                          "type": "object",
                          "properties": {
                            "matchControllerRef": {
                              "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                              "type": "boolean"
                            },
                            "matchLabels": {
                              "description": "MatchLabels ensures an object with matching labels is selected.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "policy": {
                              "description": "Policies for selection.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "timeoutSeconds": {
                          "description": "If this time is reached and the command has not already started executing, it doesn't run.",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "stepFunctionsParameters": {
                    "description": "The parameters for a STEP_FUNCTIONS task type. Documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "inputSecretRef": {
                          "description": "The inputs for the STEP_FUNCTION task.",
                          "type": "object",
                          "required": [
                            "key",
                            "name",
                            "namespace"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the secret.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace of the secret.",
                              "type": "string"
                            }
                          }
                        },
                        "name": {
                          "description": "The name of the maintenance window task.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "taskType": {
              "description": "The type of task being registered. Valid values: AUTOMATION, LAMBDA, RUN_COMMAND or STEP_FUNCTIONS.",
              "type": "string"
            },
            "windowId": {
              "description": "The Id of the maintenance window to register the task with.",
              "type": "string"
            },
            "windowIdRef": {
              "description": "Reference to a MaintenanceWindow in ssm to populate windowId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "windowIdSelector": {
              "description": "Selector for a MaintenanceWindow in ssm to populate windowId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "cutoffBehavior": {
              "description": "Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. Valid values are CONTINUE_TASK and CANCEL_TASK.",
              "type": "string"
            },
            "description": {
              "description": "The description of the maintenance window task.",
              "type": "string"
            },
            "maxConcurrency": {
              "description": "The maximum number of targets this task can be run for in parallel.",
              "type": "string"
            },
            "maxErrors": {
              "description": "The maximum number of errors allowed before this task stops being scheduled.",
              "type": "string"
            },
            "name": {
              "description": "The name of the maintenance window task.",
              "type": "string"
            },
            "priority": {
              "description": "The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.",
              "type": "number"
            },
            "targets": {
              "description": "The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "values": {
                    "description": "The array of strings.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "taskInvocationParameters": {
              "description": "Configuration block with parameters for task execution.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "automationParameters": {
                    "description": "The parameters for an AUTOMATION task type. Documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "documentVersion": {
                          "description": "The version of an Automation document to use during task execution.",
                          "type": "string"
                        },
                        "parameter": {
                          "description": "The parameters for the RUN_COMMAND task execution. Documented below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "The name of the maintenance window task.",
                                "type": "string"
                              },
                              "values": {
                                "description": "The array of strings.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "lambdaParameters": {
                    "description": "The parameters for a LAMBDA task type. Documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "clientContext": {
                          "description": "Pass client-specific information to the Lambda function that you are invoking.",
                          "type": "string"
                        },
                        "qualifier": {
                          "description": "Specify a Lambda function version or alias name.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "runCommandParameters": {
                    "description": "The parameters for a RUN_COMMAND task type. Documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "cloudwatchConfig": {
                          "description": "Configuration options for sending command output to CloudWatch Logs. Documented below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "cloudwatchLogGroupName": {
                                "description": "The name of the CloudWatch log group where you want to send command output. If you don't specify a group name, Systems Manager automatically creates a log group for you. The log group uses the following naming format: aws/ssm/SystemsManagerDocumentName.",
                                "type": "string"
                              },
                              "cloudwatchOutputEnabled": {
                                "description": "Enables Systems Manager to send command output to CloudWatch Logs.",
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "comment": {
                          "description": "Information about the command(s) to execute.",
                          "type": "string"
                        },
                        "documentHash": {
                          "description": "The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.",
                          "type": "string"
                        },
                        "documentHashType": {
                          "description": "SHA-256 or SHA-1. SHA-1 hashes have been deprecated. Valid values: Sha256 and Sha1",
                          "type": "string"
                        },
                        "documentVersion": {
                          "description": "The version of an Automation document to use during task execution.",
                          "type": "string"
                        },
                        "notificationConfig": {
                          "description": "Configurations for sending notifications about command status changes on a per-instance basis. Documented below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "notificationEvents": {
                                "description": "The different events for which you can receive notifications. Valid values: All, InProgress, Success, TimedOut, Cancelled, and Failed",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "notificationType": {
                                "description": "When specified with Command, receive notification when the status of a command changes. When specified with Invocation, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: Command and Invocation",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "outputS3KeyPrefix": {
                          "description": "The Amazon S3 bucket subfolder.",
                          "type": "string"
                        },
                        "parameter": {
                          "description": "The parameters for the RUN_COMMAND task execution. Documented below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "The name of the maintenance window task.",
                                "type": "string"
                              },
                              "values": {
                                "description": "The array of strings.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "timeoutSeconds": {
                          "description": "If this time is reached and the command has not already started executing, it doesn't run.",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "stepFunctionsParameters": {
                    "description": "The parameters for a STEP_FUNCTIONS task type. Documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "The name of the maintenance window task.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "taskType": {
              "description": "The type of task being registered. Valid values: AUTOMATION, LAMBDA, RUN_COMMAND or STEP_FUNCTIONS.",
              "type": "string"
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.taskType) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.taskType))",
          "message": "spec.forProvider.taskType is a required parameter"
        }
      ]
    }
  }
}