{
  "$schema": "http://json-schema.org/schema#",
  "description": "EventSubscription is the Schema for the EventSubscriptions API. Manages an EventGrid Event Subscription",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "eventgrid.azure.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "EventSubscription"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "EventSubscriptionSpec defines the desired state of EventSubscription",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "advancedFilter": {
              "description": "A advanced_filter block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "boolEquals": {
                    "description": "Compares a value of an event using a single boolean value.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Specifies a single value to compare to when using a single value operator.",
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "isNotNull": {
                    "description": "Evaluates if a value of an event isn't NULL or undefined.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "isNullOrUndefined": {
                    "description": "Evaluates if a value of an event is NULL or undefined.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "numberGreaterThan": {
                    "description": "Compares a value of an event using a single floating point number.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Specifies a single value to compare to when using a single value operator.",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "numberGreaterThanOrEquals": {
                    "description": "Compares a value of an event using a single floating point number.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Specifies a single value to compare to when using a single value operator.",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "numberIn": {
                    "description": "Compares a value of an event using multiple floating point numbers.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "numberInRange": {
                    "description": "Compares a value of an event using multiple floating point number ranges.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  },
                  "numberLessThan": {
                    "description": "Compares a value of an event using a single floating point number.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Specifies a single value to compare to when using a single value operator.",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "numberLessThanOrEquals": {
                    "description": "Compares a value of an event using a single floating point number.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Specifies a single value to compare to when using a single value operator.",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "numberNotIn": {
                    "description": "Compares a value of an event using multiple floating point numbers.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "numberNotInRange": {
                    "description": "Compares a value of an event using multiple floating point number ranges.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  },
                  "stringBeginsWith": {
                    "description": "Compares a value of an event using multiple string values.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "stringContains": {
                    "description": "Compares a value of an event using multiple string values.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "stringEndsWith": {
                    "description": "Compares a value of an event using multiple string values.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "stringIn": {
                    "description": "Compares a value of an event using multiple string values.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "stringNotBeginsWith": {
                    "description": "Compares a value of an event using multiple string values.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "stringNotContains": {
                    "description": "Compares a value of an event using multiple string values.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "stringNotEndsWith": {
                    "description": "Compares a value of an event using multiple string values.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "stringNotIn": {
                    "description": "Compares a value of an event using multiple string values.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "advancedFilteringOnArraysEnabled": {
              "description": "Specifies whether advanced filters should be evaluated against an array of values instead of expecting a singular value. Defaults to false.",
              "type": "boolean"
            },
            "azureFunctionEndpoint": {
              "description": "An azure_function_endpoint block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "functionId": {
                    "description": "Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.",
                    "type": "string"
                  },
                  "maxEventsPerBatch": {
                    "description": "Maximum number of events per batch.",
                    "type": "number"
                  },
                  "preferredBatchSizeInKilobytes": {
                    "description": "Preferred batch size in Kilobytes.",
                    "type": "number"
                  }
                }
              }
            },
            "deadLetterIdentity": {
              "description": "A dead_letter_identity block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "Specifies the type of Managed Service Identity that is used for dead lettering. Allowed value is SystemAssigned, UserAssigned.",
                    "type": "string"
                  },
                  "userAssignedIdentity": {
                    "description": "The user identity associated with the resource.",
                    "type": "string"
                  }
                }
              }
            },
            "deliveryIdentity": {
              "description": "A delivery_identity block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "Specifies the type of Managed Service Identity that is used for event delivery. Allowed value is SystemAssigned, UserAssigned.",
                    "type": "string"
                  },
                  "userAssignedIdentity": {
                    "description": "The user identity associated with the resource.",
                    "type": "string"
                  }
                }
              }
            },
            "deliveryProperty": {
              "description": "One or more delivery_property blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "headerName": {
                    "description": "The name of the header to send on to the destination",
                    "type": "string"
                  },
                  "secret": {
                    "description": "True if the value is a secret and should be protected, otherwise false. If True, then this value won't be returned from Azure API calls",
                    "type": "boolean"
                  },
                  "sourceField": {
                    "description": "If the type is Dynamic, then provide the payload field to be used as the value. Valid source fields differ by subscription type.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Either Static or Dynamic",
                    "type": "string"
                  },
                  "valueSecretRef": {
                    "description": "If the type is Static, then provide the value to use",
                    "type": "object",
                    "required": [
                      "key",
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "eventDeliverySchema": {
              "description": "Specifies the event delivery schema for the event subscription. Possible values include: EventGridSchema, CloudEventSchemaV1_0, CustomInputSchema. Defaults to EventGridSchema. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "eventhubEndpointId": {
              "description": "Specifies the id where the Event Hub is located.",
              "type": "string"
            },
            "expirationTimeUtc": {
              "description": "Specifies the expiration time of the event subscription (Datetime Format RFC 3339).",
              "type": "string"
            },
            "hybridConnectionEndpointId": {
              "description": "Specifies the id where the Hybrid Connection is located.",
              "type": "string"
            },
            "includedEventTypes": {
              "description": "A list of applicable event types that need to be part of the event subscription.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "labels": {
              "description": "A list of labels to assign to the event subscription.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "name": {
              "description": "Specifies the name of the EventGrid Event Subscription resource. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "retryPolicy": {
              "description": "A retry_policy block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "eventTimeToLive": {
                    "description": "Specifies the time to live (in minutes) for events. Supported range is 1 to 1440. See official documentation for more details.",
                    "type": "number"
                  },
                  "maxDeliveryAttempts": {
                    "description": "Specifies the maximum number of delivery retry attempts for events.",
                    "type": "number"
                  }
                }
              }
            },
            "scope": {
              "description": "Specifies the scope at which the EventGrid Event Subscription should be created. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "scopeRef": {
              "description": "Reference to a ResourceGroup in azure to populate scope.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "scopeSelector": {
              "description": "Selector for a ResourceGroup in azure to populate scope.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "serviceBusQueueEndpointId": {
              "description": "Specifies the id where the Service Bus Queue is located.",
              "type": "string"
            },
            "serviceBusTopicEndpointId": {
              "description": "Specifies the id where the Service Bus Topic is located.",
              "type": "string"
            },
            "storageBlobDeadLetterDestination": {
              "description": "A storage_blob_dead_letter_destination block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "storageAccountId": {
                    "description": "Specifies the id of the storage account id where the storage blob is located.",
                    "type": "string"
                  },
                  "storageBlobContainerName": {
                    "description": "Specifies the name of the Storage blob container that is the destination of the deadletter events.",
                    "type": "string"
                  }
                }
              }
            },
            "storageQueueEndpoint": {
              "description": "A storage_queue_endpoint block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "queueMessageTimeToLiveInSeconds": {
                    "description": "Storage queue message time to live in seconds.",
                    "type": "number"
                  },
                  "queueName": {
                    "description": "Specifies the name of the storage queue where the Event Subscription will receive events.",
                    "type": "string"
                  },
                  "queueNameRef": {
                    "description": "Reference to a Queue in storage to populate queueName.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "queueNameSelector": {
                    "description": "Selector for a Queue in storage to populate queueName.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "storageAccountId": {
                    "description": "Specifies the id of the storage account id where the storage queue is located.",
                    "type": "string"
                  },
                  "storageAccountIdRef": {
                    "description": "Reference to a Account in storage to populate storageAccountId.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "storageAccountIdSelector": {
                    "description": "Selector for a Account in storage to populate storageAccountId.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "subjectFilter": {
              "description": "A subject_filter block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "caseSensitive": {
                    "description": "Specifies if subject_begins_with and subject_ends_with case sensitive. This value",
                    "type": "boolean"
                  },
                  "subjectBeginsWith": {
                    "description": "A string to filter events for an event subscription based on a resource path prefix.",
                    "type": "string"
                  },
                  "subjectEndsWith": {
                    "description": "A string to filter events for an event subscription based on a resource path suffix.",
                    "type": "string"
                  }
                }
              }
            },
            "webhookEndpoint": {
              "description": "A webhook_endpoint block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "activeDirectoryAppIdOrUri": {
                    "description": "The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.",
                    "type": "string"
                  },
                  "activeDirectoryTenantId": {
                    "description": "The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.",
                    "type": "string"
                  },
                  "maxEventsPerBatch": {
                    "description": "Maximum number of events per batch.",
                    "type": "number"
                  },
                  "preferredBatchSizeInKilobytes": {
                    "description": "Preferred batch size in Kilobytes.",
                    "type": "number"
                  },
                  "url": {
                    "description": "Specifies the url of the webhook where the Event Subscription will receive events.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "advancedFilter": {
              "description": "A advanced_filter block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "boolEquals": {
                    "description": "Compares a value of an event using a single boolean value.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Specifies a single value to compare to when using a single value operator.",
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "isNotNull": {
                    "description": "Evaluates if a value of an event isn't NULL or undefined.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "isNullOrUndefined": {
                    "description": "Evaluates if a value of an event is NULL or undefined.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "numberGreaterThan": {
                    "description": "Compares a value of an event using a single floating point number.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Specifies a single value to compare to when using a single value operator.",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "numberGreaterThanOrEquals": {
                    "description": "Compares a value of an event using a single floating point number.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Specifies a single value to compare to when using a single value operator.",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "numberIn": {
                    "description": "Compares a value of an event using multiple floating point numbers.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "numberInRange": {
                    "description": "Compares a value of an event using multiple floating point number ranges.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  },
                  "numberLessThan": {
                    "description": "Compares a value of an event using a single floating point number.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Specifies a single value to compare to when using a single value operator.",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "numberLessThanOrEquals": {
                    "description": "Compares a value of an event using a single floating point number.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Specifies a single value to compare to when using a single value operator.",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "numberNotIn": {
                    "description": "Compares a value of an event using multiple floating point numbers.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "numberNotInRange": {
                    "description": "Compares a value of an event using multiple floating point number ranges.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  },
                  "stringBeginsWith": {
                    "description": "Compares a value of an event using multiple string values.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "stringContains": {
                    "description": "Compares a value of an event using multiple string values.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "stringEndsWith": {
                    "description": "Compares a value of an event using multiple string values.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "stringIn": {
                    "description": "Compares a value of an event using multiple string values.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "stringNotBeginsWith": {
                    "description": "Compares a value of an event using multiple string values.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "stringNotContains": {
                    "description": "Compares a value of an event using multiple string values.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "stringNotEndsWith": {
                    "description": "Compares a value of an event using multiple string values.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "stringNotIn": {
                    "description": "Compares a value of an event using multiple string values.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Specifies an array of values to compare to when using a multiple values operator.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "advancedFilteringOnArraysEnabled": {
              "description": "Specifies whether advanced filters should be evaluated against an array of values instead of expecting a singular value. Defaults to false.",
              "type": "boolean"
            },
            "azureFunctionEndpoint": {
              "description": "An azure_function_endpoint block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "functionId": {
                    "description": "Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.",
                    "type": "string"
                  },
                  "maxEventsPerBatch": {
                    "description": "Maximum number of events per batch.",
                    "type": "number"
                  },
                  "preferredBatchSizeInKilobytes": {
                    "description": "Preferred batch size in Kilobytes.",
                    "type": "number"
                  }
                }
              }
            },
            "deadLetterIdentity": {
              "description": "A dead_letter_identity block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "Specifies the type of Managed Service Identity that is used for dead lettering. Allowed value is SystemAssigned, UserAssigned.",
                    "type": "string"
                  },
                  "userAssignedIdentity": {
                    "description": "The user identity associated with the resource.",
                    "type": "string"
                  }
                }
              }
            },
            "deliveryIdentity": {
              "description": "A delivery_identity block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "Specifies the type of Managed Service Identity that is used for event delivery. Allowed value is SystemAssigned, UserAssigned.",
                    "type": "string"
                  },
                  "userAssignedIdentity": {
                    "description": "The user identity associated with the resource.",
                    "type": "string"
                  }
                }
              }
            },
            "deliveryProperty": {
              "description": "One or more delivery_property blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "headerName": {
                    "description": "The name of the header to send on to the destination",
                    "type": "string"
                  },
                  "secret": {
                    "description": "True if the value is a secret and should be protected, otherwise false. If True, then this value won't be returned from Azure API calls",
                    "type": "boolean"
                  },
                  "sourceField": {
                    "description": "If the type is Dynamic, then provide the payload field to be used as the value. Valid source fields differ by subscription type.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Either Static or Dynamic",
                    "type": "string"
                  }
                }
              }
            },
            "eventDeliverySchema": {
              "description": "Specifies the event delivery schema for the event subscription. Possible values include: EventGridSchema, CloudEventSchemaV1_0, CustomInputSchema. Defaults to EventGridSchema. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "eventhubEndpointId": {
              "description": "Specifies the id where the Event Hub is located.",
              "type": "string"
            },
            "expirationTimeUtc": {
              "description": "Specifies the expiration time of the event subscription (Datetime Format RFC 3339).",
              "type": "string"
            },
            "hybridConnectionEndpointId": {
              "description": "Specifies the id where the Hybrid Connection is located.",
              "type": "string"
            },
            "includedEventTypes": {
              "description": "A list of applicable event types that need to be part of the event subscription.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "labels": {
              "description": "A list of labels to assign to the event subscription.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "name": {
              "description": "Specifies the name of the EventGrid Event Subscription resource. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "retryPolicy": {
              "description": "A retry_policy block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "eventTimeToLive": {
                    "description": "Specifies the time to live (in minutes) for events. Supported range is 1 to 1440. See official documentation for more details.",
                    "type": "number"
                  },
                  "maxDeliveryAttempts": {
                    "description": "Specifies the maximum number of delivery retry attempts for events.",
                    "type": "number"
                  }
                }
              }
            },
            "serviceBusQueueEndpointId": {
              "description": "Specifies the id where the Service Bus Queue is located.",
              "type": "string"
            },
            "serviceBusTopicEndpointId": {
              "description": "Specifies the id where the Service Bus Topic is located.",
              "type": "string"
            },
            "storageBlobDeadLetterDestination": {
              "description": "A storage_blob_dead_letter_destination block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "storageAccountId": {
                    "description": "Specifies the id of the storage account id where the storage blob is located.",
                    "type": "string"
                  },
                  "storageBlobContainerName": {
                    "description": "Specifies the name of the Storage blob container that is the destination of the deadletter events.",
                    "type": "string"
                  }
                }
              }
            },
            "storageQueueEndpoint": {
              "description": "A storage_queue_endpoint block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "queueMessageTimeToLiveInSeconds": {
                    "description": "Storage queue message time to live in seconds.",
                    "type": "number"
                  }
                }
              }
            },
            "subjectFilter": {
              "description": "A subject_filter block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "caseSensitive": {
                    "description": "Specifies if subject_begins_with and subject_ends_with case sensitive. This value",
                    "type": "boolean"
                  },
                  "subjectBeginsWith": {
                    "description": "A string to filter events for an event subscription based on a resource path prefix.",
                    "type": "string"
                  },
                  "subjectEndsWith": {
                    "description": "A string to filter events for an event subscription based on a resource path suffix.",
                    "type": "string"
                  }
                }
              }
            },
            "webhookEndpoint": {
              "description": "A webhook_endpoint block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "activeDirectoryAppIdOrUri": {
                    "description": "The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.",
                    "type": "string"
                  },
                  "activeDirectoryTenantId": {
                    "description": "The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.",
                    "type": "string"
                  },
                  "maxEventsPerBatch": {
                    "description": "Maximum number of events per batch.",
                    "type": "number"
                  },
                  "preferredBatchSizeInKilobytes": {
                    "description": "Preferred batch size in Kilobytes.",
                    "type": "number"
                  },
                  "url": {
                    "description": "Specifies the url of the webhook where the Event Subscription will receive events.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
          "message": "spec.forProvider.name is a required parameter"
        }
      ]
    }
  }
}