{
  "$schema": "http://json-schema.org/schema#",
  "description": "ContainerRecipe is the Schema for the ContainerRecipes API. Manage an Image Builder Container Recipe",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "imagebuilder.aws.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "ContainerRecipe"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "ContainerRecipeSpec defines the desired state of ContainerRecipe",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "component": {
              "description": "Ordered configuration block(s) with components for the container recipe. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "componentArn": {
                    "description": "Amazon Resource Name (ARN) of the Image Builder Component to associate.",
                    "type": "string"
                  },
                  "componentArnRef": {
                    "description": "Reference to a Component in imagebuilder to populate componentArn.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "componentArnSelector": {
                    "description": "Selector for a Component in imagebuilder to populate componentArn.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "parameter": {
                    "description": "Configuration block(s) for parameters to configure the component. Detailed below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "The name of the component parameter.",
                          "type": "string"
                        },
                        "value": {
                          "description": "The value for the named component parameter.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "containerType": {
              "description": "The type of the container to create. Valid values: DOCKER.",
              "type": "string"
            },
            "description": {
              "description": "The description of the container recipe.",
              "type": "string"
            },
            "dockerfileTemplateData": {
              "description": "The Dockerfile template used to build the image as an inline data blob.",
              "type": "string"
            },
            "dockerfileTemplateUri": {
              "description": "The Amazon S3 URI for the Dockerfile that will be used to build the container image.",
              "type": "string"
            },
            "instanceConfiguration": {
              "description": "Configuration block used to configure an instance for building and testing container images. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "blockDeviceMapping": {
                    "description": "Configuration block(s) with block device mappings for the container recipe. Detailed below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "deviceName": {
                          "description": "Name of the device. For example, /dev/sda or /dev/xvdb.",
                          "type": "string"
                        },
                        "ebs": {
                          "description": "Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "deleteOnTermination": {
                                "description": "Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.",
                                "type": "string"
                              },
                              "encrypted": {
                                "description": "Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.",
                                "type": "string"
                              },
                              "iops": {
                                "description": "Number of Input/Output (I/O) operations per second to provision for an io1 or io2 volume.",
                                "type": "number"
                              },
                              "kmsKeyId": {
                                "description": "Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.",
                                "type": "string"
                              },
                              "snapshotId": {
                                "description": "Identifier of the EC2 Volume Snapshot.",
                                "type": "string"
                              },
                              "throughput": {
                                "description": "For GP3 volumes only. The throughput in MiB/s that the volume supports.",
                                "type": "number"
                              },
                              "volumeSize": {
                                "description": "Size of the volume, in GiB.",
                                "type": "number"
                              },
                              "volumeType": {
                                "description": "Type of the volume. For example, gp2 or io2.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "noDevice": {
                          "description": "Set to true to remove a mapping from the parent image.",
                          "type": "boolean"
                        },
                        "virtualName": {
                          "description": "Virtual device name. For example, ephemeral0. Instance store volumes are numbered starting from 0.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "image": {
                    "description": "The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.",
                    "type": "string"
                  }
                }
              }
            },
            "kmsKeyId": {
              "description": "The KMS key used to encrypt the container image.",
              "type": "string"
            },
            "kmsKeyIdRef": {
              "description": "Reference to a Key in kms to populate kmsKeyId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "kmsKeyIdSelector": {
              "description": "Selector for a Key in kms to populate kmsKeyId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "name": {
              "description": "The name of the container recipe.",
              "type": "string"
            },
            "parentImage": {
              "description": "The base image for the container recipe.",
              "type": "string"
            },
            "platformOverride": {
              "description": "Specifies the operating system platform when you use a custom base image.",
              "type": "string"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "targetRepository": {
              "description": "The destination repository for the container image. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "repositoryName": {
                    "description": "The name of the container repository where the output container image is stored. This name is prefixed by the repository location.",
                    "type": "string"
                  },
                  "repositoryNameRef": {
                    "description": "Reference to a Repository in ecr to populate repositoryName.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "repositoryNameSelector": {
                    "description": "Selector for a Repository in ecr to populate repositoryName.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "service": {
                    "description": "The service in which this image is registered. Valid values: ECR.",
                    "type": "string"
                  }
                }
              }
            },
            "version": {
              "description": "Version of the container recipe.",
              "type": "string"
            },
            "workingDirectory": {
              "description": "The working directory to be used during build and test workflows.",
              "type": "string"
            }
          }
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "component": {
              "description": "Ordered configuration block(s) with components for the container recipe. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "parameter": {
                    "description": "Configuration block(s) for parameters to configure the component. Detailed below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "The name of the component parameter.",
                          "type": "string"
                        },
                        "value": {
                          "description": "The value for the named component parameter.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "containerType": {
              "description": "The type of the container to create. Valid values: DOCKER.",
              "type": "string"
            },
            "description": {
              "description": "The description of the container recipe.",
              "type": "string"
            },
            "dockerfileTemplateData": {
              "description": "The Dockerfile template used to build the image as an inline data blob.",
              "type": "string"
            },
            "dockerfileTemplateUri": {
              "description": "The Amazon S3 URI for the Dockerfile that will be used to build the container image.",
              "type": "string"
            },
            "instanceConfiguration": {
              "description": "Configuration block used to configure an instance for building and testing container images. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "blockDeviceMapping": {
                    "description": "Configuration block(s) with block device mappings for the container recipe. Detailed below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "deviceName": {
                          "description": "Name of the device. For example, /dev/sda or /dev/xvdb.",
                          "type": "string"
                        },
                        "ebs": {
                          "description": "Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "deleteOnTermination": {
                                "description": "Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.",
                                "type": "string"
                              },
                              "encrypted": {
                                "description": "Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.",
                                "type": "string"
                              },
                              "iops": {
                                "description": "Number of Input/Output (I/O) operations per second to provision for an io1 or io2 volume.",
                                "type": "number"
                              },
                              "kmsKeyId": {
                                "description": "Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.",
                                "type": "string"
                              },
                              "snapshotId": {
                                "description": "Identifier of the EC2 Volume Snapshot.",
                                "type": "string"
                              },
                              "throughput": {
                                "description": "For GP3 volumes only. The throughput in MiB/s that the volume supports.",
                                "type": "number"
                              },
                              "volumeSize": {
                                "description": "Size of the volume, in GiB.",
                                "type": "number"
                              },
                              "volumeType": {
                                "description": "Type of the volume. For example, gp2 or io2.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "noDevice": {
                          "description": "Set to true to remove a mapping from the parent image.",
                          "type": "boolean"
                        },
                        "virtualName": {
                          "description": "Virtual device name. For example, ephemeral0. Instance store volumes are numbered starting from 0.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "image": {
                    "description": "The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.",
                    "type": "string"
                  }
                }
              }
            },
            "name": {
              "description": "The name of the container recipe.",
              "type": "string"
            },
            "parentImage": {
              "description": "The base image for the container recipe.",
              "type": "string"
            },
            "platformOverride": {
              "description": "Specifies the operating system platform when you use a custom base image.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "targetRepository": {
              "description": "The destination repository for the container image. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "service": {
                    "description": "The service in which this image is registered. Valid values: ECR.",
                    "type": "string"
                  }
                }
              }
            },
            "version": {
              "description": "Version of the container recipe.",
              "type": "string"
            },
            "workingDirectory": {
              "description": "The working directory to be used during build and test workflows.",
              "type": "string"
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.component) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.component))",
          "message": "spec.forProvider.component is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.containerType) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.containerType))",
          "message": "spec.forProvider.containerType is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
          "message": "spec.forProvider.name is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.parentImage) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.parentImage))",
          "message": "spec.forProvider.parentImage is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.targetRepository) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.targetRepository))",
          "message": "spec.forProvider.targetRepository is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.version))",
          "message": "spec.forProvider.version is a required parameter"
        }
      ]
    }
  }
}