{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "subjectaccessreviews.authorization.k8s.io",
    "creationTimestamp": null
  },
  "spec": {
    "group": "authorization.k8s.io",
    "names": {
      "plural": "subjectaccessreviews",
      "singular": "subjectaccessreview",
      "kind": "SubjectAccessReview",
      "listKind": "SubjectAccessReviewList"
    },
    "scope": "Namespaced",
    "versions": [
      {
        "name": "v1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "SubjectAccessReview checks whether or not a user or group can perform an action.",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "Spec holds information about the request being evaluated",
                "type": "object",
                "properties": {
                  "extra": {
                    "description": "Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.",
                    "type": "object",
                    "additionalProperties": {
                      "description": "ExtraValue masks the value so protobuf can generate",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "groups": {
                    "description": "Groups is the groups you're testing for.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "nonResourceAttributes": {
                    "description": "NonResourceAttributes describes information for a non-resource access request",
                    "type": "object",
                    "properties": {
                      "path": {
                        "description": "Path is the URL path of the request",
                        "type": "string"
                      },
                      "verb": {
                        "description": "Verb is the standard HTTP verb",
                        "type": "string"
                      }
                    }
                  },
                  "resourceAttributes": {
                    "description": "ResourceAuthorizationAttributes describes information for a resource access request",
                    "type": "object",
                    "properties": {
                      "group": {
                        "description": "Group is the API Group of the Resource.  \"*\" means all.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview",
                        "type": "string"
                      },
                      "resource": {
                        "description": "Resource is one of the existing resource types.  \"*\" means all.",
                        "type": "string"
                      },
                      "subresource": {
                        "description": "Subresource is one of the existing resource types.  \"\" means none.",
                        "type": "string"
                      },
                      "verb": {
                        "description": "Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
                        "type": "string"
                      },
                      "version": {
                        "description": "Version is the API Version of the Resource.  \"*\" means all.",
                        "type": "string"
                      }
                    }
                  },
                  "uid": {
                    "description": "UID information about the requesting user.",
                    "type": "string"
                  },
                  "user": {
                    "description": "User is the user you're testing for. If you specify \"User\" but not \"Groups\", then is it interpreted as \"What if User were not a member of any groups",
                    "type": "string"
                  }
                }
              },
              "status": {
                "description": "Status is filled in by the server and indicates whether the request is allowed or not",
                "type": "object",
                "required": [
                  "allowed"
                ],
                "properties": {
                  "allowed": {
                    "description": "Allowed is required. True if the action would be allowed, false otherwise.",
                    "type": "boolean"
                  },
                  "denied": {
                    "description": "Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.",
                    "type": "boolean"
                  },
                  "evaluationError": {
                    "description": "EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.",
                    "type": "string"
                  },
                  "reason": {
                    "description": "Reason is optional.  It indicates why a request was allowed or denied.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "v1beta1",
        "served": true,
        "storage": false,
        "schema": {
          "openAPIV3Schema": {
            "description": "SubjectAccessReview checks whether or not a user or group can perform an action.",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "Spec holds information about the request being evaluated",
                "type": "object",
                "properties": {
                  "extra": {
                    "description": "Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.",
                    "type": "object",
                    "additionalProperties": {
                      "description": "ExtraValue masks the value so protobuf can generate",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "group": {
                    "description": "Groups is the groups you're testing for.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "nonResourceAttributes": {
                    "description": "NonResourceAttributes describes information for a non-resource access request",
                    "type": "object",
                    "properties": {
                      "path": {
                        "description": "Path is the URL path of the request",
                        "type": "string"
                      },
                      "verb": {
                        "description": "Verb is the standard HTTP verb",
                        "type": "string"
                      }
                    }
                  },
                  "resourceAttributes": {
                    "description": "ResourceAuthorizationAttributes describes information for a resource access request",
                    "type": "object",
                    "properties": {
                      "group": {
                        "description": "Group is the API Group of the Resource.  \"*\" means all.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview",
                        "type": "string"
                      },
                      "resource": {
                        "description": "Resource is one of the existing resource types.  \"*\" means all.",
                        "type": "string"
                      },
                      "subresource": {
                        "description": "Subresource is one of the existing resource types.  \"\" means none.",
                        "type": "string"
                      },
                      "verb": {
                        "description": "Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
                        "type": "string"
                      },
                      "version": {
                        "description": "Version is the API Version of the Resource.  \"*\" means all.",
                        "type": "string"
                      }
                    }
                  },
                  "uid": {
                    "description": "UID information about the requesting user.",
                    "type": "string"
                  },
                  "user": {
                    "description": "User is the user you're testing for. If you specify \"User\" but not \"Group\", then is it interpreted as \"What if User were not a member of any groups",
                    "type": "string"
                  }
                }
              },
              "status": {
                "description": "Status is filled in by the server and indicates whether the request is allowed or not",
                "type": "object",
                "required": [
                  "allowed"
                ],
                "properties": {
                  "allowed": {
                    "description": "Allowed is required. True if the action would be allowed, false otherwise.",
                    "type": "boolean"
                  },
                  "denied": {
                    "description": "Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.",
                    "type": "boolean"
                  },
                  "evaluationError": {
                    "description": "EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.",
                    "type": "string"
                  },
                  "reason": {
                    "description": "Reason is optional.  It indicates why a request was allowed or denied.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}