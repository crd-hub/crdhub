{
  "$schema": "http://json-schema.org/schema#",
  "description": "Service is the Schema for the Services API. Manages an App Runner Service.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "apprunner.aws.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "Service"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "ServiceSpec defines the desired state of Service",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "autoScalingConfigurationArn": {
              "description": "ARN of an App Runner automatic scaling configuration resource that you want to associate with your service. If not provided, App Runner associates the latest revision of a default auto scaling configuration.",
              "type": "string"
            },
            "encryptionConfiguration": {
              "description": "(Forces new resource) An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed CMK. See Encryption Configuration below for more details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "kmsKey": {
                    "description": "ARN of the KMS key used for encryption.",
                    "type": "string"
                  }
                }
              }
            },
            "healthCheckConfiguration": {
              "description": "(Forces new resource) Settings of the health check that AWS App Runner performs to monitor the health of your service. See Health Check Configuration below for more details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "healthyThreshold": {
                    "description": "Number of consecutive checks that must succeed before App Runner decides that the service is healthy. Defaults to 1. Minimum value of 1. Maximum value of 20.",
                    "type": "number"
                  },
                  "interval": {
                    "description": "Time interval, in seconds, between health checks. Defaults to 5. Minimum value of 1. Maximum value of 20.",
                    "type": "number"
                  },
                  "path": {
                    "description": "URL to send requests to for health checks. Defaults to /. Minimum length of 0. Maximum length of 51200.",
                    "type": "string"
                  },
                  "protocol": {
                    "description": "IP protocol that App Runner uses to perform health checks for your service. Valid values: TCP, HTTP. Defaults to TCP. If you set protocol to HTTP, App Runner sends health check requests to the HTTP path specified by path.",
                    "type": "string"
                  },
                  "timeout": {
                    "description": "Time, in seconds, to wait for a health check response before deciding it failed. Defaults to 2. Minimum value of  1. Maximum value of 20.",
                    "type": "number"
                  },
                  "unhealthyThreshold": {
                    "description": "Number of consecutive checks that must fail before App Runner decides that the service is unhealthy. Defaults to 5. Minimum value of  1. Maximum value of 20.",
                    "type": "number"
                  }
                }
              }
            },
            "instanceConfiguration": {
              "description": "The runtime configuration of instances (scaling units) of the App Runner service. See Instance Configuration below for more details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "cpu": {
                    "description": "Number of CPU units reserved for each instance of your App Runner service represented as a String. Defaults to 1024. Valid values: 256|512|1024|2048|4096|(0.25|0.5|1|2|4) vCPU.",
                    "type": "string"
                  },
                  "instanceRoleArn": {
                    "description": "ARN of an IAM role that provides permissions to your App Runner service. These are permissions that your code needs when it calls any AWS APIs.",
                    "type": "string"
                  },
                  "memory": {
                    "description": "Amount of memory, in MB or GB, reserved for each instance of your App Runner service. Defaults to 2048. Valid values: 512|1024|2048|3072|4096|6144|8192|10240|12288|(0.5|1|2|3|4|6|8|10|12) GB.",
                    "type": "string"
                  }
                }
              }
            },
            "networkConfiguration": {
              "description": "Configuration settings related to network traffic of the web application that the App Runner service runs. See Network Configuration below for more details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "egressConfiguration": {
                    "description": "Network configuration settings for outbound message traffic. See Egress Configuration below for more details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "egressType": {
                          "description": "Type of egress configuration.Set to DEFAULT for access to resources hosted on public networks.Set to VPC to associate your service to a custom VPC specified by VpcConnectorArn.",
                          "type": "string"
                        },
                        "vpcConnectorArn": {
                          "description": "ARN of the App Runner VPC connector that you want to associate with your App Runner service. Only valid when EgressType = VPC.",
                          "type": "string"
                        },
                        "vpcConnectorArnRef": {
                          "description": "Reference to a VPCConnector in apprunner to populate vpcConnectorArn.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name of the referenced object.",
                              "type": "string"
                            },
                            "policy": {
                              "description": "Policies for referencing.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "vpcConnectorArnSelector": {
                          "description": "Selector for a VPCConnector in apprunner to populate vpcConnectorArn.",
                          "type": "object",
                          "properties": {
                            "matchControllerRef": {
                              "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                              "type": "boolean"
                            },
                            "matchLabels": {
                              "description": "MatchLabels ensures an object with matching labels is selected.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "policy": {
                              "description": "Policies for selection.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "ingressConfiguration": {
                    "description": "Network configuration settings for inbound network traffic. See Ingress Configuration below for more details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "isPubliclyAccessible": {
                          "description": "Specifies whether your App Runner service is publicly accessible. To make the service publicly accessible set it to True. To make the service privately accessible, from only within an Amazon VPC set it to False.",
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            },
            "observabilityConfiguration": {
              "description": "The observability configuration of your service. See Observability Configuration below for more details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "observabilityConfigurationArn": {
                    "description": "ARN of the observability configuration that is associated with the service. Specified only when observability_enabled is true.",
                    "type": "string"
                  },
                  "observabilityConfigurationArnRef": {
                    "description": "Reference to a ObservabilityConfiguration in apprunner to populate observabilityConfigurationArn.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "observabilityConfigurationArnSelector": {
                    "description": "Selector for a ObservabilityConfiguration in apprunner to populate observabilityConfigurationArn.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "observabilityEnabled": {
                    "description": "When true, an observability configuration resource is associated with the service.",
                    "type": "boolean"
                  }
                }
              }
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "serviceName": {
              "description": "(Forces new resource) Name of the service.",
              "type": "string"
            },
            "sourceConfiguration": {
              "description": "The source to deploy to the App Runner service. Can be a code or an image repository. See Source Configuration below for more details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "authenticationConfiguration": {
                    "description": "Describes resources needed to authenticate access to some source repositories. See Authentication Configuration below for more details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "accessRoleArn": {
                          "description": "ARN of the IAM role that grants the App Runner service access to a source repository. Required for ECR image repositories (but not for ECR Public)",
                          "type": "string"
                        },
                        "connectionArn": {
                          "description": "ARN of the App Runner connection that enables the App Runner service to connect to a source repository. Required for GitHub code repositories.",
                          "type": "string"
                        },
                        "connectionArnRef": {
                          "description": "Reference to a Connection in apprunner to populate connectionArn.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name of the referenced object.",
                              "type": "string"
                            },
                            "policy": {
                              "description": "Policies for referencing.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "connectionArnSelector": {
                          "description": "Selector for a Connection in apprunner to populate connectionArn.",
                          "type": "object",
                          "properties": {
                            "matchControllerRef": {
                              "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                              "type": "boolean"
                            },
                            "matchLabels": {
                              "description": "MatchLabels ensures an object with matching labels is selected.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "policy": {
                              "description": "Policies for selection.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "autoDeploymentsEnabled": {
                    "description": "Whether continuous integration from the source repository is enabled for the App Runner service. If set to true, each repository change (source code commit or new image version) starts a deployment. Defaults to true.",
                    "type": "boolean"
                  },
                  "codeRepository": {
                    "description": "Description of a source code repository. See Code Repository below for more details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "codeConfiguration": {
                          "description": "Configuration for building and running the service from a source code repository. See Code Configuration below for more details.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "codeConfigurationValues": {
                                "description": "Basic configuration for building and running the App Runner service. Use this parameter to quickly launch an App Runner service without providing an apprunner.yaml file in the source code repository (or ignoring the file if it exists). See Code Configuration Values below for more details.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "buildCommand": {
                                      "description": "Command App Runner runs to build your application.",
                                      "type": "string"
                                    },
                                    "port": {
                                      "description": "Port that your application listens to in the container. Defaults to \"8080\".",
                                      "type": "string"
                                    },
                                    "runtime": {
                                      "description": "Runtime environment type for building and running an App Runner service. Represents a programming language runtime. Valid values: PYTHON_3, NODEJS_12, NODEJS_14, NODEJS_16, CORRETTO_8, CORRETTO_11, GO_1, DOTNET_6, PHP_81, RUBY_31.",
                                      "type": "string"
                                    },
                                    "runtimeEnvironmentSecrets": {
                                      "description": "Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    },
                                    "runtimeEnvironmentVariables": {
                                      "description": "Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of AWSAPPRUNNER are reserved for system use and aren't valid.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    },
                                    "startCommand": {
                                      "description": "Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image’s default start command.",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "configurationSource": {
                                "description": "Source of the App Runner configuration. Valid values: REPOSITORY, API. Values are interpreted as follows:",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "repositoryUrl": {
                          "description": "Location of the repository that contains the source code.",
                          "type": "string"
                        },
                        "sourceCodeVersion": {
                          "description": "Version that should be used within the source code repository. See Source Code Version below for more details.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "description": "Type of version identifier. For a git-based repository, branches represent versions. Valid values: BRANCH.",
                                "type": "string"
                              },
                              "value": {
                                "description": "Source code version. For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "imageRepository": {
                    "description": "Description of a source image repository. See Image Repository below for more details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "imageConfiguration": {
                          "description": "Configuration for running the identified image. See Image Configuration below for more details.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "port": {
                                "description": "Port that your application listens to in the container. Defaults to \"8080\".",
                                "type": "string"
                              },
                              "runtimeEnvironmentSecrets": {
                                "description": "Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "runtimeEnvironmentVariables": {
                                "description": "Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of AWSAPPRUNNER are reserved for system use and aren't valid.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "startCommand": {
                                "description": "Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image’s default start command.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "imageIdentifier": {
                          "description": "Identifier of an image. For an image in Amazon Elastic Container Registry (Amazon ECR), this is an image name. For the image name format, see Pulling an image in the Amazon ECR User Guide.",
                          "type": "string"
                        },
                        "imageRepositoryType": {
                          "description": "Type of the image repository. This reflects the repository provider and whether the repository is private or public. Valid values: ECR , ECR_PUBLIC.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "autoScalingConfigurationArn": {
              "description": "ARN of an App Runner automatic scaling configuration resource that you want to associate with your service. If not provided, App Runner associates the latest revision of a default auto scaling configuration.",
              "type": "string"
            },
            "encryptionConfiguration": {
              "description": "(Forces new resource) An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed CMK. See Encryption Configuration below for more details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "kmsKey": {
                    "description": "ARN of the KMS key used for encryption.",
                    "type": "string"
                  }
                }
              }
            },
            "healthCheckConfiguration": {
              "description": "(Forces new resource) Settings of the health check that AWS App Runner performs to monitor the health of your service. See Health Check Configuration below for more details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "healthyThreshold": {
                    "description": "Number of consecutive checks that must succeed before App Runner decides that the service is healthy. Defaults to 1. Minimum value of 1. Maximum value of 20.",
                    "type": "number"
                  },
                  "interval": {
                    "description": "Time interval, in seconds, between health checks. Defaults to 5. Minimum value of 1. Maximum value of 20.",
                    "type": "number"
                  },
                  "path": {
                    "description": "URL to send requests to for health checks. Defaults to /. Minimum length of 0. Maximum length of 51200.",
                    "type": "string"
                  },
                  "protocol": {
                    "description": "IP protocol that App Runner uses to perform health checks for your service. Valid values: TCP, HTTP. Defaults to TCP. If you set protocol to HTTP, App Runner sends health check requests to the HTTP path specified by path.",
                    "type": "string"
                  },
                  "timeout": {
                    "description": "Time, in seconds, to wait for a health check response before deciding it failed. Defaults to 2. Minimum value of  1. Maximum value of 20.",
                    "type": "number"
                  },
                  "unhealthyThreshold": {
                    "description": "Number of consecutive checks that must fail before App Runner decides that the service is unhealthy. Defaults to 5. Minimum value of  1. Maximum value of 20.",
                    "type": "number"
                  }
                }
              }
            },
            "instanceConfiguration": {
              "description": "The runtime configuration of instances (scaling units) of the App Runner service. See Instance Configuration below for more details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "cpu": {
                    "description": "Number of CPU units reserved for each instance of your App Runner service represented as a String. Defaults to 1024. Valid values: 256|512|1024|2048|4096|(0.25|0.5|1|2|4) vCPU.",
                    "type": "string"
                  },
                  "instanceRoleArn": {
                    "description": "ARN of an IAM role that provides permissions to your App Runner service. These are permissions that your code needs when it calls any AWS APIs.",
                    "type": "string"
                  },
                  "memory": {
                    "description": "Amount of memory, in MB or GB, reserved for each instance of your App Runner service. Defaults to 2048. Valid values: 512|1024|2048|3072|4096|6144|8192|10240|12288|(0.5|1|2|3|4|6|8|10|12) GB.",
                    "type": "string"
                  }
                }
              }
            },
            "networkConfiguration": {
              "description": "Configuration settings related to network traffic of the web application that the App Runner service runs. See Network Configuration below for more details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "egressConfiguration": {
                    "description": "Network configuration settings for outbound message traffic. See Egress Configuration below for more details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "egressType": {
                          "description": "Type of egress configuration.Set to DEFAULT for access to resources hosted on public networks.Set to VPC to associate your service to a custom VPC specified by VpcConnectorArn.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "ingressConfiguration": {
                    "description": "Network configuration settings for inbound network traffic. See Ingress Configuration below for more details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "isPubliclyAccessible": {
                          "description": "Specifies whether your App Runner service is publicly accessible. To make the service publicly accessible set it to True. To make the service privately accessible, from only within an Amazon VPC set it to False.",
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            },
            "observabilityConfiguration": {
              "description": "The observability configuration of your service. See Observability Configuration below for more details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "observabilityEnabled": {
                    "description": "When true, an observability configuration resource is associated with the service.",
                    "type": "boolean"
                  }
                }
              }
            },
            "serviceName": {
              "description": "(Forces new resource) Name of the service.",
              "type": "string"
            },
            "sourceConfiguration": {
              "description": "The source to deploy to the App Runner service. Can be a code or an image repository. See Source Configuration below for more details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "authenticationConfiguration": {
                    "description": "Describes resources needed to authenticate access to some source repositories. See Authentication Configuration below for more details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "accessRoleArn": {
                          "description": "ARN of the IAM role that grants the App Runner service access to a source repository. Required for ECR image repositories (but not for ECR Public)",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "autoDeploymentsEnabled": {
                    "description": "Whether continuous integration from the source repository is enabled for the App Runner service. If set to true, each repository change (source code commit or new image version) starts a deployment. Defaults to true.",
                    "type": "boolean"
                  },
                  "codeRepository": {
                    "description": "Description of a source code repository. See Code Repository below for more details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "codeConfiguration": {
                          "description": "Configuration for building and running the service from a source code repository. See Code Configuration below for more details.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "codeConfigurationValues": {
                                "description": "Basic configuration for building and running the App Runner service. Use this parameter to quickly launch an App Runner service without providing an apprunner.yaml file in the source code repository (or ignoring the file if it exists). See Code Configuration Values below for more details.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "buildCommand": {
                                      "description": "Command App Runner runs to build your application.",
                                      "type": "string"
                                    },
                                    "port": {
                                      "description": "Port that your application listens to in the container. Defaults to \"8080\".",
                                      "type": "string"
                                    },
                                    "runtime": {
                                      "description": "Runtime environment type for building and running an App Runner service. Represents a programming language runtime. Valid values: PYTHON_3, NODEJS_12, NODEJS_14, NODEJS_16, CORRETTO_8, CORRETTO_11, GO_1, DOTNET_6, PHP_81, RUBY_31.",
                                      "type": "string"
                                    },
                                    "runtimeEnvironmentSecrets": {
                                      "description": "Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    },
                                    "runtimeEnvironmentVariables": {
                                      "description": "Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of AWSAPPRUNNER are reserved for system use and aren't valid.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    },
                                    "startCommand": {
                                      "description": "Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image’s default start command.",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "configurationSource": {
                                "description": "Source of the App Runner configuration. Valid values: REPOSITORY, API. Values are interpreted as follows:",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "repositoryUrl": {
                          "description": "Location of the repository that contains the source code.",
                          "type": "string"
                        },
                        "sourceCodeVersion": {
                          "description": "Version that should be used within the source code repository. See Source Code Version below for more details.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "description": "Type of version identifier. For a git-based repository, branches represent versions. Valid values: BRANCH.",
                                "type": "string"
                              },
                              "value": {
                                "description": "Source code version. For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "imageRepository": {
                    "description": "Description of a source image repository. See Image Repository below for more details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "imageConfiguration": {
                          "description": "Configuration for running the identified image. See Image Configuration below for more details.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "port": {
                                "description": "Port that your application listens to in the container. Defaults to \"8080\".",
                                "type": "string"
                              },
                              "runtimeEnvironmentSecrets": {
                                "description": "Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "runtimeEnvironmentVariables": {
                                "description": "Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of AWSAPPRUNNER are reserved for system use and aren't valid.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "startCommand": {
                                "description": "Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image’s default start command.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "imageIdentifier": {
                          "description": "Identifier of an image. For an image in Amazon Elastic Container Registry (Amazon ECR), this is an image name. For the image name format, see Pulling an image in the Amazon ECR User Guide.",
                          "type": "string"
                        },
                        "imageRepositoryType": {
                          "description": "Type of the image repository. This reflects the repository provider and whether the repository is private or public. Valid values: ECR , ECR_PUBLIC.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.serviceName))",
          "message": "spec.forProvider.serviceName is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sourceConfiguration) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.sourceConfiguration))",
          "message": "spec.forProvider.sourceConfiguration is a required parameter"
        }
      ]
    }
  }
}