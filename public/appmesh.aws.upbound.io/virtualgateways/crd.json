{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "virtualgateways.appmesh.aws.upbound.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.13.0"
    }
  },
  "spec": {
    "group": "appmesh.aws.upbound.io",
    "names": {
      "plural": "virtualgateways",
      "singular": "virtualgateway",
      "kind": "VirtualGateway",
      "listKind": "VirtualGatewayList",
      "categories": [
        "crossplane",
        "managed",
        "aws"
      ]
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "VirtualGateway is the Schema for the VirtualGateways API. Provides an AWS App Mesh virtual gateway resource.",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "VirtualGatewaySpec defines the desired state of VirtualGateway",
                "type": "object",
                "required": [
                  "forProvider"
                ],
                "properties": {
                  "deletionPolicy": {
                    "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
                    "type": "string",
                    "default": "Delete",
                    "enum": [
                      "Orphan",
                      "Delete"
                    ]
                  },
                  "forProvider": {
                    "type": "object",
                    "required": [
                      "region"
                    ],
                    "properties": {
                      "meshName": {
                        "description": "Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.",
                        "type": "string"
                      },
                      "meshOwner": {
                        "description": "AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name to use for the virtual gateway. Must be between 1 and 255 characters in length.",
                        "type": "string"
                      },
                      "region": {
                        "description": "Region is the region you'd like your resource to be created in.",
                        "type": "string"
                      },
                      "spec": {
                        "description": "Virtual gateway specification to apply.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "backendDefaults": {
                              "description": "Defaults for backends.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "clientPolicy": {
                                    "description": "Default client policy for virtual gateway backends.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "tls": {
                                          "description": "Transport Layer Security (TLS) client policy.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "certificate": {
                                                "description": "Virtual gateway's client's Transport Layer Security (TLS) certificate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "file": {
                                                      "description": "Local file certificate.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "certificateChain": {
                                                            "description": "Certificate chain for the certificate.",
                                                            "type": "string"
                                                          },
                                                          "privateKey": {
                                                            "description": "Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "sds": {
                                                      "description": "A Secret Discovery Service certificate.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "secretName": {
                                                            "description": "Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "enforce": {
                                                "description": "Whether the policy is enforced. Default is true.",
                                                "type": "boolean"
                                              },
                                              "ports": {
                                                "description": "One or more ports that the policy is enforced for.",
                                                "type": "array",
                                                "items": {
                                                  "type": "number"
                                                }
                                              },
                                              "validation": {
                                                "description": "TLS validation context.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "subjectAlternativeNames": {
                                                      "description": "SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "match": {
                                                            "description": "Criteria for determining a SAN's match.",
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "properties": {
                                                                "exact": {
                                                                  "description": "Values sent must match the specified values exactly.",
                                                                  "type": "array",
                                                                  "items": {
                                                                    "type": "string"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "trust": {
                                                      "description": "TLS validation context trust.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "acm": {
                                                            "description": "TLS validation context trust for an AWS Certificate Manager (ACM) certificate.",
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "properties": {
                                                                "certificateAuthorityArns": {
                                                                  "description": "One or more ACM ARNs.",
                                                                  "type": "array",
                                                                  "items": {
                                                                    "type": "string"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "file": {
                                                            "description": "Local file certificate.",
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "properties": {
                                                                "certificateChain": {
                                                                  "description": "Certificate chain for the certificate.",
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "sds": {
                                                            "description": "A Secret Discovery Service certificate.",
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "properties": {
                                                                "secretName": {
                                                                  "description": "Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.",
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "listener": {
                              "description": "Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "connectionPool": {
                                    "description": "Connection pool information for the listener.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "grpc": {
                                          "description": "Connection pool information for gRPC listeners.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "maxRequests": {
                                                "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.",
                                                "type": "number"
                                              }
                                            }
                                          }
                                        },
                                        "http": {
                                          "description": "Connection pool information for HTTP listeners.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "maxConnections": {
                                                "description": "Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.",
                                                "type": "number"
                                              },
                                              "maxPendingRequests": {
                                                "description": "Number of overflowing requests after max_connections Envoy will queue to upstream cluster. Minimum value of 1.",
                                                "type": "number"
                                              }
                                            }
                                          }
                                        },
                                        "http2": {
                                          "description": "Connection pool information for HTTP2 listeners.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "maxRequests": {
                                                "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.",
                                                "type": "number"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "healthCheck": {
                                    "description": "Health check information for the listener.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "healthyThreshold": {
                                          "description": "Number of consecutive successful health checks that must occur before declaring listener healthy.",
                                          "type": "number"
                                        },
                                        "intervalMillis": {
                                          "description": "Time period in milliseconds between each health check execution.",
                                          "type": "number"
                                        },
                                        "path": {
                                          "description": "File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.",
                                          "type": "string"
                                        },
                                        "port": {
                                          "description": "Port used for the port mapping.",
                                          "type": "number"
                                        },
                                        "protocol": {
                                          "description": "Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.",
                                          "type": "string"
                                        },
                                        "timeoutMillis": {
                                          "description": "Amount of time to wait when receiving a response from the health check, in milliseconds.",
                                          "type": "number"
                                        },
                                        "unhealthyThreshold": {
                                          "description": "Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.",
                                          "type": "number"
                                        }
                                      }
                                    }
                                  },
                                  "portMapping": {
                                    "description": "Port mapping information for the listener.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "port": {
                                          "description": "Port used for the port mapping.",
                                          "type": "number"
                                        },
                                        "protocol": {
                                          "description": "Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "tls": {
                                    "description": "Transport Layer Security (TLS) client policy.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "certificate": {
                                          "description": "Virtual gateway's client's Transport Layer Security (TLS) certificate.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "acm": {
                                                "description": "TLS validation context trust for an AWS Certificate Manager (ACM) certificate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "certificateArn": {
                                                      "description": "ARN for the certificate.",
                                                      "type": "string"
                                                    },
                                                    "certificateArnRef": {
                                                      "description": "Reference to a Certificate in acm to populate certificateArn.",
                                                      "type": "object",
                                                      "required": [
                                                        "name"
                                                      ],
                                                      "properties": {
                                                        "name": {
                                                          "description": "Name of the referenced object.",
                                                          "type": "string"
                                                        },
                                                        "policy": {
                                                          "description": "Policies for referencing.",
                                                          "type": "object",
                                                          "properties": {
                                                            "resolution": {
                                                              "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                                              "type": "string",
                                                              "default": "Required",
                                                              "enum": [
                                                                "Required",
                                                                "Optional"
                                                              ]
                                                            },
                                                            "resolve": {
                                                              "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                                              "type": "string",
                                                              "enum": [
                                                                "Always",
                                                                "IfNotPresent"
                                                              ]
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "certificateArnSelector": {
                                                      "description": "Selector for a Certificate in acm to populate certificateArn.",
                                                      "type": "object",
                                                      "properties": {
                                                        "matchControllerRef": {
                                                          "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                                          "type": "boolean"
                                                        },
                                                        "matchLabels": {
                                                          "description": "MatchLabels ensures an object with matching labels is selected.",
                                                          "type": "object",
                                                          "additionalProperties": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "policy": {
                                                          "description": "Policies for selection.",
                                                          "type": "object",
                                                          "properties": {
                                                            "resolution": {
                                                              "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                                              "type": "string",
                                                              "default": "Required",
                                                              "enum": [
                                                                "Required",
                                                                "Optional"
                                                              ]
                                                            },
                                                            "resolve": {
                                                              "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                                              "type": "string",
                                                              "enum": [
                                                                "Always",
                                                                "IfNotPresent"
                                                              ]
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "file": {
                                                "description": "Local file certificate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "certificateChain": {
                                                      "description": "Certificate chain for the certificate.",
                                                      "type": "string"
                                                    },
                                                    "privateKey": {
                                                      "description": "Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              },
                                              "sds": {
                                                "description": "A Secret Discovery Service certificate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "secretName": {
                                                      "description": "Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "mode": {
                                          "description": "Listener's TLS mode. Valid values: DISABLED, PERMISSIVE, STRICT.",
                                          "type": "string"
                                        },
                                        "validation": {
                                          "description": "TLS validation context.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "subjectAlternativeNames": {
                                                "description": "SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "match": {
                                                      "description": "Criteria for determining a SAN's match.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "exact": {
                                                            "description": "Values sent must match the specified values exactly.",
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "trust": {
                                                "description": "TLS validation context trust.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "file": {
                                                      "description": "Local file certificate.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "certificateChain": {
                                                            "description": "Certificate chain for the certificate.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "sds": {
                                                      "description": "A Secret Discovery Service certificate.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "secretName": {
                                                            "description": "Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "logging": {
                              "description": "Inbound and outbound access logging information for the virtual gateway.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "accessLog": {
                                    "description": "Access log configuration for a virtual gateway.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "file": {
                                          "description": "Local file certificate.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "format": {
                                                "description": "The specified format for the logs.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "json": {
                                                      "description": "The logging format for JSON.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "key": {
                                                            "description": "The specified key for the JSON. Must be between 1 and 100 characters in length.",
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "description": "The specified value for the JSON. Must be between 1 and 100 characters in length.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "text": {
                                                      "description": "The logging format for text. Must be between 1 and 1000 characters in length.",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              },
                                              "path": {
                                                "description": "File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.",
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "tags": {
                        "description": "Key-value map of resource tags.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "initProvider": {
                    "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
                    "type": "object",
                    "properties": {
                      "meshName": {
                        "description": "Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.",
                        "type": "string"
                      },
                      "meshOwner": {
                        "description": "AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name to use for the virtual gateway. Must be between 1 and 255 characters in length.",
                        "type": "string"
                      },
                      "spec": {
                        "description": "Virtual gateway specification to apply.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "backendDefaults": {
                              "description": "Defaults for backends.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "clientPolicy": {
                                    "description": "Default client policy for virtual gateway backends.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "tls": {
                                          "description": "Transport Layer Security (TLS) client policy.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "certificate": {
                                                "description": "Virtual gateway's client's Transport Layer Security (TLS) certificate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "file": {
                                                      "description": "Local file certificate.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "certificateChain": {
                                                            "description": "Certificate chain for the certificate.",
                                                            "type": "string"
                                                          },
                                                          "privateKey": {
                                                            "description": "Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "sds": {
                                                      "description": "A Secret Discovery Service certificate.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "secretName": {
                                                            "description": "Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "enforce": {
                                                "description": "Whether the policy is enforced. Default is true.",
                                                "type": "boolean"
                                              },
                                              "ports": {
                                                "description": "One or more ports that the policy is enforced for.",
                                                "type": "array",
                                                "items": {
                                                  "type": "number"
                                                }
                                              },
                                              "validation": {
                                                "description": "TLS validation context.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "subjectAlternativeNames": {
                                                      "description": "SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "match": {
                                                            "description": "Criteria for determining a SAN's match.",
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "properties": {
                                                                "exact": {
                                                                  "description": "Values sent must match the specified values exactly.",
                                                                  "type": "array",
                                                                  "items": {
                                                                    "type": "string"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "trust": {
                                                      "description": "TLS validation context trust.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "acm": {
                                                            "description": "TLS validation context trust for an AWS Certificate Manager (ACM) certificate.",
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "properties": {
                                                                "certificateAuthorityArns": {
                                                                  "description": "One or more ACM ARNs.",
                                                                  "type": "array",
                                                                  "items": {
                                                                    "type": "string"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "file": {
                                                            "description": "Local file certificate.",
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "properties": {
                                                                "certificateChain": {
                                                                  "description": "Certificate chain for the certificate.",
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "sds": {
                                                            "description": "A Secret Discovery Service certificate.",
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "properties": {
                                                                "secretName": {
                                                                  "description": "Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.",
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "listener": {
                              "description": "Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "connectionPool": {
                                    "description": "Connection pool information for the listener.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "grpc": {
                                          "description": "Connection pool information for gRPC listeners.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "maxRequests": {
                                                "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.",
                                                "type": "number"
                                              }
                                            }
                                          }
                                        },
                                        "http": {
                                          "description": "Connection pool information for HTTP listeners.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "maxConnections": {
                                                "description": "Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.",
                                                "type": "number"
                                              },
                                              "maxPendingRequests": {
                                                "description": "Number of overflowing requests after max_connections Envoy will queue to upstream cluster. Minimum value of 1.",
                                                "type": "number"
                                              }
                                            }
                                          }
                                        },
                                        "http2": {
                                          "description": "Connection pool information for HTTP2 listeners.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "maxRequests": {
                                                "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.",
                                                "type": "number"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "healthCheck": {
                                    "description": "Health check information for the listener.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "healthyThreshold": {
                                          "description": "Number of consecutive successful health checks that must occur before declaring listener healthy.",
                                          "type": "number"
                                        },
                                        "intervalMillis": {
                                          "description": "Time period in milliseconds between each health check execution.",
                                          "type": "number"
                                        },
                                        "path": {
                                          "description": "File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.",
                                          "type": "string"
                                        },
                                        "port": {
                                          "description": "Port used for the port mapping.",
                                          "type": "number"
                                        },
                                        "protocol": {
                                          "description": "Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.",
                                          "type": "string"
                                        },
                                        "timeoutMillis": {
                                          "description": "Amount of time to wait when receiving a response from the health check, in milliseconds.",
                                          "type": "number"
                                        },
                                        "unhealthyThreshold": {
                                          "description": "Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.",
                                          "type": "number"
                                        }
                                      }
                                    }
                                  },
                                  "portMapping": {
                                    "description": "Port mapping information for the listener.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "port": {
                                          "description": "Port used for the port mapping.",
                                          "type": "number"
                                        },
                                        "protocol": {
                                          "description": "Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "tls": {
                                    "description": "Transport Layer Security (TLS) client policy.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "certificate": {
                                          "description": "Virtual gateway's client's Transport Layer Security (TLS) certificate.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "acm": {
                                                "description": "TLS validation context trust for an AWS Certificate Manager (ACM) certificate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object"
                                                }
                                              },
                                              "file": {
                                                "description": "Local file certificate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "certificateChain": {
                                                      "description": "Certificate chain for the certificate.",
                                                      "type": "string"
                                                    },
                                                    "privateKey": {
                                                      "description": "Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              },
                                              "sds": {
                                                "description": "A Secret Discovery Service certificate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "secretName": {
                                                      "description": "Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "mode": {
                                          "description": "Listener's TLS mode. Valid values: DISABLED, PERMISSIVE, STRICT.",
                                          "type": "string"
                                        },
                                        "validation": {
                                          "description": "TLS validation context.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "subjectAlternativeNames": {
                                                "description": "SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "match": {
                                                      "description": "Criteria for determining a SAN's match.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "exact": {
                                                            "description": "Values sent must match the specified values exactly.",
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "trust": {
                                                "description": "TLS validation context trust.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "file": {
                                                      "description": "Local file certificate.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "certificateChain": {
                                                            "description": "Certificate chain for the certificate.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "sds": {
                                                      "description": "A Secret Discovery Service certificate.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "secretName": {
                                                            "description": "Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "logging": {
                              "description": "Inbound and outbound access logging information for the virtual gateway.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "accessLog": {
                                    "description": "Access log configuration for a virtual gateway.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "file": {
                                          "description": "Local file certificate.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "format": {
                                                "description": "The specified format for the logs.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "json": {
                                                      "description": "The logging format for JSON.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "key": {
                                                            "description": "The specified key for the JSON. Must be between 1 and 100 characters in length.",
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "description": "The specified value for the JSON. Must be between 1 and 100 characters in length.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "text": {
                                                      "description": "The logging format for text. Must be between 1 and 1000 characters in length.",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              },
                                              "path": {
                                                "description": "File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.",
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "tags": {
                        "description": "Key-value map of resource tags.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "managementPolicies": {
                    "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
                    "type": "array",
                    "default": [
                      "*"
                    ],
                    "items": {
                      "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
                      "type": "string",
                      "enum": [
                        "Observe",
                        "Create",
                        "Update",
                        "Delete",
                        "LateInitialize",
                        "*"
                      ]
                    }
                  },
                  "providerConfigRef": {
                    "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
                    "type": "object",
                    "default": {
                      "name": "default"
                    },
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "publishConnectionDetailsTo": {
                    "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "configRef": {
                        "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
                        "type": "object",
                        "default": {
                          "name": "default"
                        },
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "Metadata is the metadata for connection secret.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "type": {
                            "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name of the connection secret.",
                        "type": "string"
                      }
                    }
                  },
                  "writeConnectionSecretToRef": {
                    "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
                    "type": "object",
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  }
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.meshName) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.meshName))",
                    "message": "spec.forProvider.meshName is a required parameter"
                  },
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
                    "message": "spec.forProvider.name is a required parameter"
                  },
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.spec) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.spec))",
                    "message": "spec.forProvider.spec is a required parameter"
                  }
                ]
              },
              "status": {
                "description": "VirtualGatewayStatus defines the observed state of VirtualGateway.",
                "type": "object",
                "properties": {
                  "atProvider": {
                    "type": "object",
                    "properties": {
                      "arn": {
                        "description": "ARN of the virtual gateway.",
                        "type": "string"
                      },
                      "createdDate": {
                        "description": "Creation date of the virtual gateway.",
                        "type": "string"
                      },
                      "id": {
                        "description": "ID of the virtual gateway.",
                        "type": "string"
                      },
                      "lastUpdatedDate": {
                        "description": "Last update date of the virtual gateway.",
                        "type": "string"
                      },
                      "meshName": {
                        "description": "Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.",
                        "type": "string"
                      },
                      "meshOwner": {
                        "description": "AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name to use for the virtual gateway. Must be between 1 and 255 characters in length.",
                        "type": "string"
                      },
                      "resourceOwner": {
                        "description": "Resource owner's AWS account ID.",
                        "type": "string"
                      },
                      "spec": {
                        "description": "Virtual gateway specification to apply.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "backendDefaults": {
                              "description": "Defaults for backends.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "clientPolicy": {
                                    "description": "Default client policy for virtual gateway backends.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "tls": {
                                          "description": "Transport Layer Security (TLS) client policy.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "certificate": {
                                                "description": "Virtual gateway's client's Transport Layer Security (TLS) certificate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "file": {
                                                      "description": "Local file certificate.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "certificateChain": {
                                                            "description": "Certificate chain for the certificate.",
                                                            "type": "string"
                                                          },
                                                          "privateKey": {
                                                            "description": "Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "sds": {
                                                      "description": "A Secret Discovery Service certificate.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "secretName": {
                                                            "description": "Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "enforce": {
                                                "description": "Whether the policy is enforced. Default is true.",
                                                "type": "boolean"
                                              },
                                              "ports": {
                                                "description": "One or more ports that the policy is enforced for.",
                                                "type": "array",
                                                "items": {
                                                  "type": "number"
                                                }
                                              },
                                              "validation": {
                                                "description": "TLS validation context.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "subjectAlternativeNames": {
                                                      "description": "SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "match": {
                                                            "description": "Criteria for determining a SAN's match.",
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "properties": {
                                                                "exact": {
                                                                  "description": "Values sent must match the specified values exactly.",
                                                                  "type": "array",
                                                                  "items": {
                                                                    "type": "string"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "trust": {
                                                      "description": "TLS validation context trust.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "acm": {
                                                            "description": "TLS validation context trust for an AWS Certificate Manager (ACM) certificate.",
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "properties": {
                                                                "certificateAuthorityArns": {
                                                                  "description": "One or more ACM ARNs.",
                                                                  "type": "array",
                                                                  "items": {
                                                                    "type": "string"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "file": {
                                                            "description": "Local file certificate.",
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "properties": {
                                                                "certificateChain": {
                                                                  "description": "Certificate chain for the certificate.",
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "sds": {
                                                            "description": "A Secret Discovery Service certificate.",
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "properties": {
                                                                "secretName": {
                                                                  "description": "Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.",
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "listener": {
                              "description": "Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "connectionPool": {
                                    "description": "Connection pool information for the listener.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "grpc": {
                                          "description": "Connection pool information for gRPC listeners.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "maxRequests": {
                                                "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.",
                                                "type": "number"
                                              }
                                            }
                                          }
                                        },
                                        "http": {
                                          "description": "Connection pool information for HTTP listeners.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "maxConnections": {
                                                "description": "Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.",
                                                "type": "number"
                                              },
                                              "maxPendingRequests": {
                                                "description": "Number of overflowing requests after max_connections Envoy will queue to upstream cluster. Minimum value of 1.",
                                                "type": "number"
                                              }
                                            }
                                          }
                                        },
                                        "http2": {
                                          "description": "Connection pool information for HTTP2 listeners.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "maxRequests": {
                                                "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.",
                                                "type": "number"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "healthCheck": {
                                    "description": "Health check information for the listener.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "healthyThreshold": {
                                          "description": "Number of consecutive successful health checks that must occur before declaring listener healthy.",
                                          "type": "number"
                                        },
                                        "intervalMillis": {
                                          "description": "Time period in milliseconds between each health check execution.",
                                          "type": "number"
                                        },
                                        "path": {
                                          "description": "File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.",
                                          "type": "string"
                                        },
                                        "port": {
                                          "description": "Port used for the port mapping.",
                                          "type": "number"
                                        },
                                        "protocol": {
                                          "description": "Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.",
                                          "type": "string"
                                        },
                                        "timeoutMillis": {
                                          "description": "Amount of time to wait when receiving a response from the health check, in milliseconds.",
                                          "type": "number"
                                        },
                                        "unhealthyThreshold": {
                                          "description": "Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.",
                                          "type": "number"
                                        }
                                      }
                                    }
                                  },
                                  "portMapping": {
                                    "description": "Port mapping information for the listener.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "port": {
                                          "description": "Port used for the port mapping.",
                                          "type": "number"
                                        },
                                        "protocol": {
                                          "description": "Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "tls": {
                                    "description": "Transport Layer Security (TLS) client policy.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "certificate": {
                                          "description": "Virtual gateway's client's Transport Layer Security (TLS) certificate.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "acm": {
                                                "description": "TLS validation context trust for an AWS Certificate Manager (ACM) certificate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "certificateArn": {
                                                      "description": "ARN for the certificate.",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              },
                                              "file": {
                                                "description": "Local file certificate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "certificateChain": {
                                                      "description": "Certificate chain for the certificate.",
                                                      "type": "string"
                                                    },
                                                    "privateKey": {
                                                      "description": "Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              },
                                              "sds": {
                                                "description": "A Secret Discovery Service certificate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "secretName": {
                                                      "description": "Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "mode": {
                                          "description": "Listener's TLS mode. Valid values: DISABLED, PERMISSIVE, STRICT.",
                                          "type": "string"
                                        },
                                        "validation": {
                                          "description": "TLS validation context.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "subjectAlternativeNames": {
                                                "description": "SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "match": {
                                                      "description": "Criteria for determining a SAN's match.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "exact": {
                                                            "description": "Values sent must match the specified values exactly.",
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "trust": {
                                                "description": "TLS validation context trust.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "file": {
                                                      "description": "Local file certificate.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "certificateChain": {
                                                            "description": "Certificate chain for the certificate.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "sds": {
                                                      "description": "A Secret Discovery Service certificate.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "secretName": {
                                                            "description": "Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "logging": {
                              "description": "Inbound and outbound access logging information for the virtual gateway.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "accessLog": {
                                    "description": "Access log configuration for a virtual gateway.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "file": {
                                          "description": "Local file certificate.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "format": {
                                                "description": "The specified format for the logs.",
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "json": {
                                                      "description": "The logging format for JSON.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "key": {
                                                            "description": "The specified key for the JSON. Must be between 1 and 100 characters in length.",
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "description": "The specified value for the JSON. Must be between 1 and 100 characters in length.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "text": {
                                                      "description": "The logging format for text. Must be between 1 and 1000 characters in length.",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              },
                                              "path": {
                                                "description": "File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.",
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "tags": {
                        "description": "Key-value map of resource tags.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "tagsAll": {
                        "description": "Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "conditions": {
                    "description": "Conditions of the resource.",
                    "type": "array",
                    "items": {
                      "description": "A Condition that may apply to a resource.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "A Reason for this condition's last transition from one status to another.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of this condition; is it currently True, False, or Unknown?",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-list-map-keys": [
                      "type"
                    ],
                    "x-kubernetes-list-type": "map"
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "READY",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
          },
          {
            "name": "SYNCED",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Synced')].status"
          },
          {
            "name": "EXTERNAL-NAME",
            "type": "string",
            "jsonPath": ".metadata.annotations.crossplane\\.io/external-name"
          },
          {
            "name": "AGE",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}