{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "podsecuritypolicies.policy",
    "creationTimestamp": null
  },
  "spec": {
    "group": "policy",
    "names": {
      "plural": "podsecuritypolicies",
      "singular": "podsecuritypolicy",
      "kind": "PodSecurityPolicy",
      "listKind": "PodSecurityPolicyList"
    },
    "scope": "Namespaced",
    "versions": [
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container. Deprecated in 1.21.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "spec defines the policy enforced.",
                "type": "object",
                "required": [
                  "fsGroup",
                  "runAsUser",
                  "seLinux",
                  "supplementalGroups"
                ],
                "properties": {
                  "allowPrivilegeEscalation": {
                    "description": "allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.",
                    "type": "boolean"
                  },
                  "allowedCSIDrivers": {
                    "description": "AllowedCSIDrivers is an allowlist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is a beta field, and is only honored if the API server enables the CSIInlineVolume feature gate.",
                    "type": "array",
                    "items": {
                      "description": "AllowedCSIDriver represents a single inline CSI Driver that is allowed to be used.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name is the registered name of the CSI driver",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "allowedCapabilities": {
                    "description": "allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.",
                    "type": "array",
                    "items": {
                      "description": "Capability represent POSIX capabilities type",
                      "type": "string"
                    }
                  },
                  "allowedFlexVolumes": {
                    "description": "allowedFlexVolumes is an allowlist of Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the \"volumes\" field.",
                    "type": "array",
                    "items": {
                      "description": "AllowedFlexVolume represents a single Flexvolume that is allowed to be used.",
                      "type": "object",
                      "required": [
                        "driver"
                      ],
                      "properties": {
                        "driver": {
                          "description": "driver is the name of the Flexvolume driver.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "allowedHostPaths": {
                    "description": "allowedHostPaths is an allowlist of host paths. Empty indicates that all host paths may be used.",
                    "type": "array",
                    "items": {
                      "description": "AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined.",
                      "type": "object",
                      "properties": {
                        "pathPrefix": {
                          "description": "pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path. \n Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`",
                          "type": "string"
                        },
                        "readOnly": {
                          "description": "when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.",
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "allowedProcMountTypes": {
                    "description": "AllowedProcMountTypes is an allowlist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "allowedUnsafeSysctls": {
                    "description": "allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"*\" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to allowlist all allowed unsafe sysctls explicitly to avoid rejection. \n Examples: e.g. \"foo/*\" allows \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" allows \"foo.bar\", \"foo.baz\", etc.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "defaultAddCapabilities": {
                    "description": "defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.",
                    "type": "array",
                    "items": {
                      "description": "Capability represent POSIX capabilities type",
                      "type": "string"
                    }
                  },
                  "defaultAllowPrivilegeEscalation": {
                    "description": "defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.",
                    "type": "boolean"
                  },
                  "forbiddenSysctls": {
                    "description": "forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"*\" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden. \n Examples: e.g. \"foo/*\" forbids \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" forbids \"foo.bar\", \"foo.baz\", etc.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "fsGroup": {
                    "description": "fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.",
                    "type": "object",
                    "properties": {
                      "ranges": {
                        "description": "ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.",
                        "type": "array",
                        "items": {
                          "description": "IDRange provides a min/max of an allowed range of IDs.",
                          "type": "object",
                          "required": [
                            "max",
                            "min"
                          ],
                          "properties": {
                            "max": {
                              "description": "max is the end of the range, inclusive.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "min": {
                              "description": "min is the start of the range, inclusive.",
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      "rule": {
                        "description": "rule is the strategy that will dictate what FSGroup is used in the SecurityContext.",
                        "type": "string"
                      }
                    }
                  },
                  "hostIPC": {
                    "description": "hostIPC determines if the policy allows the use of HostIPC in the pod spec.",
                    "type": "boolean"
                  },
                  "hostNetwork": {
                    "description": "hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.",
                    "type": "boolean"
                  },
                  "hostPID": {
                    "description": "hostPID determines if the policy allows the use of HostPID in the pod spec.",
                    "type": "boolean"
                  },
                  "hostPorts": {
                    "description": "hostPorts determines which host port ranges are allowed to be exposed.",
                    "type": "array",
                    "items": {
                      "description": "HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined.",
                      "type": "object",
                      "required": [
                        "max",
                        "min"
                      ],
                      "properties": {
                        "max": {
                          "description": "max is the end of the range, inclusive.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "min": {
                          "description": "min is the start of the range, inclusive.",
                          "type": "integer",
                          "format": "int32"
                        }
                      }
                    }
                  },
                  "privileged": {
                    "description": "privileged determines if a pod can request to be run as privileged.",
                    "type": "boolean"
                  },
                  "readOnlyRootFilesystem": {
                    "description": "readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.",
                    "type": "boolean"
                  },
                  "requiredDropCapabilities": {
                    "description": "requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.",
                    "type": "array",
                    "items": {
                      "description": "Capability represent POSIX capabilities type",
                      "type": "string"
                    }
                  },
                  "runAsGroup": {
                    "description": "RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.",
                    "type": "object",
                    "required": [
                      "rule"
                    ],
                    "properties": {
                      "ranges": {
                        "description": "ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.",
                        "type": "array",
                        "items": {
                          "description": "IDRange provides a min/max of an allowed range of IDs.",
                          "type": "object",
                          "required": [
                            "max",
                            "min"
                          ],
                          "properties": {
                            "max": {
                              "description": "max is the end of the range, inclusive.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "min": {
                              "description": "min is the start of the range, inclusive.",
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      "rule": {
                        "description": "rule is the strategy that will dictate the allowable RunAsGroup values that may be set.",
                        "type": "string"
                      }
                    }
                  },
                  "runAsUser": {
                    "description": "runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.",
                    "type": "object",
                    "required": [
                      "rule"
                    ],
                    "properties": {
                      "ranges": {
                        "description": "ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.",
                        "type": "array",
                        "items": {
                          "description": "IDRange provides a min/max of an allowed range of IDs.",
                          "type": "object",
                          "required": [
                            "max",
                            "min"
                          ],
                          "properties": {
                            "max": {
                              "description": "max is the end of the range, inclusive.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "min": {
                              "description": "min is the start of the range, inclusive.",
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      "rule": {
                        "description": "rule is the strategy that will dictate the allowable RunAsUser values that may be set.",
                        "type": "string"
                      }
                    }
                  },
                  "runtimeClass": {
                    "description": "runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.",
                    "type": "object",
                    "required": [
                      "allowedRuntimeClassNames"
                    ],
                    "properties": {
                      "allowedRuntimeClassNames": {
                        "description": "allowedRuntimeClassNames is an allowlist of RuntimeClass names that may be specified on a pod. A value of \"*\" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "defaultRuntimeClassName": {
                        "description": "defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.",
                        "type": "string"
                      }
                    }
                  },
                  "seLinux": {
                    "description": "seLinux is the strategy that will dictate the allowable labels that may be set.",
                    "type": "object",
                    "required": [
                      "rule"
                    ],
                    "properties": {
                      "rule": {
                        "description": "rule is the strategy that will dictate the allowable labels that may be set.",
                        "type": "string"
                      },
                      "seLinuxOptions": {
                        "description": "seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                        "type": "object",
                        "properties": {
                          "level": {
                            "description": "Level is SELinux level label that applies to the container.",
                            "type": "string"
                          },
                          "role": {
                            "description": "Role is a SELinux role label that applies to the container.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type is a SELinux type label that applies to the container.",
                            "type": "string"
                          },
                          "user": {
                            "description": "User is a SELinux user label that applies to the container.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "supplementalGroups": {
                    "description": "supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.",
                    "type": "object",
                    "properties": {
                      "ranges": {
                        "description": "ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.",
                        "type": "array",
                        "items": {
                          "description": "IDRange provides a min/max of an allowed range of IDs.",
                          "type": "object",
                          "required": [
                            "max",
                            "min"
                          ],
                          "properties": {
                            "max": {
                              "description": "max is the end of the range, inclusive.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "min": {
                              "description": "min is the start of the range, inclusive.",
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      "rule": {
                        "description": "rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.",
                        "type": "string"
                      }
                    }
                  },
                  "volumes": {
                    "description": "volumes is an allowlist of volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.",
                    "type": "array",
                    "items": {
                      "description": "FSType gives strong typing to different file systems that are used by volumes.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}