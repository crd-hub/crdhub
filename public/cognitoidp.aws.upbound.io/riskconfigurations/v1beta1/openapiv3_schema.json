{
  "$schema": "http://json-schema.org/schema#",
  "description": "RiskConfiguration is the Schema for the RiskConfigurations API. Provides a Cognito Risk Configuration resource.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "cognitoidp.aws.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "RiskConfiguration"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "RiskConfigurationSpec defines the desired state of RiskConfiguration",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "accountTakeoverRiskConfiguration": {
              "description": "The account takeover risk configuration. See details below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "actions": {
                    "description": "Account takeover risk configuration actions. See details below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "highAction": {
                          "description": "Action to take for a high risk. See action block below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "eventAction": {
                                "description": "The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.",
                                "type": "string"
                              },
                              "notify": {
                                "description": "Whether to send a notification.",
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "lowAction": {
                          "description": "Action to take for a low risk. See action block below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "eventAction": {
                                "description": "The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.",
                                "type": "string"
                              },
                              "notify": {
                                "description": "Whether to send a notification.",
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "mediumAction": {
                          "description": "Action to take for a medium risk. See action block below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "eventAction": {
                                "description": "The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.",
                                "type": "string"
                              },
                              "notify": {
                                "description": "Whether to send a notification.",
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "notifyConfiguration": {
                    "description": "The notify configuration used to construct email notifications. See details below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "blockEmail": {
                          "description": "Email template used when a detected risk event is blocked. See notify email type below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "htmlBody": {
                                "description": "The email HTML body.",
                                "type": "string"
                              },
                              "subject": {
                                "description": "The email subject.",
                                "type": "string"
                              },
                              "textBody": {
                                "description": "The email text body.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "from": {
                          "description": "The email address that is sending the email. The address must be either individually verified with Amazon Simple Email Service, or from a domain that has been verified with Amazon SES.",
                          "type": "string"
                        },
                        "mfaEmail": {
                          "description": "The multi-factor authentication (MFA) email template used when MFA is challenged as part of a detected risk. See notify email type below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "htmlBody": {
                                "description": "The email HTML body.",
                                "type": "string"
                              },
                              "subject": {
                                "description": "The email subject.",
                                "type": "string"
                              },
                              "textBody": {
                                "description": "The email text body.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "noActionEmail": {
                          "description": "The email template used when a detected risk event is allowed. See notify email type below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "htmlBody": {
                                "description": "The email HTML body.",
                                "type": "string"
                              },
                              "subject": {
                                "description": "The email subject.",
                                "type": "string"
                              },
                              "textBody": {
                                "description": "The email text body.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "replyTo": {
                          "description": "The destination to which the receiver of an email should reply to.",
                          "type": "string"
                        },
                        "sourceArn": {
                          "description": "The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. This identity permits Amazon Cognito to send for the email address specified in the From parameter.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "clientId": {
              "description": "The app client ID. When the client ID is not provided, the same risk configuration is applied to all the clients in the User Pool.",
              "type": "string"
            },
            "compromisedCredentialsRiskConfiguration": {
              "description": "The compromised credentials risk configuration. See details below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "actions": {
                    "description": "The compromised credentials risk configuration actions. See details below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "eventAction": {
                          "description": "The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "eventFilter": {
                    "description": "Perform the action for these events. The default is to perform all events if no event filter is specified. Valid values are SIGN_IN, PASSWORD_CHANGE, and SIGN_UP.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "riskExceptionConfiguration": {
              "description": "The configuration to override the risk decision. See details below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "blockedIpRangeList": {
                    "description": "Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation, a compact representation of an IP address and its routing prefix. Can contain a maximum of 200 items.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "skippedIpRangeList": {
                    "description": "Risk detection isn't performed on the IP addresses in this range list. The IP range is in CIDR notation. Can contain a maximum of 200 items.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "userPoolId": {
              "description": "The user pool ID.",
              "type": "string"
            },
            "userPoolIdRef": {
              "description": "Reference to a UserPool in cognitoidp to populate userPoolId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "userPoolIdSelector": {
              "description": "Selector for a UserPool in cognitoidp to populate userPoolId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "accountTakeoverRiskConfiguration": {
              "description": "The account takeover risk configuration. See details below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "actions": {
                    "description": "Account takeover risk configuration actions. See details below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "highAction": {
                          "description": "Action to take for a high risk. See action block below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "eventAction": {
                                "description": "The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.",
                                "type": "string"
                              },
                              "notify": {
                                "description": "Whether to send a notification.",
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "lowAction": {
                          "description": "Action to take for a low risk. See action block below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "eventAction": {
                                "description": "The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.",
                                "type": "string"
                              },
                              "notify": {
                                "description": "Whether to send a notification.",
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "mediumAction": {
                          "description": "Action to take for a medium risk. See action block below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "eventAction": {
                                "description": "The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.",
                                "type": "string"
                              },
                              "notify": {
                                "description": "Whether to send a notification.",
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "notifyConfiguration": {
                    "description": "The notify configuration used to construct email notifications. See details below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "blockEmail": {
                          "description": "Email template used when a detected risk event is blocked. See notify email type below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "htmlBody": {
                                "description": "The email HTML body.",
                                "type": "string"
                              },
                              "subject": {
                                "description": "The email subject.",
                                "type": "string"
                              },
                              "textBody": {
                                "description": "The email text body.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "from": {
                          "description": "The email address that is sending the email. The address must be either individually verified with Amazon Simple Email Service, or from a domain that has been verified with Amazon SES.",
                          "type": "string"
                        },
                        "mfaEmail": {
                          "description": "The multi-factor authentication (MFA) email template used when MFA is challenged as part of a detected risk. See notify email type below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "htmlBody": {
                                "description": "The email HTML body.",
                                "type": "string"
                              },
                              "subject": {
                                "description": "The email subject.",
                                "type": "string"
                              },
                              "textBody": {
                                "description": "The email text body.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "noActionEmail": {
                          "description": "The email template used when a detected risk event is allowed. See notify email type below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "htmlBody": {
                                "description": "The email HTML body.",
                                "type": "string"
                              },
                              "subject": {
                                "description": "The email subject.",
                                "type": "string"
                              },
                              "textBody": {
                                "description": "The email text body.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "replyTo": {
                          "description": "The destination to which the receiver of an email should reply to.",
                          "type": "string"
                        },
                        "sourceArn": {
                          "description": "The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. This identity permits Amazon Cognito to send for the email address specified in the From parameter.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "clientId": {
              "description": "The app client ID. When the client ID is not provided, the same risk configuration is applied to all the clients in the User Pool.",
              "type": "string"
            },
            "compromisedCredentialsRiskConfiguration": {
              "description": "The compromised credentials risk configuration. See details below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "actions": {
                    "description": "The compromised credentials risk configuration actions. See details below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "eventAction": {
                          "description": "The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "eventFilter": {
                    "description": "Perform the action for these events. The default is to perform all events if no event filter is specified. Valid values are SIGN_IN, PASSWORD_CHANGE, and SIGN_UP.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "riskExceptionConfiguration": {
              "description": "The configuration to override the risk decision. See details below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "blockedIpRangeList": {
                    "description": "Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation, a compact representation of an IP address and its routing prefix. Can contain a maximum of 200 items.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "skippedIpRangeList": {
                    "description": "Risk detection isn't performed on the IP addresses in this range list. The IP range is in CIDR notation. Can contain a maximum of 200 items.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      }
    }
  }
}