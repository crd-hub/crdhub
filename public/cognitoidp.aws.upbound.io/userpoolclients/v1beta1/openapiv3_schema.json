{
  "$schema": "http://json-schema.org/schema#",
  "description": "UserPoolClient is the Schema for the UserPoolClients API. Provides a Cognito User Pool Client resource.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "cognitoidp.aws.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "UserPoolClient"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "UserPoolClientSpec defines the desired state of UserPoolClient",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "accessTokenValidity": {
              "description": "Time limit, between 5 minutes and 1 day, after which the access token is no longer valid and cannot be used. By default, the unit is hours. The unit can be overridden by a value in token_validity_units.access_token.",
              "type": "number"
            },
            "allowedOauthFlows": {
              "description": "List of allowed OAuth flows (code, implicit, client_credentials).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowedOauthFlowsUserPoolClient": {
              "description": "Whether the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.",
              "type": "boolean"
            },
            "allowedOauthScopes": {
              "description": "List of allowed OAuth scopes (phone, email, openid, profile, and aws.cognito.signin.user.admin).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "analyticsConfiguration": {
              "description": "Configuration block for Amazon Pinpoint analytics for collecting metrics for this user pool. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "applicationArn": {
                    "description": "Application ARN for an Amazon Pinpoint application. Conflicts with external_id and role_arn.",
                    "type": "string"
                  },
                  "applicationId": {
                    "description": "Application ID for an Amazon Pinpoint application.",
                    "type": "string"
                  },
                  "applicationIdRef": {
                    "description": "Reference to a App in pinpoint to populate applicationId.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "applicationIdSelector": {
                    "description": "Selector for a App in pinpoint to populate applicationId.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "externalId": {
                    "description": "ID for the Analytics Configuration. Conflicts with application_arn.",
                    "type": "string"
                  },
                  "roleArn": {
                    "description": "ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics. Conflicts with application_arn.",
                    "type": "string"
                  },
                  "roleArnRef": {
                    "description": "Reference to a Role in iam to populate roleArn.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "roleArnSelector": {
                    "description": "Selector for a Role in iam to populate roleArn.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "userDataShared": {
                    "description": "If set to true, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.",
                    "type": "boolean"
                  }
                }
              }
            },
            "authSessionValidity": {
              "description": "Amazon Cognito creates a session token for each API request in an authentication flow. AuthSessionValidity is the duration, in minutes, of that session token. Your user pool native user must respond to each authentication challenge before the session expires. Valid values between 3 and 15. Default value is 3.",
              "type": "number"
            },
            "callbackUrls": {
              "description": "List of allowed callback URLs for the identity providers.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "defaultRedirectUri": {
              "description": "Default redirect URI. Must be in the list of callback URLs.",
              "type": "string"
            },
            "enablePropagateAdditionalUserContextData": {
              "description": "Activates the propagation of additional user context data.",
              "type": "boolean"
            },
            "enableTokenRevocation": {
              "description": "Enables or disables token revocation.",
              "type": "boolean"
            },
            "explicitAuthFlows": {
              "description": "List of authentication flows (ADMIN_NO_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY, USER_PASSWORD_AUTH, ALLOW_ADMIN_USER_PASSWORD_AUTH, ALLOW_CUSTOM_AUTH, ALLOW_USER_PASSWORD_AUTH, ALLOW_USER_SRP_AUTH, ALLOW_REFRESH_TOKEN_AUTH).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "generateSecret": {
              "description": "Should an application secret be generated.",
              "type": "boolean"
            },
            "idTokenValidity": {
              "description": "Time limit, between 5 minutes and 1 day, after which the ID token is no longer valid and cannot be used. By default, the unit is hours. The unit can be overridden by a value in token_validity_units.id_token.",
              "type": "number"
            },
            "logoutUrls": {
              "description": "List of allowed logout URLs for the identity providers.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "name": {
              "description": "Name of the application client.",
              "type": "string"
            },
            "preventUserExistenceErrors": {
              "description": "Choose which errors and responses are returned by Cognito APIs during authentication, account confirmation, and password recovery when the user does not exist in the user pool. When set to ENABLED and the user does not exist, authentication returns an error indicating either the username or password was incorrect, and account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to LEGACY, those APIs will return a UserNotFoundException exception if the user does not exist in the user pool.",
              "type": "string"
            },
            "readAttributes": {
              "description": "List of user pool attributes the application client can read from.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "refreshTokenValidity": {
              "description": "Time limit, between 60 minutes and 10 years, after which the refresh token is no longer valid and cannot be used. By default, the unit is days. The unit can be overridden by a value in token_validity_units.refresh_token.",
              "type": "number"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "supportedIdentityProviders": {
              "description": "List of provider names for the identity providers that are supported on this client. Uses the provider_name attribute of aws_cognito_identity_provider resource(s), or the equivalent string(s).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "tokenValidityUnits": {
              "description": "Configuration block for units in which the validity times are represented in. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "accessToken": {
                    "description": "Time unit in for the value in access_token_validity, defaults to hours.",
                    "type": "string"
                  },
                  "idToken": {
                    "description": "Time unit in for the value in id_token_validity, defaults to hours.",
                    "type": "string"
                  },
                  "refreshToken": {
                    "description": "Time unit in for the value in refresh_token_validity, defaults to days.",
                    "type": "string"
                  }
                }
              }
            },
            "userPoolId": {
              "description": "User pool the client belongs to.",
              "type": "string"
            },
            "userPoolIdRef": {
              "description": "Reference to a UserPool to populate userPoolId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "userPoolIdSelector": {
              "description": "Selector for a UserPool to populate userPoolId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "writeAttributes": {
              "description": "List of user pool attributes the application client can write to.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "accessTokenValidity": {
              "description": "Time limit, between 5 minutes and 1 day, after which the access token is no longer valid and cannot be used. By default, the unit is hours. The unit can be overridden by a value in token_validity_units.access_token.",
              "type": "number"
            },
            "allowedOauthFlows": {
              "description": "List of allowed OAuth flows (code, implicit, client_credentials).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowedOauthFlowsUserPoolClient": {
              "description": "Whether the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.",
              "type": "boolean"
            },
            "allowedOauthScopes": {
              "description": "List of allowed OAuth scopes (phone, email, openid, profile, and aws.cognito.signin.user.admin).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "analyticsConfiguration": {
              "description": "Configuration block for Amazon Pinpoint analytics for collecting metrics for this user pool. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "applicationArn": {
                    "description": "Application ARN for an Amazon Pinpoint application. Conflicts with external_id and role_arn.",
                    "type": "string"
                  },
                  "externalId": {
                    "description": "ID for the Analytics Configuration. Conflicts with application_arn.",
                    "type": "string"
                  },
                  "userDataShared": {
                    "description": "If set to true, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.",
                    "type": "boolean"
                  }
                }
              }
            },
            "authSessionValidity": {
              "description": "Amazon Cognito creates a session token for each API request in an authentication flow. AuthSessionValidity is the duration, in minutes, of that session token. Your user pool native user must respond to each authentication challenge before the session expires. Valid values between 3 and 15. Default value is 3.",
              "type": "number"
            },
            "callbackUrls": {
              "description": "List of allowed callback URLs for the identity providers.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "defaultRedirectUri": {
              "description": "Default redirect URI. Must be in the list of callback URLs.",
              "type": "string"
            },
            "enablePropagateAdditionalUserContextData": {
              "description": "Activates the propagation of additional user context data.",
              "type": "boolean"
            },
            "enableTokenRevocation": {
              "description": "Enables or disables token revocation.",
              "type": "boolean"
            },
            "explicitAuthFlows": {
              "description": "List of authentication flows (ADMIN_NO_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY, USER_PASSWORD_AUTH, ALLOW_ADMIN_USER_PASSWORD_AUTH, ALLOW_CUSTOM_AUTH, ALLOW_USER_PASSWORD_AUTH, ALLOW_USER_SRP_AUTH, ALLOW_REFRESH_TOKEN_AUTH).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "generateSecret": {
              "description": "Should an application secret be generated.",
              "type": "boolean"
            },
            "idTokenValidity": {
              "description": "Time limit, between 5 minutes and 1 day, after which the ID token is no longer valid and cannot be used. By default, the unit is hours. The unit can be overridden by a value in token_validity_units.id_token.",
              "type": "number"
            },
            "logoutUrls": {
              "description": "List of allowed logout URLs for the identity providers.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "name": {
              "description": "Name of the application client.",
              "type": "string"
            },
            "preventUserExistenceErrors": {
              "description": "Choose which errors and responses are returned by Cognito APIs during authentication, account confirmation, and password recovery when the user does not exist in the user pool. When set to ENABLED and the user does not exist, authentication returns an error indicating either the username or password was incorrect, and account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to LEGACY, those APIs will return a UserNotFoundException exception if the user does not exist in the user pool.",
              "type": "string"
            },
            "readAttributes": {
              "description": "List of user pool attributes the application client can read from.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "refreshTokenValidity": {
              "description": "Time limit, between 60 minutes and 10 years, after which the refresh token is no longer valid and cannot be used. By default, the unit is days. The unit can be overridden by a value in token_validity_units.refresh_token.",
              "type": "number"
            },
            "supportedIdentityProviders": {
              "description": "List of provider names for the identity providers that are supported on this client. Uses the provider_name attribute of aws_cognito_identity_provider resource(s), or the equivalent string(s).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "tokenValidityUnits": {
              "description": "Configuration block for units in which the validity times are represented in. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "accessToken": {
                    "description": "Time unit in for the value in access_token_validity, defaults to hours.",
                    "type": "string"
                  },
                  "idToken": {
                    "description": "Time unit in for the value in id_token_validity, defaults to hours.",
                    "type": "string"
                  },
                  "refreshToken": {
                    "description": "Time unit in for the value in refresh_token_validity, defaults to days.",
                    "type": "string"
                  }
                }
              }
            },
            "writeAttributes": {
              "description": "List of user pool attributes the application client can write to.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
          "message": "spec.forProvider.name is a required parameter"
        }
      ]
    }
  }
}