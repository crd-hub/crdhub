{
  "$schema": "http://json-schema.org/schema#",
  "description": "StoredInfoType is the Schema for the StoredInfoTypes API. Allows creation of custom info types.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "datalossprevention.gcp.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "StoredInfoType"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "StoredInfoTypeSpec defines the desired state of StoredInfoType",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "description": {
              "description": "A description of the info type.",
              "type": "string"
            },
            "dictionary": {
              "description": "Dictionary which defines the rule. Structure is documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "cloudStoragePath": {
                    "description": "Newline-delimited file of words in Cloud Storage. Only a single file is accepted. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "description": "A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "wordList": {
                    "description": "List of words or phrases to search for. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "words": {
                          "description": "Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "displayName": {
              "description": "User set display name of the info type.",
              "type": "string"
            },
            "largeCustomDictionary": {
              "description": "Dictionary which defines the rule. Structure is documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "bigQueryField": {
                    "description": "Field in a BigQuery table where each cell represents a dictionary phrase. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "field": {
                          "description": "Designated field in the BigQuery table. Structure is documented below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "The resource name of the info type. Set by the server.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "table": {
                          "description": "Field in a BigQuery table where each cell represents a dictionary phrase. Structure is documented below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "datasetId": {
                                "description": "The dataset ID of the table.",
                                "type": "string"
                              },
                              "projectId": {
                                "description": "The Google Cloud Platform project ID of the project containing the table.",
                                "type": "string"
                              },
                              "tableId": {
                                "description": "The name of the table.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "cloudStorageFileSet": {
                    "description": "Set of files containing newline-delimited lists of dictionary phrases. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "description": "The url, in the format gs://\u003cbucket\u003e/\u003cpath\u003e. Trailing wildcard in the path is allowed.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "outputPath": {
                    "description": "Location to store dictionary artifacts in Google Cloud Storage. These files will only be accessible by project owners and the DLP API. If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "description": "A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "parent": {
              "description": "The parent of the info type in any of the following formats:",
              "type": "string"
            },
            "regex": {
              "description": "Regular expression which defines the rule. Structure is documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "groupIndexes": {
                    "description": "The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.",
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  },
                  "pattern": {
                    "description": "Pattern defining the regular expression. Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.",
                    "type": "string"
                  }
                }
              }
            },
            "storedInfoTypeId": {
              "description": "The storedInfoType ID can contain uppercase and lowercase letters, numbers, and hyphens; that is, it must match the regular expression: [a-zA-Z\\d-_]+. The maximum length is 100 characters. Can be empty to allow the system to generate one.",
              "type": "string"
            }
          }
        },
        "initProvider": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "description": {
              "description": "A description of the info type.",
              "type": "string"
            },
            "dictionary": {
              "description": "Dictionary which defines the rule. Structure is documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "cloudStoragePath": {
                    "description": "Newline-delimited file of words in Cloud Storage. Only a single file is accepted. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "description": "A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "wordList": {
                    "description": "List of words or phrases to search for. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "words": {
                          "description": "Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "displayName": {
              "description": "User set display name of the info type.",
              "type": "string"
            },
            "largeCustomDictionary": {
              "description": "Dictionary which defines the rule. Structure is documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "bigQueryField": {
                    "description": "Field in a BigQuery table where each cell represents a dictionary phrase. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "field": {
                          "description": "Designated field in the BigQuery table. Structure is documented below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "The resource name of the info type. Set by the server.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "table": {
                          "description": "Field in a BigQuery table where each cell represents a dictionary phrase. Structure is documented below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "datasetId": {
                                "description": "The dataset ID of the table.",
                                "type": "string"
                              },
                              "projectId": {
                                "description": "The Google Cloud Platform project ID of the project containing the table.",
                                "type": "string"
                              },
                              "tableId": {
                                "description": "The name of the table.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "cloudStorageFileSet": {
                    "description": "Set of files containing newline-delimited lists of dictionary phrases. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "description": "The url, in the format gs://\u003cbucket\u003e/\u003cpath\u003e. Trailing wildcard in the path is allowed.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "outputPath": {
                    "description": "Location to store dictionary artifacts in Google Cloud Storage. These files will only be accessible by project owners and the DLP API. If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "description": "A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "parent": {
              "description": "The parent of the info type in any of the following formats:",
              "type": "string"
            },
            "regex": {
              "description": "Regular expression which defines the rule. Structure is documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "groupIndexes": {
                    "description": "The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.",
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  },
                  "pattern": {
                    "description": "Pattern defining the regular expression. Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.",
                    "type": "string"
                  }
                }
              }
            },
            "storedInfoTypeId": {
              "description": "The storedInfoType ID can contain uppercase and lowercase letters, numbers, and hyphens; that is, it must match the regular expression: [a-zA-Z\\d-_]+. The maximum length is 100 characters. Can be empty to allow the system to generate one.",
              "type": "string"
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.parent) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.parent))",
          "message": "spec.forProvider.parent is a required parameter"
        }
      ]
    }
  }
}