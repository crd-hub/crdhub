{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "resourcedescriptors.meta.k8s.appscode.com",
    "creationTimestamp": null
  },
  "spec": {
    "group": "meta.k8s.appscode.com",
    "names": {
      "plural": "resourcedescriptors",
      "singular": "resourcedescriptor",
      "shortNames": [
        "rd"
      ],
      "kind": "ResourceDescriptor",
      "listKind": "ResourceDescriptorList"
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1alpha1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "required": [
                  "resource"
                ],
                "properties": {
                  "connections": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "labels",
                        "target",
                        "type"
                      ],
                      "properties": {
                        "labels": {
                          "type": "array",
                          "items": {
                            "description": "ENUM(authn,authz,auth_secret,backup_via,catalog,cert_issuer,config,connect_via,exposed_by,event,located_on,monitored_by,ocm_bind,offshoot,ops,policy,recommended_for,restore_into,scaled_by,source,storage,view)",
                            "type": "string",
                            "enum": [
                              "authn",
                              "authz",
                              "auth_secret",
                              "backup_via",
                              "catalog",
                              "cert_issuer",
                              "config",
                              "connect_via",
                              "exposed_by",
                              "event",
                              "located_on",
                              "monitored_by",
                              "ocm_bind",
                              "offshoot",
                              "ops",
                              "policy",
                              "recommended_for",
                              "restore_into",
                              "scaled_by",
                              "source",
                              "storage",
                              "view"
                            ]
                          }
                        },
                        "level": {
                          "type": "string"
                        },
                        "nameTemplate": {
                          "type": "string"
                        },
                        "namespace": {
                          "type": "object",
                          "properties": {
                            "labelSelector": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "selector": {
                              "type": "string"
                            }
                          }
                        },
                        "references": {
                          "description": "References are a jsonpath that returns a CSV formatted references to target resources \n If each row has a single column, it is target name. Target resource is non-namespaced or uses the same namespace as the source resource. Example: n1 n2 \n If each row has two columns, it is target [name,namespace]. Example: n1,ns1 n2,ns2 \n If each row has three columns, it is target [name,namespace,kind]. Example: n1,ns1,k1 n2,ns2,k2 \n If each row has four columns, it is target [name,namespace,kind,apiGroup]. Example: n1,ns1,k1,apiGroup1 n2,ns2,k2,apiGroup2",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "selector": {
                          "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                          "type": "object",
                          "properties": {
                            "matchExpressions": {
                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                              "type": "array",
                              "items": {
                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                "type": "object",
                                "required": [
                                  "key",
                                  "operator"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "key is the label key that the selector applies to.",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                    "type": "string"
                                  },
                                  "values": {
                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  }
                                }
                              },
                              "x-kubernetes-list-type": "atomic"
                            },
                            "matchLabels": {
                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        },
                        "selectorPath": {
                          "type": "string"
                        },
                        "target": {
                          "description": "TypeMeta describes an individual object in an API response or request with strings representing the type of the object and its API schema version. Structures that are versioned or persisted should inline TypeMeta.",
                          "type": "object",
                          "properties": {
                            "apiVersion": {
                              "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                              "type": "string"
                            },
                            "kind": {
                              "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                              "type": "string"
                            }
                          }
                        },
                        "targetLabelPath": {
                          "description": "default: metadata.labels",
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "MatchSelector",
                            "MatchName",
                            "MatchRef",
                            "OwnedBy"
                          ]
                        }
                      }
                    }
                  },
                  "exec": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "alias"
                      ],
                      "properties": {
                        "alias": {
                          "type": "string"
                        },
                        "command": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "container": {
                          "type": "string"
                        },
                        "help": {
                          "type": "string"
                        },
                        "if": {
                          "type": "object",
                          "properties": {
                            "condition": {
                              "type": "string"
                            },
                            "connected": {
                              "type": "object",
                              "required": [
                                "query",
                                "ref"
                              ],
                              "properties": {
                                "impersonate": {
                                  "type": "boolean"
                                },
                                "query": {
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "byLabel": {
                                      "description": "ENUM(authn,authz,auth_secret,backup_via,catalog,cert_issuer,config,connect_via,exposed_by,event,located_on,monitored_by,ocm_bind,offshoot,ops,policy,recommended_for,restore_into,scaled_by,source,storage,view)",
                                      "type": "string",
                                      "enum": [
                                        "authn",
                                        "authz",
                                        "auth_secret",
                                        "backup_via",
                                        "catalog",
                                        "cert_issuer",
                                        "config",
                                        "connect_via",
                                        "exposed_by",
                                        "event",
                                        "located_on",
                                        "monitored_by",
                                        "ocm_bind",
                                        "offshoot",
                                        "ops",
                                        "policy",
                                        "recommended_for",
                                        "restore_into",
                                        "scaled_by",
                                        "source",
                                        "storage",
                                        "view"
                                      ]
                                    },
                                    "raw": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "REST",
                                        "GraphQL"
                                      ]
                                    }
                                  }
                                },
                                "ref": {
                                  "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
                                  "type": "object",
                                  "required": [
                                    "group",
                                    "kind"
                                  ],
                                  "properties": {
                                    "group": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "serviceNameTemplate": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "links": {
                    "description": "Links are a list of descriptive URLs intended to be used to surface additional documentation, dashboards, etc.",
                    "type": "array",
                    "items": {
                      "description": "Link contains information about an URL to surface documentation, dashboards, etc.",
                      "type": "object",
                      "properties": {
                        "description": {
                          "description": "Description is human readable content explaining the purpose of the link.",
                          "type": "string"
                        },
                        "url": {
                          "description": "Url typically points at a website address.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "maintainers": {
                    "description": "Maintainers is an optional list of maintainers of the application. The maintainers in this list maintain the source code, images, and package for the application.",
                    "type": "array",
                    "items": {
                      "description": "ContactData contains information about an individual or organization.",
                      "type": "object",
                      "properties": {
                        "email": {
                          "description": "Email is the email address.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name is the descriptive name.",
                          "type": "string"
                        },
                        "url": {
                          "description": "Url could typically be a website address.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "resource": {
                    "description": "ResourceID identifies a resource",
                    "type": "object",
                    "required": [
                      "group"
                    ],
                    "properties": {
                      "group": {
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind is the serialized kind of the resource.  It is normally CamelCase and singular.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name is the plural name of the resource to serve.  It must match the name of the CustomResourceDefinition-registration too: plural.group and it must be all lowercase.",
                        "type": "string"
                      },
                      "scope": {
                        "description": "ResourceScope is an enum defining the different scopes available to a custom resource",
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    }
                  },
                  "validation": {
                    "description": "validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.",
                    "type": "object",
                    "properties": {
                      "openAPIV3Schema": {
                        "description": "openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.",
                        "type": "object",
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "Status",
            "type": "string",
            "jsonPath": ".status.phase"
          },
          {
            "name": "Age",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}