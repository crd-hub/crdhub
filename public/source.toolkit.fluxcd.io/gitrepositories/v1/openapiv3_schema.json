{
  "$schema": "http://json-schema.org/schema#",
  "description": "GitRepository is the Schema for the gitrepositories API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "source.toolkit.fluxcd.io/v1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "GitRepository"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. \n Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "GitRepositorySpec specifies the required configuration to produce an\nArtifact for a Git repository.",
      "type": "object",
      "required": [
        "interval",
        "url"
      ],
      "properties": {
        "ignore": {
          "description": "Ignore overrides the set of excluded patterns in the .sourceignore format\n(which is the same as .gitignore). If not provided, a default will be used,\nconsult the documentation for your version to find out what those are.",
          "type": "string"
        },
        "include": {
          "description": "Include specifies a list of GitRepository resources which Artifacts\nshould be included in the Artifact produced for this GitRepository.",
          "type": "array",
          "items": {
            "description": "GitRepositoryInclude specifies a local reference to a GitRepository which\nArtifact (sub-)contents must be included, and where they should be placed.",
            "type": "object",
            "required": [
              "repository"
            ],
            "properties": {
              "fromPath": {
                "description": "FromPath specifies the path to copy contents from, defaults to the root\nof the Artifact.",
                "type": "string"
              },
              "repository": {
                "description": "GitRepositoryRef specifies the GitRepository which Artifact contents\nmust be included.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referent.",
                    "type": "string"
                  }
                }
              },
              "toPath": {
                "description": "ToPath specifies the path to copy contents to, defaults to the name of\nthe GitRepositoryRef.",
                "type": "string"
              }
            }
          }
        },
        "interval": {
          "description": "Interval at which the GitRepository URL is checked for updates.\nThis interval is approximate and may be subject to jitter to ensure\nefficient use of resources.",
          "type": "string",
          "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$"
        },
        "proxySecretRef": {
          "description": "ProxySecretRef specifies the Secret containing the proxy configuration\nto use while communicating with the Git server.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referent.",
              "type": "string"
            }
          }
        },
        "recurseSubmodules": {
          "description": "RecurseSubmodules enables the initialization of all submodules within\nthe GitRepository as cloned from the URL, using their default settings.",
          "type": "boolean"
        },
        "ref": {
          "description": "Reference specifies the Git reference to resolve and monitor for\nchanges, defaults to the 'master' branch.",
          "type": "object",
          "properties": {
            "branch": {
              "description": "Branch to check out, defaults to 'master' if no other field is defined.",
              "type": "string"
            },
            "commit": {
              "description": "Commit SHA to check out, takes precedence over all reference fields.\n\n\nThis can be combined with Branch to shallow clone the branch, in which\nthe commit is expected to exist.",
              "type": "string"
            },
            "name": {
              "description": "Name of the reference to check out; takes precedence over Branch, Tag and SemVer.\n\n\nIt must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description\nExamples: \"refs/heads/main\", \"refs/tags/v0.1.0\", \"refs/pull/420/head\", \"refs/merge-requests/1/head\"",
              "type": "string"
            },
            "semver": {
              "description": "SemVer tag expression to check out, takes precedence over Tag.",
              "type": "string"
            },
            "tag": {
              "description": "Tag to check out, takes precedence over Branch.",
              "type": "string"
            }
          }
        },
        "secretRef": {
          "description": "SecretRef specifies the Secret containing authentication credentials for\nthe GitRepository.\nFor HTTPS repositories the Secret must contain 'username' and 'password'\nfields for basic auth or 'bearerToken' field for token auth.\nFor SSH repositories the Secret must contain 'identity'\nand 'known_hosts' fields.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referent.",
              "type": "string"
            }
          }
        },
        "suspend": {
          "description": "Suspend tells the controller to suspend the reconciliation of this\nGitRepository.",
          "type": "boolean"
        },
        "timeout": {
          "description": "Timeout for Git operations like cloning, defaults to 60s.",
          "type": "string",
          "default": "60s",
          "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m))+$"
        },
        "url": {
          "description": "URL specifies the Git repository URL, it can be an HTTP/S or SSH address.",
          "type": "string",
          "pattern": "^(http|https|ssh)://.*$"
        },
        "verify": {
          "description": "Verification specifies the configuration to verify the Git commit\nsignature(s).",
          "type": "object",
          "required": [
            "secretRef"
          ],
          "properties": {
            "mode": {
              "description": "Mode specifies which Git object(s) should be verified.\n\n\nThe variants \"head\" and \"HEAD\" both imply the same thing, i.e. verify\nthe commit that the HEAD of the Git repository points to. The variant\n\"head\" solely exists to ensure backwards compatibility.",
              "type": "string",
              "default": "HEAD",
              "enum": [
                "head",
                "HEAD",
                "Tag",
                "TagAndHEAD"
              ]
            },
            "secretRef": {
              "description": "SecretRef specifies the Secret containing the public keys of trusted Git\nauthors.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  }
}