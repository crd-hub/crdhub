{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "catalogtables.glue.aws.upbound.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.13.0"
    }
  },
  "spec": {
    "group": "glue.aws.upbound.io",
    "names": {
      "plural": "catalogtables",
      "singular": "catalogtable",
      "kind": "CatalogTable",
      "listKind": "CatalogTableList",
      "categories": [
        "crossplane",
        "managed",
        "aws"
      ]
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "CatalogTable is the Schema for the CatalogTables API. Provides a Glue Catalog Table.",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "CatalogTableSpec defines the desired state of CatalogTable",
                "type": "object",
                "required": [
                  "forProvider"
                ],
                "properties": {
                  "deletionPolicy": {
                    "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
                    "type": "string",
                    "default": "Delete",
                    "enum": [
                      "Orphan",
                      "Delete"
                    ]
                  },
                  "forProvider": {
                    "type": "object",
                    "required": [
                      "catalogId",
                      "region"
                    ],
                    "properties": {
                      "catalogId": {
                        "description": "ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.",
                        "type": "string"
                      },
                      "databaseName": {
                        "description": "Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.",
                        "type": "string"
                      },
                      "databaseNameRef": {
                        "description": "Reference to a CatalogDatabase in glue to populate databaseName.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "databaseNameSelector": {
                        "description": "Selector for a CatalogDatabase in glue to populate databaseName.",
                        "type": "object",
                        "properties": {
                          "matchControllerRef": {
                            "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                            "type": "boolean"
                          },
                          "matchLabels": {
                            "description": "MatchLabels ensures an object with matching labels is selected.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "policy": {
                            "description": "Policies for selection.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "description": {
                        "description": "Description of the table.",
                        "type": "string"
                      },
                      "owner": {
                        "description": "Owner of the table.",
                        "type": "string"
                      },
                      "parameters": {
                        "description": "Properties associated with this table, as a list of key-value pairs.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "partitionIndex": {
                        "description": "Configuration block for a maximum of 3 partition indexes. See partition_index below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "indexName": {
                              "description": "Name of the partition index.",
                              "type": "string"
                            },
                            "keys": {
                              "description": "Keys for the partition index.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "partitionKeys": {
                        "description": "Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See partition_keys below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "comment": {
                              "description": "Free-form text comment.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the Partition Key.",
                              "type": "string"
                            },
                            "type": {
                              "description": "Datatype of data in the Partition Key.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "region": {
                        "description": "Region is the region you'd like your resource to be created in.",
                        "type": "string"
                      },
                      "retention": {
                        "description": "Retention time for this table.",
                        "type": "number"
                      },
                      "storageDescriptor": {
                        "description": "Configuration block for information about the physical storage of this table. For more information, refer to the Glue Developer Guide. See storage_descriptor below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "bucketColumns": {
                              "description": "List of reducer grouping columns, clustering columns, and bucketing columns in the table.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "columns": {
                              "description": "Configuration block for columns in the table. See columns below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "comment": {
                                    "description": "Free-form text comment.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the Column.",
                                    "type": "string"
                                  },
                                  "parameters": {
                                    "description": "Key-value pairs defining properties associated with the column.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "type": {
                                    "description": "Datatype of data in the Column.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "compressed": {
                              "description": "Whether the data in the table is compressed.",
                              "type": "boolean"
                            },
                            "inputFormat": {
                              "description": "Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.",
                              "type": "string"
                            },
                            "location": {
                              "description": "Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.",
                              "type": "string"
                            },
                            "numberOfBuckets": {
                              "description": "Must be specified if the table contains any dimension columns.",
                              "type": "number"
                            },
                            "outputFormat": {
                              "description": "Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.",
                              "type": "string"
                            },
                            "parameters": {
                              "description": "User-supplied properties in key-value form.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "schemaReference": {
                              "description": "Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "schemaId": {
                                    "description": "Configuration block that contains schema identity fields. Either this or the schema_version_id has to be provided. See schema_id below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "registryName": {
                                          "description": "Name of the schema registry that contains the schema. Must be provided when schema_name is specified and conflicts with schema_arn.",
                                          "type": "string"
                                        },
                                        "schemaArn": {
                                          "description": "ARN of the schema. One of schema_arn or schema_name has to be provided.",
                                          "type": "string"
                                        },
                                        "schemaName": {
                                          "description": "Name of the schema. One of schema_arn or schema_name has to be provided.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "schemaVersionId": {
                                    "description": "Unique ID assigned to a version of the schema. Either this or the schema_id has to be provided.",
                                    "type": "string"
                                  },
                                  "schemaVersionNumber": {
                                    "description": "Version number of the schema.",
                                    "type": "number"
                                  }
                                }
                              }
                            },
                            "serDeInfo": {
                              "description": "Configuration block for serialization and deserialization (\"SerDe\") information. See ser_de_info below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name of the SerDe.",
                                    "type": "string"
                                  },
                                  "parameters": {
                                    "description": "Map of initialization parameters for the SerDe, in key-value form.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "serializationLibrary": {
                                    "description": "Usually the class that implements the SerDe. An example is org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "skewedInfo": {
                              "description": "Configuration block with information about values that appear very frequently in a column (skewed values). See skewed_info below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "skewedColumnNames": {
                                    "description": "List of names of columns that contain skewed values.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "skewedColumnValueLocationMaps": {
                                    "description": "List of values that appear so frequently as to be considered skewed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "skewedColumnValues": {
                                    "description": "Map of skewed values to the columns that contain them.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "sortColumns": {
                              "description": "Configuration block for the sort order of each bucket in the table. See sort_columns below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "column": {
                                    "description": "Name of the column.",
                                    "type": "string"
                                  },
                                  "sortOrder": {
                                    "description": "Whether the column is sorted in ascending (1) or descending order (0).",
                                    "type": "number"
                                  }
                                }
                              }
                            },
                            "storedAsSubDirectories": {
                              "description": "Whether the table data is stored in subdirectories.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "tableType": {
                        "description": "Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as ALTER TABLE and SHOW CREATE TABLE will fail if this argument is empty.",
                        "type": "string"
                      },
                      "targetTable": {
                        "description": "Configuration block of a target table for resource linking. See target_table below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "catalogId",
                            "databaseName"
                          ],
                          "properties": {
                            "catalogId": {
                              "description": "ID of the Data Catalog in which the table resides.",
                              "type": "string"
                            },
                            "databaseName": {
                              "description": "Name of the catalog database that contains the target table.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the target table.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "viewExpandedText": {
                        "description": "If the table is a view, the expanded text of the view; otherwise null.",
                        "type": "string"
                      },
                      "viewOriginalText": {
                        "description": "If the table is a view, the original text of the view; otherwise null.",
                        "type": "string"
                      }
                    }
                  },
                  "initProvider": {
                    "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
                    "type": "object",
                    "properties": {
                      "description": {
                        "description": "Description of the table.",
                        "type": "string"
                      },
                      "owner": {
                        "description": "Owner of the table.",
                        "type": "string"
                      },
                      "parameters": {
                        "description": "Properties associated with this table, as a list of key-value pairs.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "partitionIndex": {
                        "description": "Configuration block for a maximum of 3 partition indexes. See partition_index below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "indexName": {
                              "description": "Name of the partition index.",
                              "type": "string"
                            },
                            "keys": {
                              "description": "Keys for the partition index.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "partitionKeys": {
                        "description": "Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See partition_keys below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "comment": {
                              "description": "Free-form text comment.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the Partition Key.",
                              "type": "string"
                            },
                            "type": {
                              "description": "Datatype of data in the Partition Key.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "retention": {
                        "description": "Retention time for this table.",
                        "type": "number"
                      },
                      "storageDescriptor": {
                        "description": "Configuration block for information about the physical storage of this table. For more information, refer to the Glue Developer Guide. See storage_descriptor below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "bucketColumns": {
                              "description": "List of reducer grouping columns, clustering columns, and bucketing columns in the table.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "columns": {
                              "description": "Configuration block for columns in the table. See columns below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "comment": {
                                    "description": "Free-form text comment.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the Column.",
                                    "type": "string"
                                  },
                                  "parameters": {
                                    "description": "Key-value pairs defining properties associated with the column.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "type": {
                                    "description": "Datatype of data in the Column.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "compressed": {
                              "description": "Whether the data in the table is compressed.",
                              "type": "boolean"
                            },
                            "inputFormat": {
                              "description": "Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.",
                              "type": "string"
                            },
                            "location": {
                              "description": "Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.",
                              "type": "string"
                            },
                            "numberOfBuckets": {
                              "description": "Must be specified if the table contains any dimension columns.",
                              "type": "number"
                            },
                            "outputFormat": {
                              "description": "Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.",
                              "type": "string"
                            },
                            "parameters": {
                              "description": "User-supplied properties in key-value form.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "schemaReference": {
                              "description": "Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "schemaId": {
                                    "description": "Configuration block that contains schema identity fields. Either this or the schema_version_id has to be provided. See schema_id below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "registryName": {
                                          "description": "Name of the schema registry that contains the schema. Must be provided when schema_name is specified and conflicts with schema_arn.",
                                          "type": "string"
                                        },
                                        "schemaArn": {
                                          "description": "ARN of the schema. One of schema_arn or schema_name has to be provided.",
                                          "type": "string"
                                        },
                                        "schemaName": {
                                          "description": "Name of the schema. One of schema_arn or schema_name has to be provided.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "schemaVersionId": {
                                    "description": "Unique ID assigned to a version of the schema. Either this or the schema_id has to be provided.",
                                    "type": "string"
                                  },
                                  "schemaVersionNumber": {
                                    "description": "Version number of the schema.",
                                    "type": "number"
                                  }
                                }
                              }
                            },
                            "serDeInfo": {
                              "description": "Configuration block for serialization and deserialization (\"SerDe\") information. See ser_de_info below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name of the SerDe.",
                                    "type": "string"
                                  },
                                  "parameters": {
                                    "description": "Map of initialization parameters for the SerDe, in key-value form.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "serializationLibrary": {
                                    "description": "Usually the class that implements the SerDe. An example is org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "skewedInfo": {
                              "description": "Configuration block with information about values that appear very frequently in a column (skewed values). See skewed_info below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "skewedColumnNames": {
                                    "description": "List of names of columns that contain skewed values.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "skewedColumnValueLocationMaps": {
                                    "description": "List of values that appear so frequently as to be considered skewed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "skewedColumnValues": {
                                    "description": "Map of skewed values to the columns that contain them.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "sortColumns": {
                              "description": "Configuration block for the sort order of each bucket in the table. See sort_columns below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "column": {
                                    "description": "Name of the column.",
                                    "type": "string"
                                  },
                                  "sortOrder": {
                                    "description": "Whether the column is sorted in ascending (1) or descending order (0).",
                                    "type": "number"
                                  }
                                }
                              }
                            },
                            "storedAsSubDirectories": {
                              "description": "Whether the table data is stored in subdirectories.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "tableType": {
                        "description": "Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as ALTER TABLE and SHOW CREATE TABLE will fail if this argument is empty.",
                        "type": "string"
                      },
                      "targetTable": {
                        "description": "Configuration block of a target table for resource linking. See target_table below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the target table.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "viewExpandedText": {
                        "description": "If the table is a view, the expanded text of the view; otherwise null.",
                        "type": "string"
                      },
                      "viewOriginalText": {
                        "description": "If the table is a view, the original text of the view; otherwise null.",
                        "type": "string"
                      }
                    }
                  },
                  "managementPolicies": {
                    "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
                    "type": "array",
                    "default": [
                      "*"
                    ],
                    "items": {
                      "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
                      "type": "string",
                      "enum": [
                        "Observe",
                        "Create",
                        "Update",
                        "Delete",
                        "LateInitialize",
                        "*"
                      ]
                    }
                  },
                  "providerConfigRef": {
                    "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
                    "type": "object",
                    "default": {
                      "name": "default"
                    },
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "publishConnectionDetailsTo": {
                    "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "configRef": {
                        "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
                        "type": "object",
                        "default": {
                          "name": "default"
                        },
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "Metadata is the metadata for connection secret.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "type": {
                            "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name of the connection secret.",
                        "type": "string"
                      }
                    }
                  },
                  "writeConnectionSecretToRef": {
                    "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
                    "type": "object",
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "status": {
                "description": "CatalogTableStatus defines the observed state of CatalogTable.",
                "type": "object",
                "properties": {
                  "atProvider": {
                    "type": "object",
                    "properties": {
                      "arn": {
                        "description": "The ARN of the Glue Table.",
                        "type": "string"
                      },
                      "catalogId": {
                        "description": "ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.",
                        "type": "string"
                      },
                      "databaseName": {
                        "description": "Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.",
                        "type": "string"
                      },
                      "description": {
                        "description": "Description of the table.",
                        "type": "string"
                      },
                      "id": {
                        "description": "Catalog ID, Database name and of the name table.",
                        "type": "string"
                      },
                      "owner": {
                        "description": "Owner of the table.",
                        "type": "string"
                      },
                      "parameters": {
                        "description": "Properties associated with this table, as a list of key-value pairs.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "partitionIndex": {
                        "description": "Configuration block for a maximum of 3 partition indexes. See partition_index below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "indexName": {
                              "description": "Name of the partition index.",
                              "type": "string"
                            },
                            "indexStatus": {
                              "type": "string"
                            },
                            "keys": {
                              "description": "Keys for the partition index.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "partitionKeys": {
                        "description": "Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See partition_keys below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "comment": {
                              "description": "Free-form text comment.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the Partition Key.",
                              "type": "string"
                            },
                            "type": {
                              "description": "Datatype of data in the Partition Key.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "retention": {
                        "description": "Retention time for this table.",
                        "type": "number"
                      },
                      "storageDescriptor": {
                        "description": "Configuration block for information about the physical storage of this table. For more information, refer to the Glue Developer Guide. See storage_descriptor below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "bucketColumns": {
                              "description": "List of reducer grouping columns, clustering columns, and bucketing columns in the table.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "columns": {
                              "description": "Configuration block for columns in the table. See columns below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "comment": {
                                    "description": "Free-form text comment.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the Column.",
                                    "type": "string"
                                  },
                                  "parameters": {
                                    "description": "Key-value pairs defining properties associated with the column.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "type": {
                                    "description": "Datatype of data in the Column.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "compressed": {
                              "description": "Whether the data in the table is compressed.",
                              "type": "boolean"
                            },
                            "inputFormat": {
                              "description": "Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.",
                              "type": "string"
                            },
                            "location": {
                              "description": "Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.",
                              "type": "string"
                            },
                            "numberOfBuckets": {
                              "description": "Must be specified if the table contains any dimension columns.",
                              "type": "number"
                            },
                            "outputFormat": {
                              "description": "Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.",
                              "type": "string"
                            },
                            "parameters": {
                              "description": "User-supplied properties in key-value form.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "schemaReference": {
                              "description": "Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "schemaId": {
                                    "description": "Configuration block that contains schema identity fields. Either this or the schema_version_id has to be provided. See schema_id below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "registryName": {
                                          "description": "Name of the schema registry that contains the schema. Must be provided when schema_name is specified and conflicts with schema_arn.",
                                          "type": "string"
                                        },
                                        "schemaArn": {
                                          "description": "ARN of the schema. One of schema_arn or schema_name has to be provided.",
                                          "type": "string"
                                        },
                                        "schemaName": {
                                          "description": "Name of the schema. One of schema_arn or schema_name has to be provided.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "schemaVersionId": {
                                    "description": "Unique ID assigned to a version of the schema. Either this or the schema_id has to be provided.",
                                    "type": "string"
                                  },
                                  "schemaVersionNumber": {
                                    "description": "Version number of the schema.",
                                    "type": "number"
                                  }
                                }
                              }
                            },
                            "serDeInfo": {
                              "description": "Configuration block for serialization and deserialization (\"SerDe\") information. See ser_de_info below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name of the SerDe.",
                                    "type": "string"
                                  },
                                  "parameters": {
                                    "description": "Map of initialization parameters for the SerDe, in key-value form.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "serializationLibrary": {
                                    "description": "Usually the class that implements the SerDe. An example is org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "skewedInfo": {
                              "description": "Configuration block with information about values that appear very frequently in a column (skewed values). See skewed_info below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "skewedColumnNames": {
                                    "description": "List of names of columns that contain skewed values.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "skewedColumnValueLocationMaps": {
                                    "description": "List of values that appear so frequently as to be considered skewed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "skewedColumnValues": {
                                    "description": "Map of skewed values to the columns that contain them.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "sortColumns": {
                              "description": "Configuration block for the sort order of each bucket in the table. See sort_columns below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "column": {
                                    "description": "Name of the column.",
                                    "type": "string"
                                  },
                                  "sortOrder": {
                                    "description": "Whether the column is sorted in ascending (1) or descending order (0).",
                                    "type": "number"
                                  }
                                }
                              }
                            },
                            "storedAsSubDirectories": {
                              "description": "Whether the table data is stored in subdirectories.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "tableType": {
                        "description": "Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as ALTER TABLE and SHOW CREATE TABLE will fail if this argument is empty.",
                        "type": "string"
                      },
                      "targetTable": {
                        "description": "Configuration block of a target table for resource linking. See target_table below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "catalogId": {
                              "description": "ID of the Data Catalog in which the table resides.",
                              "type": "string"
                            },
                            "databaseName": {
                              "description": "Name of the catalog database that contains the target table.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the target table.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "viewExpandedText": {
                        "description": "If the table is a view, the expanded text of the view; otherwise null.",
                        "type": "string"
                      },
                      "viewOriginalText": {
                        "description": "If the table is a view, the original text of the view; otherwise null.",
                        "type": "string"
                      }
                    }
                  },
                  "conditions": {
                    "description": "Conditions of the resource.",
                    "type": "array",
                    "items": {
                      "description": "A Condition that may apply to a resource.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "A Reason for this condition's last transition from one status to another.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of this condition; is it currently True, False, or Unknown?",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-list-map-keys": [
                      "type"
                    ],
                    "x-kubernetes-list-type": "map"
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "READY",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
          },
          {
            "name": "SYNCED",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Synced')].status"
          },
          {
            "name": "EXTERNAL-NAME",
            "type": "string",
            "jsonPath": ".metadata.annotations.crossplane\\.io/external-name"
          },
          {
            "name": "AGE",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}