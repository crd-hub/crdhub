{
  "$schema": "http://json-schema.org/schema#",
  "description": "Crawler is the Schema for the Crawlers API. Manages a Glue Crawler",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "glue.aws.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "Crawler"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "CrawlerSpec defines the desired state of Crawler",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "catalogTarget": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "connectionName": {
                    "description": "The name of the connection to use to connect to the JDBC target.",
                    "type": "string"
                  },
                  "databaseName": {
                    "description": "Glue database where results are written.",
                    "type": "string"
                  },
                  "databaseNameRef": {
                    "description": "Reference to a CatalogDatabase in glue to populate databaseName.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "databaseNameSelector": {
                    "description": "Selector for a CatalogDatabase in glue to populate databaseName.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "dlqEventQueueArn": {
                    "description": "The ARN of the dead-letter SQS queue.",
                    "type": "string"
                  },
                  "eventQueueArn": {
                    "description": "The ARN of the SQS queue to receive S3 notifications from.",
                    "type": "string"
                  },
                  "tables": {
                    "description": "A list of catalog tables to be synchronized.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "classifiers": {
              "description": "List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "configuration": {
              "description": "JSON string of configuration information. For more details see Setting Crawler Configuration Options.",
              "type": "string"
            },
            "databaseName": {
              "description": "Glue database where results are written.",
              "type": "string"
            },
            "databaseNameRef": {
              "description": "Reference to a CatalogDatabase in glue to populate databaseName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "databaseNameSelector": {
              "description": "Selector for a CatalogDatabase in glue to populate databaseName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "deltaTarget": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "connectionName": {
                    "description": "The name of the connection to use to connect to the JDBC target.",
                    "type": "string"
                  },
                  "createNativeDeltaTable": {
                    "description": "Specifies whether the crawler will create native tables, to allow integration with query engines that support querying of the Delta transaction log directly.",
                    "type": "boolean"
                  },
                  "deltaTables": {
                    "description": "A list of the Amazon S3 paths to the Delta tables.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "writeManifest": {
                    "description": "Specifies whether to write the manifest files to the Delta table path.",
                    "type": "boolean"
                  }
                }
              }
            },
            "description": {
              "description": "Description of the crawler.",
              "type": "string"
            },
            "dynamodbTarget": {
              "description": "List of nested DynamoDB target arguments. See Dynamodb Target below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "path": {
                    "description": "The name of the DynamoDB table to crawl.",
                    "type": "string"
                  },
                  "scanAll": {
                    "description": "Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.  defaults to true.",
                    "type": "boolean"
                  },
                  "scanRate": {
                    "description": "The percentage of the configured read capacity units to use by the AWS Glue crawler. The valid values are null or a value between 0.1 to 1.5.",
                    "type": "number"
                  }
                }
              }
            },
            "jdbcTarget": {
              "description": "List of nested JBDC target arguments. See JDBC Target below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "connectionName": {
                    "description": "The name of the connection to use to connect to the JDBC target.",
                    "type": "string"
                  },
                  "connectionNameRef": {
                    "description": "Reference to a Connection in glue to populate connectionName.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "connectionNameSelector": {
                    "description": "Selector for a Connection in glue to populate connectionName.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "enableAdditionalMetadata": {
                    "description": "Specify a value of RAWTYPES or COMMENTS to enable additional metadata intable responses. RAWTYPES provides the native-level datatype. COMMENTS provides comments associated with a column or table in the database.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "exclusions": {
                    "description": "A list of glob patterns used to exclude from the crawl.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "path": {
                    "description": "The name of the DynamoDB table to crawl.",
                    "type": "string"
                  }
                }
              }
            },
            "lakeFormationConfiguration": {
              "description": "Specifies Lake Formation configuration settings for the crawler. See Lake Formation Configuration below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "accountId": {
                    "description": "Required for cross account crawls. For same account crawls as the target data, this can omitted.",
                    "type": "string"
                  },
                  "useLakeFormationCredentials": {
                    "description": "Specifies whether to use Lake Formation credentials for the crawler instead of the IAM role credentials.",
                    "type": "boolean"
                  }
                }
              }
            },
            "lineageConfiguration": {
              "description": "Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "crawlerLineageSettings": {
                    "description": "Specifies whether data lineage is enabled for the crawler. Valid values are: ENABLE and DISABLE. Default value is Disable.",
                    "type": "string"
                  }
                }
              }
            },
            "mongodbTarget": {
              "description": "List nested MongoDB target arguments. See MongoDB Target below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "connectionName": {
                    "description": "The name of the connection to use to connect to the JDBC target.",
                    "type": "string"
                  },
                  "connectionNameRef": {
                    "description": "Reference to a Connection in glue to populate connectionName.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "connectionNameSelector": {
                    "description": "Selector for a Connection in glue to populate connectionName.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "path": {
                    "description": "The name of the DynamoDB table to crawl.",
                    "type": "string"
                  },
                  "scanAll": {
                    "description": "Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.  defaults to true.",
                    "type": "boolean"
                  }
                }
              }
            },
            "recrawlPolicy": {
              "description": "A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "recrawlBehavior": {
                    "description": "Specifies whether to crawl the entire dataset again, crawl only folders that were added since the last crawler run, or crawl what S3 notifies the crawler of via SQS. Valid Values are: CRAWL_EVENT_MODE, CRAWL_EVERYTHING and CRAWL_NEW_FOLDERS_ONLY. Default value is CRAWL_EVERYTHING.",
                    "type": "string"
                  }
                }
              }
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "role": {
              "description": "The IAM role friendly name (including path without leading slash), or ARN of an IAM role, used by the crawler to access other resources.",
              "type": "string"
            },
            "roleRef": {
              "description": "Reference to a Role in iam to populate role.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "roleSelector": {
              "description": "Selector for a Role in iam to populate role.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "s3Target": {
              "description": "List nested Amazon S3 target arguments. See S3 Target below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "connectionName": {
                    "description": "The name of the connection to use to connect to the JDBC target.",
                    "type": "string"
                  },
                  "dlqEventQueueArn": {
                    "description": "The ARN of the dead-letter SQS queue.",
                    "type": "string"
                  },
                  "eventQueueArn": {
                    "description": "The ARN of the SQS queue to receive S3 notifications from.",
                    "type": "string"
                  },
                  "exclusions": {
                    "description": "A list of glob patterns used to exclude from the crawl.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "path": {
                    "description": "The name of the DynamoDB table to crawl.",
                    "type": "string"
                  },
                  "sampleSize": {
                    "description": "Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249.",
                    "type": "number"
                  }
                }
              }
            },
            "schedule": {
              "description": "Based Schedules for Jobs and Crawlers. For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *).",
              "type": "string"
            },
            "schemaChangePolicy": {
              "description": "Policy for the crawler's update and deletion behavior. See Schema Change Policy below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deleteBehavior": {
                    "description": "The deletion behavior when the crawler finds a deleted object. Valid values: LOG, DELETE_FROM_DATABASE, or DEPRECATE_IN_DATABASE. Defaults to DEPRECATE_IN_DATABASE.",
                    "type": "string"
                  },
                  "updateBehavior": {
                    "description": "The update behavior when the crawler finds a changed schema. Valid values: LOG or UPDATE_IN_DATABASE. Defaults to UPDATE_IN_DATABASE.",
                    "type": "string"
                  }
                }
              }
            },
            "securityConfiguration": {
              "description": "The name of Security Configuration to be used by the crawler",
              "type": "string"
            },
            "tablePrefix": {
              "description": "The table prefix used for catalog tables that are created.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "catalogTarget": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "connectionName": {
                    "description": "The name of the connection to use to connect to the JDBC target.",
                    "type": "string"
                  },
                  "dlqEventQueueArn": {
                    "description": "The ARN of the dead-letter SQS queue.",
                    "type": "string"
                  },
                  "eventQueueArn": {
                    "description": "The ARN of the SQS queue to receive S3 notifications from.",
                    "type": "string"
                  },
                  "tables": {
                    "description": "A list of catalog tables to be synchronized.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "classifiers": {
              "description": "List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "configuration": {
              "description": "JSON string of configuration information. For more details see Setting Crawler Configuration Options.",
              "type": "string"
            },
            "deltaTarget": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "connectionName": {
                    "description": "The name of the connection to use to connect to the JDBC target.",
                    "type": "string"
                  },
                  "createNativeDeltaTable": {
                    "description": "Specifies whether the crawler will create native tables, to allow integration with query engines that support querying of the Delta transaction log directly.",
                    "type": "boolean"
                  },
                  "deltaTables": {
                    "description": "A list of the Amazon S3 paths to the Delta tables.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "writeManifest": {
                    "description": "Specifies whether to write the manifest files to the Delta table path.",
                    "type": "boolean"
                  }
                }
              }
            },
            "description": {
              "description": "Description of the crawler.",
              "type": "string"
            },
            "dynamodbTarget": {
              "description": "List of nested DynamoDB target arguments. See Dynamodb Target below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "path": {
                    "description": "The name of the DynamoDB table to crawl.",
                    "type": "string"
                  },
                  "scanAll": {
                    "description": "Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.  defaults to true.",
                    "type": "boolean"
                  },
                  "scanRate": {
                    "description": "The percentage of the configured read capacity units to use by the AWS Glue crawler. The valid values are null or a value between 0.1 to 1.5.",
                    "type": "number"
                  }
                }
              }
            },
            "jdbcTarget": {
              "description": "List of nested JBDC target arguments. See JDBC Target below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "enableAdditionalMetadata": {
                    "description": "Specify a value of RAWTYPES or COMMENTS to enable additional metadata intable responses. RAWTYPES provides the native-level datatype. COMMENTS provides comments associated with a column or table in the database.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "exclusions": {
                    "description": "A list of glob patterns used to exclude from the crawl.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "path": {
                    "description": "The name of the DynamoDB table to crawl.",
                    "type": "string"
                  }
                }
              }
            },
            "lakeFormationConfiguration": {
              "description": "Specifies Lake Formation configuration settings for the crawler. See Lake Formation Configuration below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "accountId": {
                    "description": "Required for cross account crawls. For same account crawls as the target data, this can omitted.",
                    "type": "string"
                  },
                  "useLakeFormationCredentials": {
                    "description": "Specifies whether to use Lake Formation credentials for the crawler instead of the IAM role credentials.",
                    "type": "boolean"
                  }
                }
              }
            },
            "lineageConfiguration": {
              "description": "Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "crawlerLineageSettings": {
                    "description": "Specifies whether data lineage is enabled for the crawler. Valid values are: ENABLE and DISABLE. Default value is Disable.",
                    "type": "string"
                  }
                }
              }
            },
            "mongodbTarget": {
              "description": "List nested MongoDB target arguments. See MongoDB Target below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "path": {
                    "description": "The name of the DynamoDB table to crawl.",
                    "type": "string"
                  },
                  "scanAll": {
                    "description": "Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.  defaults to true.",
                    "type": "boolean"
                  }
                }
              }
            },
            "recrawlPolicy": {
              "description": "A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "recrawlBehavior": {
                    "description": "Specifies whether to crawl the entire dataset again, crawl only folders that were added since the last crawler run, or crawl what S3 notifies the crawler of via SQS. Valid Values are: CRAWL_EVENT_MODE, CRAWL_EVERYTHING and CRAWL_NEW_FOLDERS_ONLY. Default value is CRAWL_EVERYTHING.",
                    "type": "string"
                  }
                }
              }
            },
            "s3Target": {
              "description": "List nested Amazon S3 target arguments. See S3 Target below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "connectionName": {
                    "description": "The name of the connection to use to connect to the JDBC target.",
                    "type": "string"
                  },
                  "dlqEventQueueArn": {
                    "description": "The ARN of the dead-letter SQS queue.",
                    "type": "string"
                  },
                  "eventQueueArn": {
                    "description": "The ARN of the SQS queue to receive S3 notifications from.",
                    "type": "string"
                  },
                  "exclusions": {
                    "description": "A list of glob patterns used to exclude from the crawl.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "path": {
                    "description": "The name of the DynamoDB table to crawl.",
                    "type": "string"
                  },
                  "sampleSize": {
                    "description": "Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249.",
                    "type": "number"
                  }
                }
              }
            },
            "schedule": {
              "description": "Based Schedules for Jobs and Crawlers. For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *).",
              "type": "string"
            },
            "schemaChangePolicy": {
              "description": "Policy for the crawler's update and deletion behavior. See Schema Change Policy below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deleteBehavior": {
                    "description": "The deletion behavior when the crawler finds a deleted object. Valid values: LOG, DELETE_FROM_DATABASE, or DEPRECATE_IN_DATABASE. Defaults to DEPRECATE_IN_DATABASE.",
                    "type": "string"
                  },
                  "updateBehavior": {
                    "description": "The update behavior when the crawler finds a changed schema. Valid values: LOG or UPDATE_IN_DATABASE. Defaults to UPDATE_IN_DATABASE.",
                    "type": "string"
                  }
                }
              }
            },
            "securityConfiguration": {
              "description": "The name of Security Configuration to be used by the crawler",
              "type": "string"
            },
            "tablePrefix": {
              "description": "The table prefix used for catalog tables that are created.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      }
    }
  }
}