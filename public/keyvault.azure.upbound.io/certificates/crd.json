{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "certificates.keyvault.azure.upbound.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.13.0"
    }
  },
  "spec": {
    "group": "keyvault.azure.upbound.io",
    "names": {
      "plural": "certificates",
      "singular": "certificate",
      "kind": "Certificate",
      "listKind": "CertificateList",
      "categories": [
        "crossplane",
        "managed",
        "azure"
      ]
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "Certificate is the Schema for the Certificates API. Manages a Key Vault Certificate.",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "CertificateSpec defines the desired state of Certificate",
                "type": "object",
                "required": [
                  "forProvider"
                ],
                "properties": {
                  "deletionPolicy": {
                    "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
                    "type": "string",
                    "default": "Delete",
                    "enum": [
                      "Orphan",
                      "Delete"
                    ]
                  },
                  "forProvider": {
                    "type": "object",
                    "properties": {
                      "certificate": {
                        "description": "A certificate block as defined below, used to Import an existing certificate.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "contentsSecretRef"
                          ],
                          "properties": {
                            "contentsSecretRef": {
                              "description": "The base64-encoded certificate contents.",
                              "type": "object",
                              "required": [
                                "key",
                                "name",
                                "namespace"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key to select.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the secret.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace of the secret.",
                                  "type": "string"
                                }
                              }
                            },
                            "passwordSecretRef": {
                              "description": "The password associated with the certificate.",
                              "type": "object",
                              "required": [
                                "key",
                                "name",
                                "namespace"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key to select.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the secret.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace of the secret.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      "certificatePolicy": {
                        "description": "A certificate_policy block as defined below. Changing this forces a new resource to be created.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "issuerParameters": {
                              "description": "A issuer_parameters block as defined below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "The name of the Certificate Issuer. Possible values include Self (for self-signed certificate), or Unknown (for a certificate issuing authority like Let's Encrypt and Azure direct supported ones). Changing this forces a new resource to be created.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "keyProperties": {
                              "description": "A key_properties block as defined below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "curve": {
                                    "description": "Specifies the curve to use when creating an EC key. Possible values are P-256, P-256K, P-384, and P-521. This field will be required in a future release if key_type is EC or EC-HSM. Changing this forces a new resource to be created.",
                                    "type": "string"
                                  },
                                  "exportable": {
                                    "description": "Is this certificate exportable? Changing this forces a new resource to be created.",
                                    "type": "boolean"
                                  },
                                  "keySize": {
                                    "description": "The size of the key used in the certificate. Possible values include 2048, 3072, and 4096 for RSA keys, or 256, 384, and 521 for EC keys. This property is required when using RSA keys. Changing this forces a new resource to be created.",
                                    "type": "number"
                                  },
                                  "keyType": {
                                    "description": "Specifies the type of key. Possible values are EC, EC-HSM, RSA, RSA-HSM and oct. Changing this forces a new resource to be created.",
                                    "type": "string"
                                  },
                                  "reuseKey": {
                                    "description": "Is the key reusable? Changing this forces a new resource to be created.",
                                    "type": "boolean"
                                  }
                                }
                              }
                            },
                            "lifetimeAction": {
                              "description": "A lifetime_action block as defined below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "action": {
                                    "description": "A action block as defined below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "actionType": {
                                          "description": "The Type of action to be performed when the lifetime trigger is triggerec. Possible values include AutoRenew and EmailContacts. Changing this forces a new resource to be created.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "trigger": {
                                    "description": "A trigger block as defined below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "daysBeforeExpiry": {
                                          "description": "The number of days before the Certificate expires that the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with lifetime_percentage.",
                                          "type": "number"
                                        },
                                        "lifetimePercentage": {
                                          "description": "The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with days_before_expiry.",
                                          "type": "number"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "secretProperties": {
                              "description": "A secret_properties block as defined below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "contentType": {
                                    "description": "The Content-Type of the Certificate, such as application/x-pkcs12 for a PFX or application/x-pem-file for a PEM. Changing this forces a new resource to be created.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "x509CertificateProperties": {
                              "description": "A x509_certificate_properties block as defined below. Required when certificate block is not specified.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "extendedKeyUsage": {
                                    "description": "A list of Extended/Enhanced Key Usages. Changing this forces a new resource to be created.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "keyUsage": {
                                    "description": "A list of uses associated with this Key. Possible values include cRLSign, dataEncipherment, decipherOnly, digitalSignature, encipherOnly, keyAgreement, keyCertSign, keyEncipherment and nonRepudiation and are case-sensitive. Changing this forces a new resource to be created.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "subject": {
                                    "description": "The Certificate's Subject. Changing this forces a new resource to be created.",
                                    "type": "string"
                                  },
                                  "subjectAlternativeNames": {
                                    "description": "A subject_alternative_names block as defined below. Changing this forces a new resource to be created.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "dnsNames": {
                                          "description": "A list of alternative DNS names (FQDNs) identified by the Certificate. Changing this forces a new resource to be created.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "emails": {
                                          "description": "A list of email addresses identified by this Certificate. Changing this forces a new resource to be created.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "upns": {
                                          "description": "A list of User Principal Names identified by the Certificate. Changing this forces a new resource to be created.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "validityInMonths": {
                                    "description": "The Certificates Validity Period in Months. Changing this forces a new resource to be created.",
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "keyVaultId": {
                        "description": "The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "keyVaultIdRef": {
                        "description": "Reference to a Vault to populate keyVaultId.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "keyVaultIdSelector": {
                        "description": "Selector for a Vault to populate keyVaultId.",
                        "type": "object",
                        "properties": {
                          "matchControllerRef": {
                            "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                            "type": "boolean"
                          },
                          "matchLabels": {
                            "description": "MatchLabels ensures an object with matching labels is selected.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "policy": {
                            "description": "Policies for selection.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "name": {
                        "description": "Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "tags": {
                        "description": "A mapping of tags to assign to the resource.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "initProvider": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
                    "type": "object",
                    "properties": {
                      "certificate": {
                        "description": "A certificate block as defined below, used to Import an existing certificate.",
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "certificatePolicy": {
                        "description": "A certificate_policy block as defined below. Changing this forces a new resource to be created.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "issuerParameters": {
                              "description": "A issuer_parameters block as defined below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "The name of the Certificate Issuer. Possible values include Self (for self-signed certificate), or Unknown (for a certificate issuing authority like Let's Encrypt and Azure direct supported ones). Changing this forces a new resource to be created.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "keyProperties": {
                              "description": "A key_properties block as defined below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "curve": {
                                    "description": "Specifies the curve to use when creating an EC key. Possible values are P-256, P-256K, P-384, and P-521. This field will be required in a future release if key_type is EC or EC-HSM. Changing this forces a new resource to be created.",
                                    "type": "string"
                                  },
                                  "exportable": {
                                    "description": "Is this certificate exportable? Changing this forces a new resource to be created.",
                                    "type": "boolean"
                                  },
                                  "keySize": {
                                    "description": "The size of the key used in the certificate. Possible values include 2048, 3072, and 4096 for RSA keys, or 256, 384, and 521 for EC keys. This property is required when using RSA keys. Changing this forces a new resource to be created.",
                                    "type": "number"
                                  },
                                  "keyType": {
                                    "description": "Specifies the type of key. Possible values are EC, EC-HSM, RSA, RSA-HSM and oct. Changing this forces a new resource to be created.",
                                    "type": "string"
                                  },
                                  "reuseKey": {
                                    "description": "Is the key reusable? Changing this forces a new resource to be created.",
                                    "type": "boolean"
                                  }
                                }
                              }
                            },
                            "lifetimeAction": {
                              "description": "A lifetime_action block as defined below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "action": {
                                    "description": "A action block as defined below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "actionType": {
                                          "description": "The Type of action to be performed when the lifetime trigger is triggerec. Possible values include AutoRenew and EmailContacts. Changing this forces a new resource to be created.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "trigger": {
                                    "description": "A trigger block as defined below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "daysBeforeExpiry": {
                                          "description": "The number of days before the Certificate expires that the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with lifetime_percentage.",
                                          "type": "number"
                                        },
                                        "lifetimePercentage": {
                                          "description": "The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with days_before_expiry.",
                                          "type": "number"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "secretProperties": {
                              "description": "A secret_properties block as defined below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "contentType": {
                                    "description": "The Content-Type of the Certificate, such as application/x-pkcs12 for a PFX or application/x-pem-file for a PEM. Changing this forces a new resource to be created.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "x509CertificateProperties": {
                              "description": "A x509_certificate_properties block as defined below. Required when certificate block is not specified.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "extendedKeyUsage": {
                                    "description": "A list of Extended/Enhanced Key Usages. Changing this forces a new resource to be created.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "keyUsage": {
                                    "description": "A list of uses associated with this Key. Possible values include cRLSign, dataEncipherment, decipherOnly, digitalSignature, encipherOnly, keyAgreement, keyCertSign, keyEncipherment and nonRepudiation and are case-sensitive. Changing this forces a new resource to be created.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "subject": {
                                    "description": "The Certificate's Subject. Changing this forces a new resource to be created.",
                                    "type": "string"
                                  },
                                  "subjectAlternativeNames": {
                                    "description": "A subject_alternative_names block as defined below. Changing this forces a new resource to be created.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "dnsNames": {
                                          "description": "A list of alternative DNS names (FQDNs) identified by the Certificate. Changing this forces a new resource to be created.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "emails": {
                                          "description": "A list of email addresses identified by this Certificate. Changing this forces a new resource to be created.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "upns": {
                                          "description": "A list of User Principal Names identified by the Certificate. Changing this forces a new resource to be created.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "validityInMonths": {
                                    "description": "The Certificates Validity Period in Months. Changing this forces a new resource to be created.",
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "name": {
                        "description": "Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "tags": {
                        "description": "A mapping of tags to assign to the resource.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "managementPolicies": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
                    "type": "array",
                    "default": [
                      "*"
                    ],
                    "items": {
                      "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
                      "type": "string",
                      "enum": [
                        "Observe",
                        "Create",
                        "Update",
                        "Delete",
                        "LateInitialize",
                        "*"
                      ]
                    }
                  },
                  "providerConfigRef": {
                    "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
                    "type": "object",
                    "default": {
                      "name": "default"
                    },
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "publishConnectionDetailsTo": {
                    "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "configRef": {
                        "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
                        "type": "object",
                        "default": {
                          "name": "default"
                        },
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "Metadata is the metadata for connection secret.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "type": {
                            "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name of the connection secret.",
                        "type": "string"
                      }
                    }
                  },
                  "writeConnectionSecretToRef": {
                    "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
                    "type": "object",
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  }
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
                    "message": "spec.forProvider.name is a required parameter"
                  }
                ]
              },
              "status": {
                "description": "CertificateStatus defines the observed state of Certificate.",
                "type": "object",
                "properties": {
                  "atProvider": {
                    "type": "object",
                    "properties": {
                      "certificate": {
                        "description": "A certificate block as defined below, used to Import an existing certificate.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "contentsSecretRef"
                          ],
                          "properties": {
                            "contentsSecretRef": {
                              "description": "The base64-encoded certificate contents.",
                              "type": "object",
                              "required": [
                                "key",
                                "name",
                                "namespace"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key to select.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the secret.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace of the secret.",
                                  "type": "string"
                                }
                              }
                            },
                            "passwordSecretRef": {
                              "description": "The password associated with the certificate.",
                              "type": "object",
                              "required": [
                                "key",
                                "name",
                                "namespace"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key to select.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the secret.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace of the secret.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      "certificateAttribute": {
                        "description": "A certificate_attribute block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "description": "The create time of the Key Vault Certificate.",
                              "type": "string"
                            },
                            "enabled": {
                              "description": "whether the Key Vault Certificate is enabled.",
                              "type": "boolean"
                            },
                            "expires": {
                              "description": "The expires time of the Key Vault Certificate.",
                              "type": "string"
                            },
                            "notBefore": {
                              "description": "The not before valid time of the Key Vault Certificate.",
                              "type": "string"
                            },
                            "recoveryLevel": {
                              "description": "The deletion recovery level of the Key Vault Certificate.",
                              "type": "string"
                            },
                            "updated": {
                              "description": "The recent update time of the Key Vault Certificate.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "certificateData": {
                        "description": "The raw Key Vault Certificate data represented as a hexadecimal string.",
                        "type": "string"
                      },
                      "certificateDataBase64": {
                        "description": "The Base64 encoded Key Vault Certificate data.",
                        "type": "string"
                      },
                      "certificatePolicy": {
                        "description": "A certificate_policy block as defined below. Changing this forces a new resource to be created.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "issuerParameters": {
                              "description": "A issuer_parameters block as defined below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "The name of the Certificate Issuer. Possible values include Self (for self-signed certificate), or Unknown (for a certificate issuing authority like Let's Encrypt and Azure direct supported ones). Changing this forces a new resource to be created.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "keyProperties": {
                              "description": "A key_properties block as defined below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "curve": {
                                    "description": "Specifies the curve to use when creating an EC key. Possible values are P-256, P-256K, P-384, and P-521. This field will be required in a future release if key_type is EC or EC-HSM. Changing this forces a new resource to be created.",
                                    "type": "string"
                                  },
                                  "exportable": {
                                    "description": "Is this certificate exportable? Changing this forces a new resource to be created.",
                                    "type": "boolean"
                                  },
                                  "keySize": {
                                    "description": "The size of the key used in the certificate. Possible values include 2048, 3072, and 4096 for RSA keys, or 256, 384, and 521 for EC keys. This property is required when using RSA keys. Changing this forces a new resource to be created.",
                                    "type": "number"
                                  },
                                  "keyType": {
                                    "description": "Specifies the type of key. Possible values are EC, EC-HSM, RSA, RSA-HSM and oct. Changing this forces a new resource to be created.",
                                    "type": "string"
                                  },
                                  "reuseKey": {
                                    "description": "Is the key reusable? Changing this forces a new resource to be created.",
                                    "type": "boolean"
                                  }
                                }
                              }
                            },
                            "lifetimeAction": {
                              "description": "A lifetime_action block as defined below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "action": {
                                    "description": "A action block as defined below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "actionType": {
                                          "description": "The Type of action to be performed when the lifetime trigger is triggerec. Possible values include AutoRenew and EmailContacts. Changing this forces a new resource to be created.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "trigger": {
                                    "description": "A trigger block as defined below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "daysBeforeExpiry": {
                                          "description": "The number of days before the Certificate expires that the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with lifetime_percentage.",
                                          "type": "number"
                                        },
                                        "lifetimePercentage": {
                                          "description": "The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with days_before_expiry.",
                                          "type": "number"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "secretProperties": {
                              "description": "A secret_properties block as defined below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "contentType": {
                                    "description": "The Content-Type of the Certificate, such as application/x-pkcs12 for a PFX or application/x-pem-file for a PEM. Changing this forces a new resource to be created.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "x509CertificateProperties": {
                              "description": "A x509_certificate_properties block as defined below. Required when certificate block is not specified.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "extendedKeyUsage": {
                                    "description": "A list of Extended/Enhanced Key Usages. Changing this forces a new resource to be created.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "keyUsage": {
                                    "description": "A list of uses associated with this Key. Possible values include cRLSign, dataEncipherment, decipherOnly, digitalSignature, encipherOnly, keyAgreement, keyCertSign, keyEncipherment and nonRepudiation and are case-sensitive. Changing this forces a new resource to be created.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "subject": {
                                    "description": "The Certificate's Subject. Changing this forces a new resource to be created.",
                                    "type": "string"
                                  },
                                  "subjectAlternativeNames": {
                                    "description": "A subject_alternative_names block as defined below. Changing this forces a new resource to be created.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "dnsNames": {
                                          "description": "A list of alternative DNS names (FQDNs) identified by the Certificate. Changing this forces a new resource to be created.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "emails": {
                                          "description": "A list of email addresses identified by this Certificate. Changing this forces a new resource to be created.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "upns": {
                                          "description": "A list of User Principal Names identified by the Certificate. Changing this forces a new resource to be created.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "validityInMonths": {
                                    "description": "The Certificates Validity Period in Months. Changing this forces a new resource to be created.",
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "id": {
                        "description": "The Key Vault Certificate ID.",
                        "type": "string"
                      },
                      "keyVaultId": {
                        "description": "The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "resourceManagerId": {
                        "description": "The (Versioned) ID for this Key Vault Certificate. This property points to a specific version of a Key Vault Certificate, as such using this won't auto-rotate values if used in other Azure Services.",
                        "type": "string"
                      },
                      "resourceManagerVersionlessId": {
                        "description": "The Versionless ID of the Key Vault Certificate. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Certificate is updated.",
                        "type": "string"
                      },
                      "secretId": {
                        "description": "The ID of the associated Key Vault Secret.",
                        "type": "string"
                      },
                      "tags": {
                        "description": "A mapping of tags to assign to the resource.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "thumbprint": {
                        "description": "The X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.",
                        "type": "string"
                      },
                      "version": {
                        "description": "The current version of the Key Vault Certificate.",
                        "type": "string"
                      },
                      "versionlessId": {
                        "description": "The Base ID of the Key Vault Certificate.",
                        "type": "string"
                      },
                      "versionlessSecretId": {
                        "description": "The Base ID of the Key Vault Secret.",
                        "type": "string"
                      }
                    }
                  },
                  "conditions": {
                    "description": "Conditions of the resource.",
                    "type": "array",
                    "items": {
                      "description": "A Condition that may apply to a resource.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "A Reason for this condition's last transition from one status to another.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of this condition; is it currently True, False, or Unknown?",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "READY",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
          },
          {
            "name": "SYNCED",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Synced')].status"
          },
          {
            "name": "EXTERNAL-NAME",
            "type": "string",
            "jsonPath": ".metadata.annotations.crossplane\\.io/external-name"
          },
          {
            "name": "AGE",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}