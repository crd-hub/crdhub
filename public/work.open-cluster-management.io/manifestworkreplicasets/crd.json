{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "manifestworkreplicasets.work.open-cluster-management.io",
    "creationTimestamp": null
  },
  "spec": {
    "group": "work.open-cluster-management.io",
    "names": {
      "plural": "manifestworkreplicasets",
      "singular": "manifestworkreplicaset",
      "shortNames": [
        "mwrs"
      ],
      "kind": "ManifestWorkReplicaSet",
      "listKind": "ManifestWorkReplicaSetList"
    },
    "scope": "Namespaced",
    "versions": [
      {
        "name": "v1alpha1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "ManifestWorkReplicaSet is the Schema for the ManifestWorkReplicaSet API. This custom resource is able to apply\nManifestWork using Placement for 0..n ManagedCluster(in their namespaces). It will also remove the ManifestWork custom resources\nwhen deleted. Lastly the specific ManifestWork custom resources created per ManagedCluster namespace will be adjusted based on PlacementDecision\nchanges.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "Spec reperesents the desired ManifestWork payload and Placement reference to be reconciled",
                "type": "object",
                "required": [
                  "placementRefs"
                ],
                "properties": {
                  "manifestWorkTemplate": {
                    "description": "ManifestWorkTemplate is the ManifestWorkSpec that will be used to generate a per-cluster ManifestWork",
                    "type": "object",
                    "properties": {
                      "deleteOption": {
                        "description": "DeleteOption represents deletion strategy when the manifestwork is deleted.\nForeground deletion strategy is applied to all the resource in this manifestwork if it is not set.",
                        "type": "object",
                        "properties": {
                          "propagationPolicy": {
                            "description": "propagationPolicy can be Foreground, Orphan or SelectivelyOrphan\nSelectivelyOrphan should be rarely used.  It is provided for cases where particular resources is transfering\nownership from one ManifestWork to another or another management unit.\nSetting this value will allow a flow like\n1. create manifestwork/2 to manage foo\n2. update manifestwork/1 to selectively orphan foo\n3. remove foo from manifestwork/1 without impacting continuity because manifestwork/2 adopts it.",
                            "type": "string",
                            "default": "Foreground",
                            "enum": [
                              "Foreground",
                              "Orphan",
                              "SelectivelyOrphan"
                            ]
                          },
                          "selectivelyOrphans": {
                            "description": "selectivelyOrphan represents a list of resources following orphan deletion stratecy",
                            "type": "object",
                            "properties": {
                              "orphaningRules": {
                                "description": "orphaningRules defines a slice of orphaningrule.\nEach orphaningrule identifies a single resource included in this manifestwork",
                                "type": "array",
                                "items": {
                                  "description": "OrphaningRule identifies a single resource included in this manifestwork to be orphaned",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "resource"
                                  ],
                                  "properties": {
                                    "group": {
                                      "description": "Group is the API Group of the Kubernetes resource,\nempty string indicates it is in core group.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name is the name of the Kubernetes resource.",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Name is the namespace of the Kubernetes resource, empty string indicates\nit is a cluster scoped resource.",
                                      "type": "string"
                                    },
                                    "resource": {
                                      "description": "Resource is the resource name of the Kubernetes resource.",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "executor": {
                        "description": "Executor is the configuration that makes the work agent to perform some pre-request processing/checking.\ne.g. the executor identity tells the work agent to check the executor has sufficient permission to write\nthe workloads to the local managed cluster.\nNote that nil executor is still supported for backward-compatibility which indicates that the work agent\nwill not perform any additional actions before applying resources.",
                        "type": "object",
                        "properties": {
                          "subject": {
                            "description": "Subject is the subject identity which the work agent uses to talk to the\nlocal cluster when applying the resources.",
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "serviceAccount": {
                                "description": "ServiceAccount is for identifying which service account to use by the work agent.\nOnly required if the type is \"ServiceAccount\".",
                                "type": "object",
                                "required": [
                                  "name",
                                  "namespace"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name is the name of the service account.",
                                    "type": "string",
                                    "maxLength": 253,
                                    "minLength": 1,
                                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)$"
                                  },
                                  "namespace": {
                                    "description": "Namespace is the namespace of the service account.",
                                    "type": "string",
                                    "maxLength": 253,
                                    "minLength": 1,
                                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)$"
                                  }
                                }
                              },
                              "type": {
                                "description": "Type is the type of the subject identity.\nSupported types are: \"ServiceAccount\".",
                                "type": "string",
                                "enum": [
                                  "ServiceAccount"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "manifestConfigs": {
                        "description": "ManifestConfigs represents the configurations of manifests defined in workload field.",
                        "type": "array",
                        "items": {
                          "description": "ManifestConfigOption represents the configurations of a manifest defined in workload field.",
                          "type": "object",
                          "required": [
                            "resourceIdentifier"
                          ],
                          "properties": {
                            "feedbackRules": {
                              "description": "FeedbackRules defines what resource status field should be returned. If it is not set or empty,\nno feedback rules will be honored.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "required": [
                                  "type"
                                ],
                                "properties": {
                                  "jsonPaths": {
                                    "description": "JsonPaths defines the json path under status field to be synced.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "name",
                                        "path"
                                      ],
                                      "properties": {
                                        "name": {
                                          "description": "Name represents the alias name for this field",
                                          "type": "string"
                                        },
                                        "path": {
                                          "description": "Path represents the json path of the field under status.\nThe path must point to a field with single value in the type of integer, bool or string.\nIf the path points to a non-existing field, no value will be returned.\nIf the path points to a structure, map or slice, no value will be returned and the status conddition\nof StatusFeedBackSynced will be set as false.\nRef to https://kubernetes.io/docs/reference/kubectl/jsonpath/ on how to write a jsonPath.",
                                          "type": "string"
                                        },
                                        "version": {
                                          "description": "Version is the version of the Kubernetes resource.\nIf it is not specified, the resource with the semantically latest version is\nused to resolve the path.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "type": {
                                    "description": "Type defines the option of how status can be returned.\nIt can be jsonPaths or wellKnownStatus.\nIf the type is JSONPaths, user should specify the jsonPaths field\nIf the type is WellKnownStatus, certain common fields of status defined by a rule only\nfor types in in k8s.io/api and open-cluster-management/api will be reported,\nIf these status fields do not exist, no values will be reported.",
                                    "type": "string",
                                    "enum": [
                                      "WellKnownStatus",
                                      "JSONPaths"
                                    ]
                                  }
                                }
                              }
                            },
                            "resourceIdentifier": {
                              "description": "ResourceIdentifier represents the group, resource, name and namespace of a resoure.\niff this refers to a resource not created by this manifest work, the related rules will not be executed.",
                              "type": "object",
                              "required": [
                                "name",
                                "resource"
                              ],
                              "properties": {
                                "group": {
                                  "description": "Group is the API Group of the Kubernetes resource,\nempty string indicates it is in core group.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name is the name of the Kubernetes resource.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Name is the namespace of the Kubernetes resource, empty string indicates\nit is a cluster scoped resource.",
                                  "type": "string"
                                },
                                "resource": {
                                  "description": "Resource is the resource name of the Kubernetes resource.",
                                  "type": "string"
                                }
                              }
                            },
                            "updateStrategy": {
                              "description": "UpdateStrategy defines the strategy to update this manifest. UpdateStrategy is Update\nif it is not set.",
                              "type": "object",
                              "required": [
                                "type"
                              ],
                              "properties": {
                                "serverSideApply": {
                                  "description": "serverSideApply defines the configuration for server side apply. It is honored only when\ntype of updateStrategy is ServerSideApply",
                                  "type": "object",
                                  "properties": {
                                    "fieldManager": {
                                      "description": "FieldManager is the manager to apply the resource. It is work-agent by default, but can be other name with work-agent\nas the prefix.",
                                      "type": "string",
                                      "default": "work-agent",
                                      "pattern": "^work-agent"
                                    },
                                    "force": {
                                      "description": "Force represents to force apply the manifest.",
                                      "type": "boolean"
                                    }
                                  }
                                },
                                "type": {
                                  "description": "type defines the strategy to update this manifest, default value is Update.\nUpdate type means to update resource by an update call.\nCreateOnly type means do not update resource based on current manifest.\nServerSideApply type means to update resource using server side apply with work-controller as the field manager.\nIf there is conflict, the related Applied condition of manifest will be in the status of False with the\nreason of ApplyConflict.\nReadOnly type means the agent will only check the existence of the resource based on its metadata,\nstatusFeedBackRules can still be used to get feedbackResults.",
                                  "type": "string",
                                  "default": "Update",
                                  "enum": [
                                    "Update",
                                    "CreateOnly",
                                    "ServerSideApply",
                                    "ReadOnly"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      },
                      "workload": {
                        "description": "Workload represents the manifest workload to be deployed on a managed cluster.",
                        "type": "object",
                        "properties": {
                          "manifests": {
                            "description": "Manifests represents a list of kuberenetes resources to be deployed on a managed cluster.",
                            "type": "array",
                            "items": {
                              "description": "Manifest represents a resource to be deployed on managed cluster.",
                              "type": "object",
                              "x-kubernetes-preserve-unknown-fields": true,
                              "x-kubernetes-embedded-resource": true
                            }
                          }
                        }
                      }
                    }
                  },
                  "placementRefs": {
                    "description": "PacementRefs is a list of the names of the Placement resource, from which a PlacementDecision will be found and used\nto distribute the ManifestWork.",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "description": "localPlacementReference is the name of a Placement resource in current namespace",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the Placement resource in the current namespace",
                          "type": "string",
                          "minLength": 1
                        },
                        "rolloutStrategy": {
                          "description": "Rollout strategy to apply workload to the selected clusters by Placement and DecisionStrategy.",
                          "type": "object",
                          "default": {
                            "all": {
                              "progressDeadline": "None"
                            },
                            "type": "All"
                          },
                          "properties": {
                            "all": {
                              "description": "All defines required fields for RolloutStrategy type All",
                              "type": "object",
                              "properties": {
                                "maxFailures": {
                                  "description": "MaxFailures is a percentage or number of clusters in the current rollout that can fail before\nproceeding to the next rollout. Fail means the cluster has a failed status or timeout status\n(does not reach successful status after ProgressDeadline).\nOnce the MaxFailures is breached, the rollout will stop.\nMaxFailures is only considered for rollout types Progressive and ProgressivePerGroup. For\nProgressive, this is considered over the total number of clusters. For ProgressivePerGroup,\nthis is considered according to the size of the current group. For both Progressive and\nProgressivePerGroup, the MaxFailures does not apply for MandatoryDecisionGroups, which tolerate\nno failures.\nDefault is that no failures are tolerated.",
                                  "default": 0,
                                  "pattern": "^((100|[0-9]{1,2})%|[0-9]+)$",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "minSuccessTime": {
                                  "description": "MinSuccessTime is a \"soak\" time. In other words, the minimum amount of time the workload\napplier controller will wait from the start of each rollout before proceeding (assuming a\nsuccessful state has been reached and MaxFailures wasn't breached).\nMinSuccessTime is only considered for rollout types Progressive and ProgressivePerGroup.\nThe default value is 0 meaning the workload applier proceeds immediately after a successful\nstate is reached.\nMinSuccessTime must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
                                  "type": "string",
                                  "default": "0"
                                },
                                "progressDeadline": {
                                  "description": "ProgressDeadline defines how long workload applier controller will wait for the workload to\nreach a successful state in the cluster.\nIf the workload does not reach a successful state after ProgressDeadline, will stop waiting\nand workload will be treated as \"timeout\" and be counted into MaxFailures. Once the MaxFailures\nis breached, the rollout will stop.\nProgressDeadline default value is \"None\", meaning the workload applier will wait for a\nsuccessful state indefinitely.\nProgressDeadline must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
                                  "type": "string",
                                  "default": "None",
                                  "pattern": "^(([0-9])+[h|m|s])|None$"
                                }
                              }
                            },
                            "progressive": {
                              "description": "Progressive defines required fields for RolloutStrategy type Progressive",
                              "type": "object",
                              "properties": {
                                "mandatoryDecisionGroups": {
                                  "description": "List of the decision groups names or indexes to apply the workload first and fail if workload\ndid not reach successful state.\nGroupName or GroupIndex must match with the decisionGroups defined in the placement's\ndecisionStrategy",
                                  "type": "array",
                                  "items": {
                                    "description": "MandatoryDecisionGroup set the decision group name or group index.\nGroupName is considered first to select the decisionGroups then GroupIndex.",
                                    "type": "object",
                                    "properties": {
                                      "groupIndex": {
                                        "description": "GroupIndex of the decision group should match the placementDecisions label value with label key\ncluster.open-cluster-management.io/decision-group-index",
                                        "type": "integer",
                                        "format": "int32"
                                      },
                                      "groupName": {
                                        "description": "GroupName of the decision group should match the placementDecisions label value with label key\ncluster.open-cluster-management.io/decision-group-name",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "maxConcurrency": {
                                  "description": "MaxConcurrency is the max number of clusters to deploy workload concurrently. The default value\nfor MaxConcurrency is determined from the clustersPerDecisionGroup defined in the\nplacement-\u003eDecisionStrategy.",
                                  "pattern": "^((100|[0-9]{1,2})%|[0-9]+)$",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "maxFailures": {
                                  "description": "MaxFailures is a percentage or number of clusters in the current rollout that can fail before\nproceeding to the next rollout. Fail means the cluster has a failed status or timeout status\n(does not reach successful status after ProgressDeadline).\nOnce the MaxFailures is breached, the rollout will stop.\nMaxFailures is only considered for rollout types Progressive and ProgressivePerGroup. For\nProgressive, this is considered over the total number of clusters. For ProgressivePerGroup,\nthis is considered according to the size of the current group. For both Progressive and\nProgressivePerGroup, the MaxFailures does not apply for MandatoryDecisionGroups, which tolerate\nno failures.\nDefault is that no failures are tolerated.",
                                  "default": 0,
                                  "pattern": "^((100|[0-9]{1,2})%|[0-9]+)$",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "minSuccessTime": {
                                  "description": "MinSuccessTime is a \"soak\" time. In other words, the minimum amount of time the workload\napplier controller will wait from the start of each rollout before proceeding (assuming a\nsuccessful state has been reached and MaxFailures wasn't breached).\nMinSuccessTime is only considered for rollout types Progressive and ProgressivePerGroup.\nThe default value is 0 meaning the workload applier proceeds immediately after a successful\nstate is reached.\nMinSuccessTime must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
                                  "type": "string",
                                  "default": "0"
                                },
                                "progressDeadline": {
                                  "description": "ProgressDeadline defines how long workload applier controller will wait for the workload to\nreach a successful state in the cluster.\nIf the workload does not reach a successful state after ProgressDeadline, will stop waiting\nand workload will be treated as \"timeout\" and be counted into MaxFailures. Once the MaxFailures\nis breached, the rollout will stop.\nProgressDeadline default value is \"None\", meaning the workload applier will wait for a\nsuccessful state indefinitely.\nProgressDeadline must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
                                  "type": "string",
                                  "default": "None",
                                  "pattern": "^(([0-9])+[h|m|s])|None$"
                                }
                              }
                            },
                            "progressivePerGroup": {
                              "description": "ProgressivePerGroup defines required fields for RolloutStrategy type ProgressivePerGroup",
                              "type": "object",
                              "properties": {
                                "mandatoryDecisionGroups": {
                                  "description": "List of the decision groups names or indexes to apply the workload first and fail if workload\ndid not reach successful state.\nGroupName or GroupIndex must match with the decisionGroups defined in the placement's\ndecisionStrategy",
                                  "type": "array",
                                  "items": {
                                    "description": "MandatoryDecisionGroup set the decision group name or group index.\nGroupName is considered first to select the decisionGroups then GroupIndex.",
                                    "type": "object",
                                    "properties": {
                                      "groupIndex": {
                                        "description": "GroupIndex of the decision group should match the placementDecisions label value with label key\ncluster.open-cluster-management.io/decision-group-index",
                                        "type": "integer",
                                        "format": "int32"
                                      },
                                      "groupName": {
                                        "description": "GroupName of the decision group should match the placementDecisions label value with label key\ncluster.open-cluster-management.io/decision-group-name",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "maxFailures": {
                                  "description": "MaxFailures is a percentage or number of clusters in the current rollout that can fail before\nproceeding to the next rollout. Fail means the cluster has a failed status or timeout status\n(does not reach successful status after ProgressDeadline).\nOnce the MaxFailures is breached, the rollout will stop.\nMaxFailures is only considered for rollout types Progressive and ProgressivePerGroup. For\nProgressive, this is considered over the total number of clusters. For ProgressivePerGroup,\nthis is considered according to the size of the current group. For both Progressive and\nProgressivePerGroup, the MaxFailures does not apply for MandatoryDecisionGroups, which tolerate\nno failures.\nDefault is that no failures are tolerated.",
                                  "default": 0,
                                  "pattern": "^((100|[0-9]{1,2})%|[0-9]+)$",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "minSuccessTime": {
                                  "description": "MinSuccessTime is a \"soak\" time. In other words, the minimum amount of time the workload\napplier controller will wait from the start of each rollout before proceeding (assuming a\nsuccessful state has been reached and MaxFailures wasn't breached).\nMinSuccessTime is only considered for rollout types Progressive and ProgressivePerGroup.\nThe default value is 0 meaning the workload applier proceeds immediately after a successful\nstate is reached.\nMinSuccessTime must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
                                  "type": "string",
                                  "default": "0"
                                },
                                "progressDeadline": {
                                  "description": "ProgressDeadline defines how long workload applier controller will wait for the workload to\nreach a successful state in the cluster.\nIf the workload does not reach a successful state after ProgressDeadline, will stop waiting\nand workload will be treated as \"timeout\" and be counted into MaxFailures. Once the MaxFailures\nis breached, the rollout will stop.\nProgressDeadline default value is \"None\", meaning the workload applier will wait for a\nsuccessful state indefinitely.\nProgressDeadline must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
                                  "type": "string",
                                  "default": "None",
                                  "pattern": "^(([0-9])+[h|m|s])|None$"
                                }
                              }
                            },
                            "type": {
                              "type": "string",
                              "default": "All",
                              "enum": [
                                "All",
                                "Progressive",
                                "ProgressivePerGroup"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "status": {
                "description": "Status represent the current status of Placing ManifestWork resources",
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "Conditions contains the different condition statuses for distrbution of ManifestWork resources\nValid condition types are:\n1. AppliedManifestWorks represents ManifestWorks have been distributed as per placement All, Partial, None, Problem\n2. PlacementRefValid",
                    "type": "array",
                    "items": {
                      "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "message",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                          "type": "string",
                          "maxLength": 32768
                        },
                        "observedGeneration": {
                          "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                          "type": "integer",
                          "format": "int64",
                          "minimum": 0
                        },
                        "reason": {
                          "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                          "type": "string",
                          "maxLength": 1024,
                          "minLength": 1,
                          "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                        },
                        "status": {
                          "description": "status of the condition, one of True, False, Unknown.",
                          "type": "string",
                          "enum": [
                            "True",
                            "False",
                            "Unknown"
                          ]
                        },
                        "type": {
                          "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                          "type": "string",
                          "maxLength": 316,
                          "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                        }
                      }
                    }
                  },
                  "placementSummary": {
                    "description": "PlacementRef Summary",
                    "type": "array",
                    "items": {
                      "description": "PlacementSummary provides info regards number of clusters and clusterGroups selected by the placement refs.",
                      "type": "object",
                      "properties": {
                        "availableDecisionGroups": {
                          "description": "availableDecisionGroups shows number of decisionGroups that have all clusters manifestWorks in available state regards total number of decisionGroups.\nex; 2/4 (2 out of 4)",
                          "type": "string"
                        },
                        "name": {
                          "description": "PlacementRef Name",
                          "type": "string"
                        },
                        "summary": {
                          "description": "Summary totals of resulting ManifestWorks for the placement",
                          "type": "object",
                          "properties": {
                            "Applied": {
                              "description": "Applied is the number of ManifestWorks with condition Applied: true",
                              "type": "integer"
                            },
                            "available": {
                              "description": "Available is the number of ManifestWorks with condition Available: true",
                              "type": "integer"
                            },
                            "degraded": {
                              "description": "TODO: Degraded is the number of ManifestWorks with condition Degraded: true",
                              "type": "integer"
                            },
                            "progressing": {
                              "description": "TODO: Progressing is the number of ManifestWorks with condition Progressing: true",
                              "type": "integer"
                            },
                            "total": {
                              "description": "Total number of ManifestWorks managed by the ManifestWorkReplicaSet",
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  },
                  "summary": {
                    "description": "Summary totals of resulting ManifestWorks for all placements",
                    "type": "object",
                    "properties": {
                      "Applied": {
                        "description": "Applied is the number of ManifestWorks with condition Applied: true",
                        "type": "integer"
                      },
                      "available": {
                        "description": "Available is the number of ManifestWorks with condition Available: true",
                        "type": "integer"
                      },
                      "degraded": {
                        "description": "TODO: Degraded is the number of ManifestWorks with condition Degraded: true",
                        "type": "integer"
                      },
                      "progressing": {
                        "description": "TODO: Progressing is the number of ManifestWorks with condition Progressing: true",
                        "type": "integer"
                      },
                      "total": {
                        "description": "Total number of ManifestWorks managed by the ManifestWorkReplicaSet",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "Placement",
            "type": "string",
            "description": "Reason",
            "jsonPath": ".status.conditions[?(@.type==\"PlacementVerified\")].reason"
          },
          {
            "name": "Found",
            "type": "string",
            "description": "Configured",
            "jsonPath": ".status.conditions[?(@.type==\"PlacementVerified\")].status"
          },
          {
            "name": "ManifestWorks",
            "type": "string",
            "description": "Reason",
            "jsonPath": ".status.conditions[?(@.type==\"ManifestworkApplied\")].reason"
          },
          {
            "name": "Applied",
            "type": "string",
            "description": "Applied",
            "jsonPath": ".status.conditions[?(@.type==\"ManifestworkApplied\")].status"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": [],
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": []
  }
}