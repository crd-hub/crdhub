{
  "$schema": "http://json-schema.org/schema#",
  "description": "LabServiceLab is the Schema for the LabServiceLabs API. Manages a Lab Service Lab.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "labservices.azure.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "LabServiceLab"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "LabServiceLabSpec defines the desired state of LabServiceLab",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "autoShutdown": {
              "description": "An auto_shutdown block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "disconnectDelay": {
                    "description": "The amount of time a VM will stay running after a user disconnects if this behavior is enabled. This value must be formatted as an ISO 8601 string.",
                    "type": "string"
                  },
                  "idleDelay": {
                    "description": "The amount of time a VM will idle before it is shutdown if this behavior is enabled. This value must be formatted as an ISO 8601 string.",
                    "type": "string"
                  },
                  "noConnectDelay": {
                    "description": "The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled. This value must be formatted as an ISO 8601 string.",
                    "type": "string"
                  },
                  "shutdownOnIdle": {
                    "description": "A VM will get shutdown when it has idled for a period of time. Possible values are LowUsage and UserAbsence.",
                    "type": "string"
                  }
                }
              }
            },
            "connectionSetting": {
              "description": "A connection_setting block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "clientRdpAccess": {
                    "description": "The enabled access level for Client Access over RDP. Possible value is Public.",
                    "type": "string"
                  },
                  "clientSshAccess": {
                    "description": "The enabled access level for Client Access over SSH. Possible value is Public.",
                    "type": "string"
                  }
                }
              }
            },
            "description": {
              "description": "The description of the Lab Service Lab.",
              "type": "string"
            },
            "labPlanId": {
              "description": "The resource ID of the Lab Plan that is used during resource creation to provide defaults and acts as a permission container when creating a Lab Service Lab via labs.azure.com.",
              "type": "string"
            },
            "location": {
              "description": "The Azure Region where the Lab Service Lab should exist. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "network": {
              "description": "A network block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "subnetId": {
                    "description": "The resource ID of the Subnet for the network profile of the Lab Service Lab.",
                    "type": "string"
                  },
                  "subnetIdRef": {
                    "description": "Reference to a Subnet in network to populate subnetId.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "subnetIdSelector": {
                    "description": "Selector for a Subnet in network to populate subnetId.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "resourceGroupName": {
              "description": "The name of the Resource Group where the Lab Service Lab should exist. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "roster": {
              "description": "A roster block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "activeDirectoryGroupId": {
                    "description": "The AAD group ID which this Lab Service Lab roster is populated from.",
                    "type": "string"
                  },
                  "lmsInstance": {
                    "description": "The base URI identifying the lms instance.",
                    "type": "string"
                  },
                  "ltiClientId": {
                    "description": "The unique id of the Azure Lab Service tool in the lms.",
                    "type": "string"
                  },
                  "ltiContextId": {
                    "description": "The unique context identifier for the Lab Service Lab in the lms.",
                    "type": "string"
                  },
                  "ltiRosterEndpoint": {
                    "description": "The URI of the names and roles service endpoint on the lms for the class attached to this Lab Service Lab.",
                    "type": "string"
                  }
                }
              }
            },
            "security": {
              "description": "A security block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "openAccessEnabled": {
                    "description": "Is open access enabled to allow any user or only specified users to register to a Lab Service Lab?",
                    "type": "boolean"
                  }
                }
              }
            },
            "tags": {
              "description": "A mapping of tags which should be assigned to the Lab Service Lab.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "title": {
              "description": "The title of the Lab Service Lab.",
              "type": "string"
            },
            "virtualMachine": {
              "description": "A virtual_machine block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "additionalCapabilityGpuDriversInstalled": {
                    "description": "Is flagged to pre-install dedicated GPU drivers? Defaults to false. Changing this forces a new resource to be created.",
                    "type": "boolean"
                  },
                  "adminUser": {
                    "description": "An admin_user block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "passwordSecretRef"
                      ],
                      "properties": {
                        "passwordSecretRef": {
                          "description": "The password for the user.",
                          "type": "object",
                          "required": [
                            "key",
                            "name",
                            "namespace"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the secret.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace of the secret.",
                              "type": "string"
                            }
                          }
                        },
                        "username": {
                          "description": "The username to use when signing in to Lab Service Lab VMs.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "createOption": {
                    "description": "The create option to indicate what Lab Service Lab VMs are created from. Possible values are Image and TemplateVM. Defaults to Image. Changing this forces a new resource to be created.",
                    "type": "string"
                  },
                  "imageReference": {
                    "description": "An image_reference block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The resource ID of the image. Changing this forces a new resource to be created.",
                          "type": "string"
                        },
                        "offer": {
                          "description": "The image offer if applicable. Changing this forces a new resource to be created.",
                          "type": "string"
                        },
                        "publisher": {
                          "description": "The image publisher. Changing this forces a new resource to be created.",
                          "type": "string"
                        },
                        "sku": {
                          "description": "A sku block as defined below.",
                          "type": "string"
                        },
                        "version": {
                          "description": "The image version specified on creation. Changing this forces a new resource to be created.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "nonAdminUser": {
                    "description": "A non_admin_user block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "passwordSecretRef"
                      ],
                      "properties": {
                        "passwordSecretRef": {
                          "description": "The password for the user.",
                          "type": "object",
                          "required": [
                            "key",
                            "name",
                            "namespace"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the secret.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace of the secret.",
                              "type": "string"
                            }
                          }
                        },
                        "username": {
                          "description": "The username to use when signing in to Lab Service Lab VMs.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "sharedPasswordEnabled": {
                    "description": "Is the shared password enabled with the same password for all user VMs? Defaults to false. Changing this forces a new resource to be created.",
                    "type": "boolean"
                  },
                  "sku": {
                    "description": "A sku block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "capacity": {
                          "description": "The capacity for the SKU. Possible values are between 0 and 400.",
                          "type": "number"
                        },
                        "name": {
                          "description": "The name of the SKU. Changing this forces a new resource to be created.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "usageQuota": {
                    "description": "The initial quota allocated to each Lab Service Lab user. Defaults to PT0S. This value must be formatted as an ISO 8601 string.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "autoShutdown": {
              "description": "An auto_shutdown block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "disconnectDelay": {
                    "description": "The amount of time a VM will stay running after a user disconnects if this behavior is enabled. This value must be formatted as an ISO 8601 string.",
                    "type": "string"
                  },
                  "idleDelay": {
                    "description": "The amount of time a VM will idle before it is shutdown if this behavior is enabled. This value must be formatted as an ISO 8601 string.",
                    "type": "string"
                  },
                  "noConnectDelay": {
                    "description": "The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled. This value must be formatted as an ISO 8601 string.",
                    "type": "string"
                  },
                  "shutdownOnIdle": {
                    "description": "A VM will get shutdown when it has idled for a period of time. Possible values are LowUsage and UserAbsence.",
                    "type": "string"
                  }
                }
              }
            },
            "connectionSetting": {
              "description": "A connection_setting block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "clientRdpAccess": {
                    "description": "The enabled access level for Client Access over RDP. Possible value is Public.",
                    "type": "string"
                  },
                  "clientSshAccess": {
                    "description": "The enabled access level for Client Access over SSH. Possible value is Public.",
                    "type": "string"
                  }
                }
              }
            },
            "description": {
              "description": "The description of the Lab Service Lab.",
              "type": "string"
            },
            "labPlanId": {
              "description": "The resource ID of the Lab Plan that is used during resource creation to provide defaults and acts as a permission container when creating a Lab Service Lab via labs.azure.com.",
              "type": "string"
            },
            "location": {
              "description": "The Azure Region where the Lab Service Lab should exist. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "network": {
              "description": "A network block as defined below.",
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "roster": {
              "description": "A roster block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "activeDirectoryGroupId": {
                    "description": "The AAD group ID which this Lab Service Lab roster is populated from.",
                    "type": "string"
                  },
                  "lmsInstance": {
                    "description": "The base URI identifying the lms instance.",
                    "type": "string"
                  },
                  "ltiClientId": {
                    "description": "The unique id of the Azure Lab Service tool in the lms.",
                    "type": "string"
                  },
                  "ltiContextId": {
                    "description": "The unique context identifier for the Lab Service Lab in the lms.",
                    "type": "string"
                  },
                  "ltiRosterEndpoint": {
                    "description": "The URI of the names and roles service endpoint on the lms for the class attached to this Lab Service Lab.",
                    "type": "string"
                  }
                }
              }
            },
            "security": {
              "description": "A security block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "openAccessEnabled": {
                    "description": "Is open access enabled to allow any user or only specified users to register to a Lab Service Lab?",
                    "type": "boolean"
                  }
                }
              }
            },
            "tags": {
              "description": "A mapping of tags which should be assigned to the Lab Service Lab.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "title": {
              "description": "The title of the Lab Service Lab.",
              "type": "string"
            },
            "virtualMachine": {
              "description": "A virtual_machine block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "additionalCapabilityGpuDriversInstalled": {
                    "description": "Is flagged to pre-install dedicated GPU drivers? Defaults to false. Changing this forces a new resource to be created.",
                    "type": "boolean"
                  },
                  "adminUser": {
                    "description": "An admin_user block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "description": "The username to use when signing in to Lab Service Lab VMs.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "createOption": {
                    "description": "The create option to indicate what Lab Service Lab VMs are created from. Possible values are Image and TemplateVM. Defaults to Image. Changing this forces a new resource to be created.",
                    "type": "string"
                  },
                  "imageReference": {
                    "description": "An image_reference block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The resource ID of the image. Changing this forces a new resource to be created.",
                          "type": "string"
                        },
                        "offer": {
                          "description": "The image offer if applicable. Changing this forces a new resource to be created.",
                          "type": "string"
                        },
                        "publisher": {
                          "description": "The image publisher. Changing this forces a new resource to be created.",
                          "type": "string"
                        },
                        "sku": {
                          "description": "A sku block as defined below.",
                          "type": "string"
                        },
                        "version": {
                          "description": "The image version specified on creation. Changing this forces a new resource to be created.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "nonAdminUser": {
                    "description": "A non_admin_user block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "description": "The username to use when signing in to Lab Service Lab VMs.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "sharedPasswordEnabled": {
                    "description": "Is the shared password enabled with the same password for all user VMs? Defaults to false. Changing this forces a new resource to be created.",
                    "type": "boolean"
                  },
                  "sku": {
                    "description": "A sku block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "capacity": {
                          "description": "The capacity for the SKU. Possible values are between 0 and 400.",
                          "type": "number"
                        },
                        "name": {
                          "description": "The name of the SKU. Changing this forces a new resource to be created.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "usageQuota": {
                    "description": "The initial quota allocated to each Lab Service Lab user. Defaults to PT0S. This value must be formatted as an ISO 8601 string.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.location))",
          "message": "spec.forProvider.location is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.security) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.security))",
          "message": "spec.forProvider.security is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.title) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.title))",
          "message": "spec.forProvider.title is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.virtualMachine) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.virtualMachine))",
          "message": "spec.forProvider.virtualMachine is a required parameter"
        }
      ]
    }
  }
}