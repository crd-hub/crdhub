{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "featurestores.vertexai.gcp.upbound.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.13.0"
    }
  },
  "spec": {
    "group": "vertexai.gcp.upbound.io",
    "names": {
      "plural": "featurestores",
      "singular": "featurestore",
      "kind": "Featurestore",
      "listKind": "FeaturestoreList",
      "categories": [
        "crossplane",
        "managed",
        "gcp"
      ]
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "Featurestore is the Schema for the Featurestores API. A collection of DataItems and Annotations on them.",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "FeaturestoreSpec defines the desired state of Featurestore",
                "type": "object",
                "required": [
                  "forProvider"
                ],
                "properties": {
                  "deletionPolicy": {
                    "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
                    "type": "string",
                    "default": "Delete",
                    "enum": [
                      "Orphan",
                      "Delete"
                    ]
                  },
                  "forProvider": {
                    "type": "object",
                    "properties": {
                      "encryptionSpec": {
                        "description": "If set, both of the online and offline data storage will be secured by this key. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "kmsKeyName": {
                              "description": "The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the compute resource is created.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "forceDestroy": {
                        "description": "If set to true, any EntityTypes and Features for this Featurestore will also be deleted",
                        "type": "boolean"
                      },
                      "labels": {
                        "description": "A set of key/value label pairs to assign to this Featurestore.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "name": {
                        "description": "The name of the Featurestore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.",
                        "type": "string"
                      },
                      "onlineServingConfig": {
                        "description": "Config for online serving resources. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "fixedNodeCount": {
                              "description": "The number of nodes for each cluster. The number of nodes will not scale automatically but can be scaled manually by providing different values when updating.",
                              "type": "number"
                            },
                            "scaling": {
                              "description": "Online serving scaling configuration. Only one of fixedNodeCount and scaling can be set. Setting one will reset the other. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "maxNodeCount": {
                                    "description": "The maximum number of nodes to scale up to. Must be greater than minNodeCount, and less than or equal to 10 times of 'minNodeCount'.",
                                    "type": "number"
                                  },
                                  "minNodeCount": {
                                    "description": "The minimum number of nodes to scale down to. Must be greater than or equal to 1.",
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "project": {
                        "description": "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
                        "type": "string"
                      },
                      "region": {
                        "description": "The region of the dataset. eg us-central1",
                        "type": "string"
                      }
                    }
                  },
                  "initProvider": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
                    "type": "object",
                    "properties": {
                      "encryptionSpec": {
                        "description": "If set, both of the online and offline data storage will be secured by this key. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "kmsKeyName": {
                              "description": "The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the compute resource is created.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "forceDestroy": {
                        "description": "If set to true, any EntityTypes and Features for this Featurestore will also be deleted",
                        "type": "boolean"
                      },
                      "labels": {
                        "description": "A set of key/value label pairs to assign to this Featurestore.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "name": {
                        "description": "The name of the Featurestore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.",
                        "type": "string"
                      },
                      "onlineServingConfig": {
                        "description": "Config for online serving resources. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "fixedNodeCount": {
                              "description": "The number of nodes for each cluster. The number of nodes will not scale automatically but can be scaled manually by providing different values when updating.",
                              "type": "number"
                            },
                            "scaling": {
                              "description": "Online serving scaling configuration. Only one of fixedNodeCount and scaling can be set. Setting one will reset the other. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "maxNodeCount": {
                                    "description": "The maximum number of nodes to scale up to. Must be greater than minNodeCount, and less than or equal to 10 times of 'minNodeCount'.",
                                    "type": "number"
                                  },
                                  "minNodeCount": {
                                    "description": "The minimum number of nodes to scale down to. Must be greater than or equal to 1.",
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "project": {
                        "description": "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
                        "type": "string"
                      },
                      "region": {
                        "description": "The region of the dataset. eg us-central1",
                        "type": "string"
                      }
                    }
                  },
                  "managementPolicies": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
                    "type": "array",
                    "default": [
                      "*"
                    ],
                    "items": {
                      "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
                      "type": "string",
                      "enum": [
                        "Observe",
                        "Create",
                        "Update",
                        "Delete",
                        "LateInitialize",
                        "*"
                      ]
                    }
                  },
                  "providerConfigRef": {
                    "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
                    "type": "object",
                    "default": {
                      "name": "default"
                    },
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "publishConnectionDetailsTo": {
                    "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "configRef": {
                        "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
                        "type": "object",
                        "default": {
                          "name": "default"
                        },
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "Metadata is the metadata for connection secret.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "type": {
                            "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name of the connection secret.",
                        "type": "string"
                      }
                    }
                  },
                  "writeConnectionSecretToRef": {
                    "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
                    "type": "object",
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "status": {
                "description": "FeaturestoreStatus defines the observed state of Featurestore.",
                "type": "object",
                "properties": {
                  "atProvider": {
                    "type": "object",
                    "properties": {
                      "createTime": {
                        "description": "The timestamp of when the featurestore was created in RFC3339 UTC \"Zulu\" format, with nanosecond resolution and up to nine fractional digits.",
                        "type": "string"
                      },
                      "encryptionSpec": {
                        "description": "If set, both of the online and offline data storage will be secured by this key. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "kmsKeyName": {
                              "description": "The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the compute resource is created.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "etag": {
                        "description": "Used to perform consistent read-modify-write updates.",
                        "type": "string"
                      },
                      "forceDestroy": {
                        "description": "If set to true, any EntityTypes and Features for this Featurestore will also be deleted",
                        "type": "boolean"
                      },
                      "id": {
                        "description": "an identifier for the resource with format projects/{{project}}/locations/{{region}}/featurestores/{{name}}",
                        "type": "string"
                      },
                      "labels": {
                        "description": "A set of key/value label pairs to assign to this Featurestore.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "name": {
                        "description": "The name of the Featurestore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.",
                        "type": "string"
                      },
                      "onlineServingConfig": {
                        "description": "Config for online serving resources. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "fixedNodeCount": {
                              "description": "The number of nodes for each cluster. The number of nodes will not scale automatically but can be scaled manually by providing different values when updating.",
                              "type": "number"
                            },
                            "scaling": {
                              "description": "Online serving scaling configuration. Only one of fixedNodeCount and scaling can be set. Setting one will reset the other. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "maxNodeCount": {
                                    "description": "The maximum number of nodes to scale up to. Must be greater than minNodeCount, and less than or equal to 10 times of 'minNodeCount'.",
                                    "type": "number"
                                  },
                                  "minNodeCount": {
                                    "description": "The minimum number of nodes to scale down to. Must be greater than or equal to 1.",
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "project": {
                        "description": "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
                        "type": "string"
                      },
                      "region": {
                        "description": "The region of the dataset. eg us-central1",
                        "type": "string"
                      },
                      "updateTime": {
                        "description": "The timestamp of when the featurestore was last updated in RFC3339 UTC \"Zulu\" format, with nanosecond resolution and up to nine fractional digits.",
                        "type": "string"
                      }
                    }
                  },
                  "conditions": {
                    "description": "Conditions of the resource.",
                    "type": "array",
                    "items": {
                      "description": "A Condition that may apply to a resource.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "A Reason for this condition's last transition from one status to another.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of this condition; is it currently True, False, or Unknown?",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "READY",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
          },
          {
            "name": "SYNCED",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Synced')].status"
          },
          {
            "name": "EXTERNAL-NAME",
            "type": "string",
            "jsonPath": ".metadata.annotations.crossplane\\.io/external-name"
          },
          {
            "name": "AGE",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}