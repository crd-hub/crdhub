{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "configurationseteventdestinations.sesv2.aws.upbound.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.13.0"
    }
  },
  "spec": {
    "group": "sesv2.aws.upbound.io",
    "names": {
      "plural": "configurationseteventdestinations",
      "singular": "configurationseteventdestination",
      "kind": "ConfigurationSetEventDestination",
      "listKind": "ConfigurationSetEventDestinationList",
      "categories": [
        "crossplane",
        "managed",
        "aws"
      ]
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "ConfigurationSetEventDestination is the Schema for the ConfigurationSetEventDestinations API.",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "ConfigurationSetEventDestinationSpec defines the desired state of ConfigurationSetEventDestination",
                "type": "object",
                "required": [
                  "forProvider"
                ],
                "properties": {
                  "deletionPolicy": {
                    "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
                    "type": "string",
                    "default": "Delete",
                    "enum": [
                      "Orphan",
                      "Delete"
                    ]
                  },
                  "forProvider": {
                    "type": "object",
                    "required": [
                      "region"
                    ],
                    "properties": {
                      "configurationSetName": {
                        "description": "The name of the configuration set.",
                        "type": "string"
                      },
                      "configurationSetNameRef": {
                        "description": "Reference to a ConfigurationSet in sesv2 to populate configurationSetName.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "configurationSetNameSelector": {
                        "description": "Selector for a ConfigurationSet in sesv2 to populate configurationSetName.",
                        "type": "object",
                        "properties": {
                          "matchControllerRef": {
                            "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                            "type": "boolean"
                          },
                          "matchLabels": {
                            "description": "MatchLabels ensures an object with matching labels is selected.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "policy": {
                            "description": "Policies for selection.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "eventDestination": {
                        "description": "A name that identifies the event destination within the configuration set.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "cloudWatchDestination": {
                              "description": "An object that defines an Amazon CloudWatch destination for email events. See cloud_watch_destination below",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "dimensionConfiguration": {
                                    "description": "An array of objects that define the dimensions to use when you send email events to Amazon CloudWatch. See dimension_configuration below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "defaultDimensionValue": {
                                          "description": "The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email. ( dimension_name -  The name of an Amazon CloudWatch dimension associated with an email sending metric.",
                                          "type": "string"
                                        },
                                        "dimensionName": {
                                          "type": "string"
                                        },
                                        "dimensionValueSource": {
                                          "description": "The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. Valid values: MESSAGE_TAG, EMAIL_HEADER, LINK_TAG.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "enabled": {
                              "description": "When the event destination is enabled, the specified event types are sent to the destinations. Default: false.",
                              "type": "boolean"
                            },
                            "kinesisFirehoseDestination": {
                              "description": "An object that defines an Amazon Kinesis Data Firehose destination for email events. See kinesis_firehose_destination below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "deliveryStreamArn": {
                                    "description": "The Amazon Resource Name (ARN) of the Amazon Kinesis Data Firehose stream that the Amazon SES API v2 sends email events to.",
                                    "type": "string"
                                  },
                                  "deliveryStreamArnRef": {
                                    "description": "Reference to a DeliveryStream in firehose to populate deliveryStreamArn.",
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "Name of the referenced object.",
                                        "type": "string"
                                      },
                                      "policy": {
                                        "description": "Policies for referencing.",
                                        "type": "object",
                                        "properties": {
                                          "resolution": {
                                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                            "type": "string",
                                            "default": "Required",
                                            "enum": [
                                              "Required",
                                              "Optional"
                                            ]
                                          },
                                          "resolve": {
                                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                            "type": "string",
                                            "enum": [
                                              "Always",
                                              "IfNotPresent"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "deliveryStreamArnSelector": {
                                    "description": "Selector for a DeliveryStream in firehose to populate deliveryStreamArn.",
                                    "type": "object",
                                    "properties": {
                                      "matchControllerRef": {
                                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                        "type": "boolean"
                                      },
                                      "matchLabels": {
                                        "description": "MatchLabels ensures an object with matching labels is selected.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      },
                                      "policy": {
                                        "description": "Policies for selection.",
                                        "type": "object",
                                        "properties": {
                                          "resolution": {
                                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                            "type": "string",
                                            "default": "Required",
                                            "enum": [
                                              "Required",
                                              "Optional"
                                            ]
                                          },
                                          "resolve": {
                                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                            "type": "string",
                                            "enum": [
                                              "Always",
                                              "IfNotPresent"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "iamRoleArn": {
                                    "description": "The Amazon Resource Name (ARN) of the IAM role that the Amazon SES API v2 uses to send email events to the Amazon Kinesis Data Firehose stream.",
                                    "type": "string"
                                  },
                                  "iamRoleArnRef": {
                                    "description": "Reference to a Role in iam to populate iamRoleArn.",
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "Name of the referenced object.",
                                        "type": "string"
                                      },
                                      "policy": {
                                        "description": "Policies for referencing.",
                                        "type": "object",
                                        "properties": {
                                          "resolution": {
                                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                            "type": "string",
                                            "default": "Required",
                                            "enum": [
                                              "Required",
                                              "Optional"
                                            ]
                                          },
                                          "resolve": {
                                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                            "type": "string",
                                            "enum": [
                                              "Always",
                                              "IfNotPresent"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "iamRoleArnSelector": {
                                    "description": "Selector for a Role in iam to populate iamRoleArn.",
                                    "type": "object",
                                    "properties": {
                                      "matchControllerRef": {
                                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                        "type": "boolean"
                                      },
                                      "matchLabels": {
                                        "description": "MatchLabels ensures an object with matching labels is selected.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      },
                                      "policy": {
                                        "description": "Policies for selection.",
                                        "type": "object",
                                        "properties": {
                                          "resolution": {
                                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                            "type": "string",
                                            "default": "Required",
                                            "enum": [
                                              "Required",
                                              "Optional"
                                            ]
                                          },
                                          "resolve": {
                                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                            "type": "string",
                                            "enum": [
                                              "Always",
                                              "IfNotPresent"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "matchingEventTypes": {
                              "description": "- An array that specifies which events the Amazon SES API v2 should send to the destinations. Valid values: SEND, REJECT, BOUNCE, COMPLAINT, DELIVERY, OPEN, CLICK, RENDERING_FAILURE, DELIVERY_DELAY, SUBSCRIPTION.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "pinpointDestination": {
                              "description": "An object that defines an Amazon Pinpoint project destination for email events. See pinpoint_destination below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "applicationArn": {
                                    "type": "string"
                                  },
                                  "applicationArnRef": {
                                    "description": "Reference to a App in pinpoint to populate applicationArn.",
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "Name of the referenced object.",
                                        "type": "string"
                                      },
                                      "policy": {
                                        "description": "Policies for referencing.",
                                        "type": "object",
                                        "properties": {
                                          "resolution": {
                                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                            "type": "string",
                                            "default": "Required",
                                            "enum": [
                                              "Required",
                                              "Optional"
                                            ]
                                          },
                                          "resolve": {
                                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                            "type": "string",
                                            "enum": [
                                              "Always",
                                              "IfNotPresent"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "applicationArnSelector": {
                                    "description": "Selector for a App in pinpoint to populate applicationArn.",
                                    "type": "object",
                                    "properties": {
                                      "matchControllerRef": {
                                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                        "type": "boolean"
                                      },
                                      "matchLabels": {
                                        "description": "MatchLabels ensures an object with matching labels is selected.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      },
                                      "policy": {
                                        "description": "Policies for selection.",
                                        "type": "object",
                                        "properties": {
                                          "resolution": {
                                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                            "type": "string",
                                            "default": "Required",
                                            "enum": [
                                              "Required",
                                              "Optional"
                                            ]
                                          },
                                          "resolve": {
                                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                            "type": "string",
                                            "enum": [
                                              "Always",
                                              "IfNotPresent"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "snsDestination": {
                              "description": "An object that defines an Amazon SNS destination for email events. See sns_destination below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "topicArn": {
                                    "description": "The Amazon Resource Name (ARN) of the Amazon SNS topic to publish email events to.",
                                    "type": "string"
                                  },
                                  "topicArnRef": {
                                    "description": "Reference to a Topic in sns to populate topicArn.",
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "Name of the referenced object.",
                                        "type": "string"
                                      },
                                      "policy": {
                                        "description": "Policies for referencing.",
                                        "type": "object",
                                        "properties": {
                                          "resolution": {
                                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                            "type": "string",
                                            "default": "Required",
                                            "enum": [
                                              "Required",
                                              "Optional"
                                            ]
                                          },
                                          "resolve": {
                                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                            "type": "string",
                                            "enum": [
                                              "Always",
                                              "IfNotPresent"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "topicArnSelector": {
                                    "description": "Selector for a Topic in sns to populate topicArn.",
                                    "type": "object",
                                    "properties": {
                                      "matchControllerRef": {
                                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                        "type": "boolean"
                                      },
                                      "matchLabels": {
                                        "description": "MatchLabels ensures an object with matching labels is selected.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      },
                                      "policy": {
                                        "description": "Policies for selection.",
                                        "type": "object",
                                        "properties": {
                                          "resolution": {
                                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                            "type": "string",
                                            "default": "Required",
                                            "enum": [
                                              "Required",
                                              "Optional"
                                            ]
                                          },
                                          "resolve": {
                                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                            "type": "string",
                                            "enum": [
                                              "Always",
                                              "IfNotPresent"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "eventDestinationName": {
                        "description": "An object that defines the event destination. See event_destination below.",
                        "type": "string"
                      },
                      "region": {
                        "description": "Region is the region you'd like your resource to be created in.",
                        "type": "string"
                      }
                    }
                  },
                  "initProvider": {
                    "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
                    "type": "object",
                    "properties": {
                      "eventDestination": {
                        "description": "A name that identifies the event destination within the configuration set.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "cloudWatchDestination": {
                              "description": "An object that defines an Amazon CloudWatch destination for email events. See cloud_watch_destination below",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "dimensionConfiguration": {
                                    "description": "An array of objects that define the dimensions to use when you send email events to Amazon CloudWatch. See dimension_configuration below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "defaultDimensionValue": {
                                          "description": "The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email. ( dimension_name -  The name of an Amazon CloudWatch dimension associated with an email sending metric.",
                                          "type": "string"
                                        },
                                        "dimensionName": {
                                          "type": "string"
                                        },
                                        "dimensionValueSource": {
                                          "description": "The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. Valid values: MESSAGE_TAG, EMAIL_HEADER, LINK_TAG.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "enabled": {
                              "description": "When the event destination is enabled, the specified event types are sent to the destinations. Default: false.",
                              "type": "boolean"
                            },
                            "kinesisFirehoseDestination": {
                              "description": "An object that defines an Amazon Kinesis Data Firehose destination for email events. See kinesis_firehose_destination below.",
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            },
                            "matchingEventTypes": {
                              "description": "- An array that specifies which events the Amazon SES API v2 should send to the destinations. Valid values: SEND, REJECT, BOUNCE, COMPLAINT, DELIVERY, OPEN, CLICK, RENDERING_FAILURE, DELIVERY_DELAY, SUBSCRIPTION.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "pinpointDestination": {
                              "description": "An object that defines an Amazon Pinpoint project destination for email events. See pinpoint_destination below.",
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            },
                            "snsDestination": {
                              "description": "An object that defines an Amazon SNS destination for email events. See sns_destination below.",
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            }
                          }
                        }
                      },
                      "eventDestinationName": {
                        "description": "An object that defines the event destination. See event_destination below.",
                        "type": "string"
                      }
                    }
                  },
                  "managementPolicies": {
                    "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
                    "type": "array",
                    "default": [
                      "*"
                    ],
                    "items": {
                      "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
                      "type": "string",
                      "enum": [
                        "Observe",
                        "Create",
                        "Update",
                        "Delete",
                        "LateInitialize",
                        "*"
                      ]
                    }
                  },
                  "providerConfigRef": {
                    "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
                    "type": "object",
                    "default": {
                      "name": "default"
                    },
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "publishConnectionDetailsTo": {
                    "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "configRef": {
                        "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
                        "type": "object",
                        "default": {
                          "name": "default"
                        },
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "Metadata is the metadata for connection secret.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "type": {
                            "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name of the connection secret.",
                        "type": "string"
                      }
                    }
                  },
                  "writeConnectionSecretToRef": {
                    "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
                    "type": "object",
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  }
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.eventDestination) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.eventDestination))",
                    "message": "spec.forProvider.eventDestination is a required parameter"
                  },
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.eventDestinationName) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.eventDestinationName))",
                    "message": "spec.forProvider.eventDestinationName is a required parameter"
                  }
                ]
              },
              "status": {
                "description": "ConfigurationSetEventDestinationStatus defines the observed state of ConfigurationSetEventDestination.",
                "type": "object",
                "properties": {
                  "atProvider": {
                    "type": "object",
                    "properties": {
                      "configurationSetName": {
                        "description": "The name of the configuration set.",
                        "type": "string"
                      },
                      "eventDestination": {
                        "description": "A name that identifies the event destination within the configuration set.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "cloudWatchDestination": {
                              "description": "An object that defines an Amazon CloudWatch destination for email events. See cloud_watch_destination below",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "dimensionConfiguration": {
                                    "description": "An array of objects that define the dimensions to use when you send email events to Amazon CloudWatch. See dimension_configuration below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "defaultDimensionValue": {
                                          "description": "The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email. ( dimension_name -  The name of an Amazon CloudWatch dimension associated with an email sending metric.",
                                          "type": "string"
                                        },
                                        "dimensionName": {
                                          "type": "string"
                                        },
                                        "dimensionValueSource": {
                                          "description": "The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. Valid values: MESSAGE_TAG, EMAIL_HEADER, LINK_TAG.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "enabled": {
                              "description": "When the event destination is enabled, the specified event types are sent to the destinations. Default: false.",
                              "type": "boolean"
                            },
                            "kinesisFirehoseDestination": {
                              "description": "An object that defines an Amazon Kinesis Data Firehose destination for email events. See kinesis_firehose_destination below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "deliveryStreamArn": {
                                    "description": "The Amazon Resource Name (ARN) of the Amazon Kinesis Data Firehose stream that the Amazon SES API v2 sends email events to.",
                                    "type": "string"
                                  },
                                  "iamRoleArn": {
                                    "description": "The Amazon Resource Name (ARN) of the IAM role that the Amazon SES API v2 uses to send email events to the Amazon Kinesis Data Firehose stream.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "matchingEventTypes": {
                              "description": "- An array that specifies which events the Amazon SES API v2 should send to the destinations. Valid values: SEND, REJECT, BOUNCE, COMPLAINT, DELIVERY, OPEN, CLICK, RENDERING_FAILURE, DELIVERY_DELAY, SUBSCRIPTION.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "pinpointDestination": {
                              "description": "An object that defines an Amazon Pinpoint project destination for email events. See pinpoint_destination below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "applicationArn": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "snsDestination": {
                              "description": "An object that defines an Amazon SNS destination for email events. See sns_destination below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "topicArn": {
                                    "description": "The Amazon Resource Name (ARN) of the Amazon SNS topic to publish email events to.",
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "eventDestinationName": {
                        "description": "An object that defines the event destination. See event_destination below.",
                        "type": "string"
                      },
                      "id": {
                        "description": "A pipe-delimited string combining configuration_set_name and event_destination_name.",
                        "type": "string"
                      }
                    }
                  },
                  "conditions": {
                    "description": "Conditions of the resource.",
                    "type": "array",
                    "items": {
                      "description": "A Condition that may apply to a resource.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "A Reason for this condition's last transition from one status to another.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of this condition; is it currently True, False, or Unknown?",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-list-map-keys": [
                      "type"
                    ],
                    "x-kubernetes-list-type": "map"
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "READY",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
          },
          {
            "name": "SYNCED",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Synced')].status"
          },
          {
            "name": "EXTERNAL-NAME",
            "type": "string",
            "jsonPath": ".metadata.annotations.crossplane\\.io/external-name"
          },
          {
            "name": "AGE",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}