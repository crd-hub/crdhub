{
  "$schema": "http://json-schema.org/schema#",
  "description": "Broker is the Schema for the Brokers API. Provides an MQ Broker Resource",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "mq.aws.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "Broker"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "BrokerSpec defines the desired state of Broker",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "applyImmediately": {
              "description": "Specifies whether any broker modifications are applied immediately, or during the next maintenance window. Default is false.",
              "type": "boolean"
            },
            "authenticationStrategy": {
              "description": "Authentication strategy used to secure the broker. Valid values are simple and ldap. ldap is not supported for engine_type RabbitMQ.",
              "type": "string"
            },
            "autoMinorVersionUpgrade": {
              "description": "Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.",
              "type": "boolean"
            },
            "brokerName": {
              "description": "Name of the broker.",
              "type": "string"
            },
            "configuration": {
              "description": "Configuration block for broker configuration. Applies to engine_type of ActiveMQ only. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "description": "The Configuration ID.",
                    "type": "string"
                  },
                  "idRef": {
                    "description": "Reference to a Configuration in mq to populate id.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "idSelector": {
                    "description": "Selector for a Configuration in mq to populate id.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "revision": {
                    "description": "Revision of the Configuration.",
                    "type": "number"
                  }
                }
              }
            },
            "deploymentMode": {
              "description": "Deployment mode of the broker. Valid values are SINGLE_INSTANCE, ACTIVE_STANDBY_MULTI_AZ, and CLUSTER_MULTI_AZ. Default is SINGLE_INSTANCE.",
              "type": "string"
            },
            "encryptionOptions": {
              "description": "Configuration block containing encryption options. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "kmsKeyId": {
                    "description": "Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting use_aws_owned_key to false. To perform drift detection when AWS-managed CMKs or customer-managed CMKs are in use, this value must be configured.",
                    "type": "string"
                  },
                  "useAwsOwnedKey": {
                    "description": "Whether to enable an AWS-owned KMS CMK that is not in your account. Defaults to true. Setting to false without configuring kms_key_id will create an AWS-managed CMK aliased to aws/mq in your account.",
                    "type": "boolean"
                  }
                }
              }
            },
            "engineType": {
              "description": "Type of broker engine. Valid values are ActiveMQ and RabbitMQ.",
              "type": "string"
            },
            "engineVersion": {
              "description": "Version of the broker engine. See the AmazonMQ Broker Engine docs for supported versions. For example, 5.15.0.",
              "type": "string"
            },
            "hostInstanceType": {
              "description": "Broker's instance type. For example, mq.t3.micro, mq.m5.large.",
              "type": "string"
            },
            "ldapServerMetadata": {
              "description": "Configuration block for the LDAP server used to authenticate and authorize connections to the broker. Not supported for engine_type RabbitMQ. Detailed below. (Currently, AWS may not process changes to LDAP server metadata.)",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "hosts": {
                    "description": "List of a fully qualified domain name of the LDAP server and an optional failover server.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "roleBase": {
                    "description": "Fully qualified name of the directory to search for a user’s groups.",
                    "type": "string"
                  },
                  "roleName": {
                    "description": "Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.",
                    "type": "string"
                  },
                  "roleSearchMatching": {
                    "description": "Search criteria for groups.",
                    "type": "string"
                  },
                  "roleSearchSubtree": {
                    "description": "Whether the directory search scope is the entire sub-tree.",
                    "type": "boolean"
                  },
                  "serviceAccountPasswordSecretRef": {
                    "description": "Service account password.",
                    "type": "object",
                    "required": [
                      "key",
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  },
                  "serviceAccountUsername": {
                    "description": "Service account username.",
                    "type": "string"
                  },
                  "userBase": {
                    "description": "Fully qualified name of the directory where you want to search for users.",
                    "type": "string"
                  },
                  "userRoleName": {
                    "description": "Specifies the name of the LDAP attribute for the user group membership.",
                    "type": "string"
                  },
                  "userSearchMatching": {
                    "description": "Search criteria for users.",
                    "type": "string"
                  },
                  "userSearchSubtree": {
                    "description": "Whether the directory search scope is the entire sub-tree.",
                    "type": "boolean"
                  }
                }
              }
            },
            "logs": {
              "description": "Configuration block for the logging configuration of the broker. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "audit": {
                    "description": "Enables audit logging. Auditing is only possible for engine_type of ActiveMQ. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to false.",
                    "type": "string"
                  },
                  "general": {
                    "description": "Enables general logging via CloudWatch. Defaults to false.",
                    "type": "boolean"
                  }
                }
              }
            },
            "maintenanceWindowStartTime": {
              "description": "Configuration block for the maintenance window start time. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "dayOfWeek": {
                    "description": "Day of the week, e.g., MONDAY, TUESDAY, or WEDNESDAY.",
                    "type": "string"
                  },
                  "timeOfDay": {
                    "description": "Time, in 24-hour format, e.g., 02:00.",
                    "type": "string"
                  },
                  "timeZone": {
                    "description": "Time zone in either the Country/City format or the UTC offset format, e.g., CET.",
                    "type": "string"
                  }
                }
              }
            },
            "publiclyAccessible": {
              "description": "Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.",
              "type": "boolean"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "securityGroupRefs": {
              "description": "References to SecurityGroup in ec2 to populate securityGroups.",
              "type": "array",
              "items": {
                "description": "A Reference to a named object.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "type": "object",
                    "properties": {
                      "resolution": {
                        "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                        "type": "string",
                        "default": "Required",
                        "enum": [
                          "Required",
                          "Optional"
                        ]
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                        "type": "string",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "securityGroupSelector": {
              "description": "Selector for a list of SecurityGroup in ec2 to populate securityGroups.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "securityGroups": {
              "description": "List of security group IDs assigned to the broker.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "storageType": {
              "description": "Storage type of the broker. For engine_type ActiveMQ, the valid values are efs and ebs, and the AWS-default is efs. For engine_type RabbitMQ, only ebs is supported. When using ebs, only the mq.m5 broker instance type family is supported.",
              "type": "string"
            },
            "subnetIdRefs": {
              "description": "References to Subnet in ec2 to populate subnetIds.",
              "type": "array",
              "items": {
                "description": "A Reference to a named object.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "type": "object",
                    "properties": {
                      "resolution": {
                        "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                        "type": "string",
                        "default": "Required",
                        "enum": [
                          "Required",
                          "Optional"
                        ]
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                        "type": "string",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "subnetIdSelector": {
              "description": "Selector for a list of Subnet in ec2 to populate subnetIds.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "subnetIds": {
              "description": "List of subnet IDs in which to launch the broker. A SINGLE_INSTANCE deployment requires one subnet. An ACTIVE_STANDBY_MULTI_AZ deployment requires multiple subnets.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "user": {
              "description": "Configuration block for broker users. For engine_type of RabbitMQ, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "passwordSecretRef"
                ],
                "properties": {
                  "consoleAccess": {
                    "description": "Whether to enable access to the ActiveMQ Web Console for the user. Applies to engine_type of ActiveMQ only.",
                    "type": "boolean"
                  },
                  "groups": {
                    "description": "List of groups (20 maximum) to which the ActiveMQ user belongs. Applies to engine_type of ActiveMQ only.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "passwordSecretRef": {
                    "description": "Password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.",
                    "type": "object",
                    "required": [
                      "key",
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  },
                  "username": {
                    "description": "Username of the user.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "applyImmediately": {
              "description": "Specifies whether any broker modifications are applied immediately, or during the next maintenance window. Default is false.",
              "type": "boolean"
            },
            "authenticationStrategy": {
              "description": "Authentication strategy used to secure the broker. Valid values are simple and ldap. ldap is not supported for engine_type RabbitMQ.",
              "type": "string"
            },
            "autoMinorVersionUpgrade": {
              "description": "Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.",
              "type": "boolean"
            },
            "brokerName": {
              "description": "Name of the broker.",
              "type": "string"
            },
            "configuration": {
              "description": "Configuration block for broker configuration. Applies to engine_type of ActiveMQ only. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "revision": {
                    "description": "Revision of the Configuration.",
                    "type": "number"
                  }
                }
              }
            },
            "deploymentMode": {
              "description": "Deployment mode of the broker. Valid values are SINGLE_INSTANCE, ACTIVE_STANDBY_MULTI_AZ, and CLUSTER_MULTI_AZ. Default is SINGLE_INSTANCE.",
              "type": "string"
            },
            "encryptionOptions": {
              "description": "Configuration block containing encryption options. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "kmsKeyId": {
                    "description": "Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting use_aws_owned_key to false. To perform drift detection when AWS-managed CMKs or customer-managed CMKs are in use, this value must be configured.",
                    "type": "string"
                  },
                  "useAwsOwnedKey": {
                    "description": "Whether to enable an AWS-owned KMS CMK that is not in your account. Defaults to true. Setting to false without configuring kms_key_id will create an AWS-managed CMK aliased to aws/mq in your account.",
                    "type": "boolean"
                  }
                }
              }
            },
            "engineType": {
              "description": "Type of broker engine. Valid values are ActiveMQ and RabbitMQ.",
              "type": "string"
            },
            "engineVersion": {
              "description": "Version of the broker engine. See the AmazonMQ Broker Engine docs for supported versions. For example, 5.15.0.",
              "type": "string"
            },
            "hostInstanceType": {
              "description": "Broker's instance type. For example, mq.t3.micro, mq.m5.large.",
              "type": "string"
            },
            "ldapServerMetadata": {
              "description": "Configuration block for the LDAP server used to authenticate and authorize connections to the broker. Not supported for engine_type RabbitMQ. Detailed below. (Currently, AWS may not process changes to LDAP server metadata.)",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "hosts": {
                    "description": "List of a fully qualified domain name of the LDAP server and an optional failover server.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "roleBase": {
                    "description": "Fully qualified name of the directory to search for a user’s groups.",
                    "type": "string"
                  },
                  "roleName": {
                    "description": "Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.",
                    "type": "string"
                  },
                  "roleSearchMatching": {
                    "description": "Search criteria for groups.",
                    "type": "string"
                  },
                  "roleSearchSubtree": {
                    "description": "Whether the directory search scope is the entire sub-tree.",
                    "type": "boolean"
                  },
                  "serviceAccountUsername": {
                    "description": "Service account username.",
                    "type": "string"
                  },
                  "userBase": {
                    "description": "Fully qualified name of the directory where you want to search for users.",
                    "type": "string"
                  },
                  "userRoleName": {
                    "description": "Specifies the name of the LDAP attribute for the user group membership.",
                    "type": "string"
                  },
                  "userSearchMatching": {
                    "description": "Search criteria for users.",
                    "type": "string"
                  },
                  "userSearchSubtree": {
                    "description": "Whether the directory search scope is the entire sub-tree.",
                    "type": "boolean"
                  }
                }
              }
            },
            "logs": {
              "description": "Configuration block for the logging configuration of the broker. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "audit": {
                    "description": "Enables audit logging. Auditing is only possible for engine_type of ActiveMQ. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to false.",
                    "type": "string"
                  },
                  "general": {
                    "description": "Enables general logging via CloudWatch. Defaults to false.",
                    "type": "boolean"
                  }
                }
              }
            },
            "maintenanceWindowStartTime": {
              "description": "Configuration block for the maintenance window start time. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "dayOfWeek": {
                    "description": "Day of the week, e.g., MONDAY, TUESDAY, or WEDNESDAY.",
                    "type": "string"
                  },
                  "timeOfDay": {
                    "description": "Time, in 24-hour format, e.g., 02:00.",
                    "type": "string"
                  },
                  "timeZone": {
                    "description": "Time zone in either the Country/City format or the UTC offset format, e.g., CET.",
                    "type": "string"
                  }
                }
              }
            },
            "publiclyAccessible": {
              "description": "Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.",
              "type": "boolean"
            },
            "storageType": {
              "description": "Storage type of the broker. For engine_type ActiveMQ, the valid values are efs and ebs, and the AWS-default is efs. For engine_type RabbitMQ, only ebs is supported. When using ebs, only the mq.m5 broker instance type family is supported.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "user": {
              "description": "Configuration block for broker users. For engine_type of RabbitMQ, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "consoleAccess": {
                    "description": "Whether to enable access to the ActiveMQ Web Console for the user. Applies to engine_type of ActiveMQ only.",
                    "type": "boolean"
                  },
                  "groups": {
                    "description": "List of groups (20 maximum) to which the ActiveMQ user belongs. Applies to engine_type of ActiveMQ only.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "username": {
                    "description": "Username of the user.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.brokerName) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.brokerName))",
          "message": "spec.forProvider.brokerName is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.engineType) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.engineType))",
          "message": "spec.forProvider.engineType is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.engineVersion) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.engineVersion))",
          "message": "spec.forProvider.engineVersion is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.hostInstanceType) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.hostInstanceType))",
          "message": "spec.forProvider.hostInstanceType is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.user) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.user))",
          "message": "spec.forProvider.user is a required parameter"
        }
      ]
    }
  }
}