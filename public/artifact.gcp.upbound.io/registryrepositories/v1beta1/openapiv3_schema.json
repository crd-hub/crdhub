{
  "$schema": "http://json-schema.org/schema#",
  "description": "RegistryRepository is the Schema for the RegistryRepositorys API. A repository for storing artifacts",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "artifact.gcp.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "RegistryRepository"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "RegistryRepositorySpec defines the desired state of RegistryRepository",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "description": {
              "description": "The user-provided description of the repository.",
              "type": "string"
            },
            "dockerConfig": {
              "description": "Docker repository config contains repository level configuration for the repositories of docker type. Structure is documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "immutableTags": {
                    "description": "The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.",
                    "type": "boolean"
                  }
                }
              }
            },
            "format": {
              "description": "The format of packages that are stored in the repository. Supported formats can be found here. You can only create alpha formats if you are a member of the alpha user group.",
              "type": "string"
            },
            "kmsKeyName": {
              "description": "The Cloud KMS resource name of the customer managed encryption key thatâ€™s used to encrypt the contents of the Repository. Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. This value may not be changed after the Repository has been created.",
              "type": "string"
            },
            "labels": {
              "description": "Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "location": {
              "description": "The name of the location this repository is located in.",
              "type": "string"
            },
            "mavenConfig": {
              "description": "MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type. Structure is documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "allowSnapshotOverwrites": {
                    "description": "The repository with this flag will allow publishing the same snapshot versions.",
                    "type": "boolean"
                  },
                  "versionPolicy": {
                    "description": "Version policy defines the versions that the registry will accept. Default value is VERSION_POLICY_UNSPECIFIED. Possible values are: VERSION_POLICY_UNSPECIFIED, RELEASE, SNAPSHOT.",
                    "type": "string"
                  }
                }
              }
            },
            "mode": {
              "description": "The mode configures the repository to serve artifacts from different sources. Default value is STANDARD_REPOSITORY. Possible values are: STANDARD_REPOSITORY, VIRTUAL_REPOSITORY, REMOTE_REPOSITORY.",
              "type": "string"
            },
            "project": {
              "description": "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
              "type": "string"
            },
            "remoteRepositoryConfig": {
              "description": "Configuration specific for a Remote Repository. Structure is documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "The description of the remote source.",
                    "type": "string"
                  },
                  "dockerRepository": {
                    "description": "Specific settings for a Docker remote repository. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "publicRepository": {
                          "description": "Address of the remote repository. Default value is PYPI. Possible values are: PYPI.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "mavenRepository": {
                    "description": "Specific settings for a Maven remote repository. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "publicRepository": {
                          "description": "Address of the remote repository. Default value is PYPI. Possible values are: PYPI.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "npmRepository": {
                    "description": "Specific settings for an Npm remote repository. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "publicRepository": {
                          "description": "Address of the remote repository. Default value is PYPI. Possible values are: PYPI.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "pythonRepository": {
                    "description": "Specific settings for a Python remote repository. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "publicRepository": {
                          "description": "Address of the remote repository. Default value is PYPI. Possible values are: PYPI.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "virtualRepositoryConfig": {
              "description": "Configuration specific for a Virtual Repository. Structure is documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "upstreamPolicies": {
                    "description": "Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The user-provided ID of the upstream policy.",
                          "type": "string"
                        },
                        "priority": {
                          "description": "Entries with a greater priority value take precedence in the pull order.",
                          "type": "number"
                        },
                        "repository": {
                          "description": "A reference to the repository resource, for example: \"projects/p1/locations/us-central1/repository/repo1\".",
                          "type": "string"
                        },
                        "repositoryRef": {
                          "description": "Reference to a RegistryRepository in artifact to populate repository.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name of the referenced object.",
                              "type": "string"
                            },
                            "policy": {
                              "description": "Policies for referencing.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "repositorySelector": {
                          "description": "Selector for a RegistryRepository in artifact to populate repository.",
                          "type": "object",
                          "properties": {
                            "matchControllerRef": {
                              "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                              "type": "boolean"
                            },
                            "matchLabels": {
                              "description": "MatchLabels ensures an object with matching labels is selected.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "policy": {
                              "description": "Policies for selection.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "description": {
              "description": "The user-provided description of the repository.",
              "type": "string"
            },
            "dockerConfig": {
              "description": "Docker repository config contains repository level configuration for the repositories of docker type. Structure is documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "immutableTags": {
                    "description": "The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.",
                    "type": "boolean"
                  }
                }
              }
            },
            "format": {
              "description": "The format of packages that are stored in the repository. Supported formats can be found here. You can only create alpha formats if you are a member of the alpha user group.",
              "type": "string"
            },
            "kmsKeyName": {
              "description": "The Cloud KMS resource name of the customer managed encryption key thatâ€™s used to encrypt the contents of the Repository. Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. This value may not be changed after the Repository has been created.",
              "type": "string"
            },
            "labels": {
              "description": "Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "mavenConfig": {
              "description": "MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type. Structure is documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "allowSnapshotOverwrites": {
                    "description": "The repository with this flag will allow publishing the same snapshot versions.",
                    "type": "boolean"
                  },
                  "versionPolicy": {
                    "description": "Version policy defines the versions that the registry will accept. Default value is VERSION_POLICY_UNSPECIFIED. Possible values are: VERSION_POLICY_UNSPECIFIED, RELEASE, SNAPSHOT.",
                    "type": "string"
                  }
                }
              }
            },
            "mode": {
              "description": "The mode configures the repository to serve artifacts from different sources. Default value is STANDARD_REPOSITORY. Possible values are: STANDARD_REPOSITORY, VIRTUAL_REPOSITORY, REMOTE_REPOSITORY.",
              "type": "string"
            },
            "project": {
              "description": "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
              "type": "string"
            },
            "remoteRepositoryConfig": {
              "description": "Configuration specific for a Remote Repository. Structure is documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "The description of the remote source.",
                    "type": "string"
                  },
                  "dockerRepository": {
                    "description": "Specific settings for a Docker remote repository. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "publicRepository": {
                          "description": "Address of the remote repository. Default value is PYPI. Possible values are: PYPI.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "mavenRepository": {
                    "description": "Specific settings for a Maven remote repository. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "publicRepository": {
                          "description": "Address of the remote repository. Default value is PYPI. Possible values are: PYPI.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "npmRepository": {
                    "description": "Specific settings for an Npm remote repository. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "publicRepository": {
                          "description": "Address of the remote repository. Default value is PYPI. Possible values are: PYPI.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "pythonRepository": {
                    "description": "Specific settings for a Python remote repository. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "publicRepository": {
                          "description": "Address of the remote repository. Default value is PYPI. Possible values are: PYPI.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "virtualRepositoryConfig": {
              "description": "Configuration specific for a Virtual Repository. Structure is documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "upstreamPolicies": {
                    "description": "Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository. Structure is documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The user-provided ID of the upstream policy.",
                          "type": "string"
                        },
                        "priority": {
                          "description": "Entries with a greater priority value take precedence in the pull order.",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.format) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.format))",
          "message": "spec.forProvider.format is a required parameter"
        }
      ]
    }
  }
}