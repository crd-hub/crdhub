{
  "$schema": "http://json-schema.org/schema#",
  "description": "Policy is the Schema for the Policys API. Provides an Application AutoScaling Policy resource.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "appautoscaling.aws.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "Policy"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "PolicySpec defines the desired state of Policy",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "policyType": {
              "description": "Policy type. Valid values are StepScaling and TargetTrackingScaling. Defaults to StepScaling. Certain services only support only one policy type. For more information see the Target Tracking Scaling Policies and Step Scaling Policies documentation.",
              "type": "string"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "resourceId": {
              "description": "Resource type and unique identifier string for the resource associated with the scaling policy. Documentation can be found in the ResourceId parameter at: AWS Application Auto Scaling API Reference",
              "type": "string"
            },
            "resourceIdRef": {
              "description": "Reference to a Target in appautoscaling to populate resourceId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "resourceIdSelector": {
              "description": "Selector for a Target in appautoscaling to populate resourceId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "scalableDimension": {
              "description": "Scalable dimension of the scalable target. Documentation can be found in the ScalableDimension parameter at: AWS Application Auto Scaling API Reference",
              "type": "string"
            },
            "scalableDimensionRef": {
              "description": "Reference to a Target in appautoscaling to populate scalableDimension.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "scalableDimensionSelector": {
              "description": "Selector for a Target in appautoscaling to populate scalableDimension.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "serviceNamespace": {
              "description": "AWS service namespace of the scalable target. Documentation can be found in the ServiceNamespace parameter at: AWS Application Auto Scaling API Reference",
              "type": "string"
            },
            "serviceNamespaceRef": {
              "description": "Reference to a Target in appautoscaling to populate serviceNamespace.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "serviceNamespaceSelector": {
              "description": "Selector for a Target in appautoscaling to populate serviceNamespace.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "stepScalingPolicyConfiguration": {
              "description": "Step scaling policy configuration, requires policy_type = \"StepScaling\" (default). See supported fields below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "adjustmentType": {
                    "description": "Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.",
                    "type": "string"
                  },
                  "cooldown": {
                    "description": "Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.",
                    "type": "number"
                  },
                  "metricAggregationType": {
                    "description": "Aggregation type for the policy's metrics. Valid values are \"Minimum\", \"Maximum\", and \"Average\". Without a value, AWS will treat the aggregation type as \"Average\".",
                    "type": "string"
                  },
                  "minAdjustmentMagnitude": {
                    "description": "Minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.",
                    "type": "number"
                  },
                  "stepAdjustment": {
                    "description": "Set of adjustments that manage scaling. These have the following structure:",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "metricIntervalLowerBound": {
                          "description": "Lower bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as negative infinity.",
                          "type": "string"
                        },
                        "metricIntervalUpperBound": {
                          "description": "Upper bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as infinity. The upper bound must be greater than the lower bound.",
                          "type": "string"
                        },
                        "scalingAdjustment": {
                          "description": "Number of members by which to scale, when the adjustment bounds are breached. A positive value scales up. A negative value scales down.",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "targetTrackingScalingPolicyConfiguration": {
              "description": "Target tracking policy, requires policy_type = \"TargetTrackingScaling\". See supported fields below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "customizedMetricSpecification": {
                    "description": "Custom CloudWatch metric. Documentation can be found  at: AWS Customized Metric Specification. See supported fields below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "dimensions": {
                          "description": "Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the dimension.",
                                "type": "string"
                              },
                              "value": {
                                "description": "Value of the dimension.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "metricName": {
                          "description": "Name of the metric.",
                          "type": "string"
                        },
                        "metrics": {
                          "description": "Metrics to include, as a metric data query.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "expression": {
                                "description": "Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.",
                                "type": "string"
                              },
                              "id": {
                                "description": "Short name for the metric used in target tracking scaling policy.",
                                "type": "string"
                              },
                              "label": {
                                "description": "Human-readable label for this metric or expression.",
                                "type": "string"
                              },
                              "metricStat": {
                                "description": "Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "metric": {
                                      "description": "Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.",
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "dimensions": {
                                            "description": "Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.",
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "description": "Name of the dimension.",
                                                  "type": "string"
                                                },
                                                "value": {
                                                  "description": "Value of the dimension.",
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          },
                                          "metricName": {
                                            "description": "Name of the metric.",
                                            "type": "string"
                                          },
                                          "namespace": {
                                            "description": "Namespace of the metric.",
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "stat": {
                                      "description": "Statistic of the metrics to return.",
                                      "type": "string"
                                    },
                                    "unit": {
                                      "description": "Unit of the metric.",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "returnData": {
                                "description": "Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true",
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "namespace": {
                          "description": "Namespace of the metric.",
                          "type": "string"
                        },
                        "statistic": {
                          "description": "Statistic of the metric. Valid values: Average, Minimum, Maximum, SampleCount, and Sum.",
                          "type": "string"
                        },
                        "unit": {
                          "description": "Unit of the metric.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "disableScaleIn": {
                    "description": "Whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.",
                    "type": "boolean"
                  },
                  "predefinedMetricSpecification": {
                    "description": "Predefined metric. See supported fields below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "predefinedMetricType": {
                          "description": "Metric type.",
                          "type": "string"
                        },
                        "resourceLabel": {
                          "description": "Reserved for future use if the predefined_metric_type is not ALBRequestCountPerTarget. If the predefined_metric_type is ALBRequestCountPerTarget, you must specify this argument. Documentation can be found at: AWS Predefined Scaling Metric Specification. Must be less than or equal to 1023 characters in length.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "scaleInCooldown": {
                    "description": "Amount of time, in seconds, after a scale in activity completes before another scale in activity can start.",
                    "type": "number"
                  },
                  "scaleOutCooldown": {
                    "description": "Amount of time, in seconds, after a scale out activity completes before another scale out activity can start.",
                    "type": "number"
                  },
                  "targetValue": {
                    "description": "Target value for the metric.",
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "policyType": {
              "description": "Policy type. Valid values are StepScaling and TargetTrackingScaling. Defaults to StepScaling. Certain services only support only one policy type. For more information see the Target Tracking Scaling Policies and Step Scaling Policies documentation.",
              "type": "string"
            },
            "stepScalingPolicyConfiguration": {
              "description": "Step scaling policy configuration, requires policy_type = \"StepScaling\" (default). See supported fields below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "adjustmentType": {
                    "description": "Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.",
                    "type": "string"
                  },
                  "cooldown": {
                    "description": "Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.",
                    "type": "number"
                  },
                  "metricAggregationType": {
                    "description": "Aggregation type for the policy's metrics. Valid values are \"Minimum\", \"Maximum\", and \"Average\". Without a value, AWS will treat the aggregation type as \"Average\".",
                    "type": "string"
                  },
                  "minAdjustmentMagnitude": {
                    "description": "Minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.",
                    "type": "number"
                  },
                  "stepAdjustment": {
                    "description": "Set of adjustments that manage scaling. These have the following structure:",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "metricIntervalLowerBound": {
                          "description": "Lower bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as negative infinity.",
                          "type": "string"
                        },
                        "metricIntervalUpperBound": {
                          "description": "Upper bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as infinity. The upper bound must be greater than the lower bound.",
                          "type": "string"
                        },
                        "scalingAdjustment": {
                          "description": "Number of members by which to scale, when the adjustment bounds are breached. A positive value scales up. A negative value scales down.",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "targetTrackingScalingPolicyConfiguration": {
              "description": "Target tracking policy, requires policy_type = \"TargetTrackingScaling\". See supported fields below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "customizedMetricSpecification": {
                    "description": "Custom CloudWatch metric. Documentation can be found  at: AWS Customized Metric Specification. See supported fields below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "dimensions": {
                          "description": "Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the dimension.",
                                "type": "string"
                              },
                              "value": {
                                "description": "Value of the dimension.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "metricName": {
                          "description": "Name of the metric.",
                          "type": "string"
                        },
                        "metrics": {
                          "description": "Metrics to include, as a metric data query.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "expression": {
                                "description": "Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.",
                                "type": "string"
                              },
                              "id": {
                                "description": "Short name for the metric used in target tracking scaling policy.",
                                "type": "string"
                              },
                              "label": {
                                "description": "Human-readable label for this metric or expression.",
                                "type": "string"
                              },
                              "metricStat": {
                                "description": "Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "metric": {
                                      "description": "Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.",
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "dimensions": {
                                            "description": "Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.",
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "description": "Name of the dimension.",
                                                  "type": "string"
                                                },
                                                "value": {
                                                  "description": "Value of the dimension.",
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          },
                                          "metricName": {
                                            "description": "Name of the metric.",
                                            "type": "string"
                                          },
                                          "namespace": {
                                            "description": "Namespace of the metric.",
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "stat": {
                                      "description": "Statistic of the metrics to return.",
                                      "type": "string"
                                    },
                                    "unit": {
                                      "description": "Unit of the metric.",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "returnData": {
                                "description": "Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true",
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "namespace": {
                          "description": "Namespace of the metric.",
                          "type": "string"
                        },
                        "statistic": {
                          "description": "Statistic of the metric. Valid values: Average, Minimum, Maximum, SampleCount, and Sum.",
                          "type": "string"
                        },
                        "unit": {
                          "description": "Unit of the metric.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "disableScaleIn": {
                    "description": "Whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.",
                    "type": "boolean"
                  },
                  "predefinedMetricSpecification": {
                    "description": "Predefined metric. See supported fields below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "predefinedMetricType": {
                          "description": "Metric type.",
                          "type": "string"
                        },
                        "resourceLabel": {
                          "description": "Reserved for future use if the predefined_metric_type is not ALBRequestCountPerTarget. If the predefined_metric_type is ALBRequestCountPerTarget, you must specify this argument. Documentation can be found at: AWS Predefined Scaling Metric Specification. Must be less than or equal to 1023 characters in length.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "scaleInCooldown": {
                    "description": "Amount of time, in seconds, after a scale in activity completes before another scale in activity can start.",
                    "type": "number"
                  },
                  "scaleOutCooldown": {
                    "description": "Amount of time, in seconds, after a scale out activity completes before another scale out activity can start.",
                    "type": "number"
                  },
                  "targetValue": {
                    "description": "Target value for the metric.",
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      }
    }
  }
}