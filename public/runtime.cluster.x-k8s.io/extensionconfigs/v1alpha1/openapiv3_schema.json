{
  "$schema": "http://json-schema.org/schema#",
  "description": "ExtensionConfig is the Schema for the ExtensionConfig API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "runtime.cluster.x-k8s.io/v1alpha1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "ExtensionConfig"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "ExtensionConfigSpec is the desired state of the ExtensionConfig",
      "type": "object",
      "required": [
        "clientConfig"
      ],
      "properties": {
        "clientConfig": {
          "description": "ClientConfig defines how to communicate with the Extension server.",
          "type": "object",
          "properties": {
            "caBundle": {
              "description": "CABundle is a PEM encoded CA bundle which will be used to validate the Extension server's server certificate.",
              "type": "string",
              "format": "byte"
            },
            "service": {
              "description": "Service is a reference to the Kubernetes service for the Extension server.\nNote: Exactly one of `url` or `service` must be specified.\n\n\nIf the Extension server is running within a cluster, then you should use `service`.",
              "type": "object",
              "required": [
                "name",
                "namespace"
              ],
              "properties": {
                "name": {
                  "description": "Name is the name of the service.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace is the namespace of the service.",
                  "type": "string"
                },
                "path": {
                  "description": "Path is an optional URL path and if present may be any string permissible in\na URL. If a path is set it will be used as prefix to the hook-specific path.",
                  "type": "string"
                },
                "port": {
                  "description": "Port is the port on the service that's hosting the Extension server.\nDefaults to 443.\nPort should be a valid port number (1-65535, inclusive).",
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "url": {
              "description": "URL gives the location of the Extension server, in standard URL form\n(`scheme://host:port/path`).\nNote: Exactly one of `url` or `service` must be specified.\n\n\nThe scheme must be \"https\".\n\n\nThe `host` should not refer to a service running in the cluster; use\nthe `service` field instead.\n\n\nA path is optional, and if present may be any string permissible in\na URL. If a path is set it will be used as prefix to the hook-specific path.\n\n\nAttempting to use a user or basic auth e.g. \"user:password@\" is not\nallowed. Fragments (\"#...\") and query parameters (\"?...\") are not\nallowed either.",
              "type": "string"
            }
          }
        },
        "namespaceSelector": {
          "description": "NamespaceSelector decides whether to call the hook for an object based\non whether the namespace for that object matches the selector.\nDefaults to the empty LabelSelector, which matches all objects.",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "atomic"
                  }
                }
              },
              "x-kubernetes-list-type": "atomic"
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "x-kubernetes-map-type": "atomic"
        },
        "settings": {
          "description": "Settings defines key value pairs to be passed to all calls\nto all supported RuntimeExtensions.\nNote: Settings can be overridden on the ClusterClass.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    }
  }
}