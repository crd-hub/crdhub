{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "datasets.bigquery.gcp.upbound.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.13.0"
    }
  },
  "spec": {
    "group": "bigquery.gcp.upbound.io",
    "names": {
      "plural": "datasets",
      "singular": "dataset",
      "kind": "Dataset",
      "listKind": "DatasetList",
      "categories": [
        "crossplane",
        "managed",
        "gcp"
      ]
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "Dataset is the Schema for the Datasets API. Datasets allow you to organize and control access to your tables.",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "DatasetSpec defines the desired state of Dataset",
                "type": "object",
                "required": [
                  "forProvider"
                ],
                "properties": {
                  "deletionPolicy": {
                    "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
                    "type": "string",
                    "default": "Delete",
                    "enum": [
                      "Orphan",
                      "Delete"
                    ]
                  },
                  "forProvider": {
                    "type": "object",
                    "properties": {
                      "access": {
                        "description": "An array of objects that define dataset access for one or more entities. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "dataset": {
                              "description": "Grants all resources of particular types in a particular dataset read access to the current dataset. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "dataset": {
                                    "description": "The dataset this entry applies to Structure is documented below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "datasetId": {
                                          "description": "The ID of the dataset containing this table.",
                                          "type": "string"
                                        },
                                        "datasetIdRef": {
                                          "description": "Reference to a Dataset in bigquery to populate datasetId.",
                                          "type": "object",
                                          "required": [
                                            "name"
                                          ],
                                          "properties": {
                                            "name": {
                                              "description": "Name of the referenced object.",
                                              "type": "string"
                                            },
                                            "policy": {
                                              "description": "Policies for referencing.",
                                              "type": "object",
                                              "properties": {
                                                "resolution": {
                                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                                  "type": "string",
                                                  "default": "Required",
                                                  "enum": [
                                                    "Required",
                                                    "Optional"
                                                  ]
                                                },
                                                "resolve": {
                                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                                  "type": "string",
                                                  "enum": [
                                                    "Always",
                                                    "IfNotPresent"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "datasetIdSelector": {
                                          "description": "Selector for a Dataset in bigquery to populate datasetId.",
                                          "type": "object",
                                          "properties": {
                                            "matchControllerRef": {
                                              "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                              "type": "boolean"
                                            },
                                            "matchLabels": {
                                              "description": "MatchLabels ensures an object with matching labels is selected.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            },
                                            "policy": {
                                              "description": "Policies for selection.",
                                              "type": "object",
                                              "properties": {
                                                "resolution": {
                                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                                  "type": "string",
                                                  "default": "Required",
                                                  "enum": [
                                                    "Required",
                                                    "Optional"
                                                  ]
                                                },
                                                "resolve": {
                                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                                  "type": "string",
                                                  "enum": [
                                                    "Always",
                                                    "IfNotPresent"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "projectId": {
                                          "description": "The ID of the project containing this table.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "targetTypes": {
                                    "description": "Which resources in the dataset this entry applies to. Currently, only views are supported, but additional target types may be added in the future. Possible values: VIEWS",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "domain": {
                              "description": "A domain to grant access to. Any users signed in with the domain specified will be granted the specified access",
                              "type": "string"
                            },
                            "groupByEmail": {
                              "description": "An email address of a Google Group to grant access to.",
                              "type": "string"
                            },
                            "role": {
                              "description": "Describes the rights granted to the user specified by the other member of the access object. Basic, predefined, and custom roles are supported. Predefined roles that have equivalent basic roles are swapped by the API to their basic counterparts. See official docs.",
                              "type": "string"
                            },
                            "routine": {
                              "description": "A routine from a different dataset to grant access to. Queries executed against that routine will have read access to tables in this dataset. The role field is not required when this field is set. If that routine is updated by any user, access to the routine needs to be granted again via an update operation. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "datasetId": {
                                    "description": "The ID of the dataset containing this table.",
                                    "type": "string"
                                  },
                                  "datasetIdRef": {
                                    "description": "Reference to a Routine in bigquery to populate datasetId.",
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "Name of the referenced object.",
                                        "type": "string"
                                      },
                                      "policy": {
                                        "description": "Policies for referencing.",
                                        "type": "object",
                                        "properties": {
                                          "resolution": {
                                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                            "type": "string",
                                            "default": "Required",
                                            "enum": [
                                              "Required",
                                              "Optional"
                                            ]
                                          },
                                          "resolve": {
                                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                            "type": "string",
                                            "enum": [
                                              "Always",
                                              "IfNotPresent"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "datasetIdSelector": {
                                    "description": "Selector for a Routine in bigquery to populate datasetId.",
                                    "type": "object",
                                    "properties": {
                                      "matchControllerRef": {
                                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                        "type": "boolean"
                                      },
                                      "matchLabels": {
                                        "description": "MatchLabels ensures an object with matching labels is selected.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      },
                                      "policy": {
                                        "description": "Policies for selection.",
                                        "type": "object",
                                        "properties": {
                                          "resolution": {
                                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                            "type": "string",
                                            "default": "Required",
                                            "enum": [
                                              "Required",
                                              "Optional"
                                            ]
                                          },
                                          "resolve": {
                                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                            "type": "string",
                                            "enum": [
                                              "Always",
                                              "IfNotPresent"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "projectId": {
                                    "description": "The ID of the project containing this table.",
                                    "type": "string"
                                  },
                                  "projectIdRef": {
                                    "description": "Reference to a Routine in bigquery to populate projectId.",
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "Name of the referenced object.",
                                        "type": "string"
                                      },
                                      "policy": {
                                        "description": "Policies for referencing.",
                                        "type": "object",
                                        "properties": {
                                          "resolution": {
                                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                            "type": "string",
                                            "default": "Required",
                                            "enum": [
                                              "Required",
                                              "Optional"
                                            ]
                                          },
                                          "resolve": {
                                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                            "type": "string",
                                            "enum": [
                                              "Always",
                                              "IfNotPresent"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "projectIdSelector": {
                                    "description": "Selector for a Routine in bigquery to populate projectId.",
                                    "type": "object",
                                    "properties": {
                                      "matchControllerRef": {
                                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                        "type": "boolean"
                                      },
                                      "matchLabels": {
                                        "description": "MatchLabels ensures an object with matching labels is selected.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      },
                                      "policy": {
                                        "description": "Policies for selection.",
                                        "type": "object",
                                        "properties": {
                                          "resolution": {
                                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                            "type": "string",
                                            "default": "Required",
                                            "enum": [
                                              "Required",
                                              "Optional"
                                            ]
                                          },
                                          "resolve": {
                                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                            "type": "string",
                                            "enum": [
                                              "Always",
                                              "IfNotPresent"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "routineId": {
                                    "description": "The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.",
                                    "type": "string"
                                  },
                                  "routineIdRef": {
                                    "description": "Reference to a Routine in bigquery to populate routineId.",
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "Name of the referenced object.",
                                        "type": "string"
                                      },
                                      "policy": {
                                        "description": "Policies for referencing.",
                                        "type": "object",
                                        "properties": {
                                          "resolution": {
                                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                            "type": "string",
                                            "default": "Required",
                                            "enum": [
                                              "Required",
                                              "Optional"
                                            ]
                                          },
                                          "resolve": {
                                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                            "type": "string",
                                            "enum": [
                                              "Always",
                                              "IfNotPresent"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "routineIdSelector": {
                                    "description": "Selector for a Routine in bigquery to populate routineId.",
                                    "type": "object",
                                    "properties": {
                                      "matchControllerRef": {
                                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                        "type": "boolean"
                                      },
                                      "matchLabels": {
                                        "description": "MatchLabels ensures an object with matching labels is selected.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      },
                                      "policy": {
                                        "description": "Policies for selection.",
                                        "type": "object",
                                        "properties": {
                                          "resolution": {
                                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                            "type": "string",
                                            "default": "Required",
                                            "enum": [
                                              "Required",
                                              "Optional"
                                            ]
                                          },
                                          "resolve": {
                                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                            "type": "string",
                                            "enum": [
                                              "Always",
                                              "IfNotPresent"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "specialGroup": {
                              "description": "A special group to grant access to. Possible values include:",
                              "type": "string"
                            },
                            "userByEmail": {
                              "description": "An email address of a user to grant access to. For example: fred@example.com",
                              "type": "string"
                            },
                            "userByEmailRef": {
                              "description": "Reference to a ServiceAccount in cloudplatform to populate userByEmail.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name of the referenced object.",
                                  "type": "string"
                                },
                                "policy": {
                                  "description": "Policies for referencing.",
                                  "type": "object",
                                  "properties": {
                                    "resolution": {
                                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                      "type": "string",
                                      "default": "Required",
                                      "enum": [
                                        "Required",
                                        "Optional"
                                      ]
                                    },
                                    "resolve": {
                                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                      "type": "string",
                                      "enum": [
                                        "Always",
                                        "IfNotPresent"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "userByEmailSelector": {
                              "description": "Selector for a ServiceAccount in cloudplatform to populate userByEmail.",
                              "type": "object",
                              "properties": {
                                "matchControllerRef": {
                                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                  "type": "boolean"
                                },
                                "matchLabels": {
                                  "description": "MatchLabels ensures an object with matching labels is selected.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "policy": {
                                  "description": "Policies for selection.",
                                  "type": "object",
                                  "properties": {
                                    "resolution": {
                                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                      "type": "string",
                                      "default": "Required",
                                      "enum": [
                                        "Required",
                                        "Optional"
                                      ]
                                    },
                                    "resolve": {
                                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                      "type": "string",
                                      "enum": [
                                        "Always",
                                        "IfNotPresent"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "view": {
                              "description": "A view from a different dataset to grant access to. Queries executed against that view will have read access to tables in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to the view needs to be granted again via an update operation. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "datasetId": {
                                    "description": "The ID of the dataset containing this table.",
                                    "type": "string"
                                  },
                                  "projectId": {
                                    "description": "The ID of the project containing this table.",
                                    "type": "string"
                                  },
                                  "tableId": {
                                    "description": "The ID of the table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.",
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "defaultCollation": {
                        "description": "Defines the default collation specification of future tables created in the dataset. If a table is created in this dataset without table-level default collation, then the table inherits the dataset default collation, which is applied to the string fields that do not have explicit collation specified. A change to this field affects only tables created afterwards, and does not alter the existing tables. The following values are supported:",
                        "type": "string"
                      },
                      "defaultEncryptionConfiguration": {
                        "description": "The default encryption key for all tables in the dataset. Once this property is set, all newly-created partitioned tables in the dataset will have encryption key set to this value, unless table creation request (or query) overrides the key. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "kmsKeyName": {
                              "description": "Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.",
                              "type": "string"
                            },
                            "kmsKeyNameRef": {
                              "description": "Reference to a CryptoKey in kms to populate kmsKeyName.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name of the referenced object.",
                                  "type": "string"
                                },
                                "policy": {
                                  "description": "Policies for referencing.",
                                  "type": "object",
                                  "properties": {
                                    "resolution": {
                                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                      "type": "string",
                                      "default": "Required",
                                      "enum": [
                                        "Required",
                                        "Optional"
                                      ]
                                    },
                                    "resolve": {
                                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                      "type": "string",
                                      "enum": [
                                        "Always",
                                        "IfNotPresent"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "kmsKeyNameSelector": {
                              "description": "Selector for a CryptoKey in kms to populate kmsKeyName.",
                              "type": "object",
                              "properties": {
                                "matchControllerRef": {
                                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                  "type": "boolean"
                                },
                                "matchLabels": {
                                  "description": "MatchLabels ensures an object with matching labels is selected.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "policy": {
                                  "description": "Policies for selection.",
                                  "type": "object",
                                  "properties": {
                                    "resolution": {
                                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                      "type": "string",
                                      "default": "Required",
                                      "enum": [
                                        "Required",
                                        "Optional"
                                      ]
                                    },
                                    "resolve": {
                                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                      "type": "string",
                                      "enum": [
                                        "Always",
                                        "IfNotPresent"
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "defaultPartitionExpirationMs": {
                        "description": "The default partition expiration for all partitioned tables in the dataset, in milliseconds.",
                        "type": "number"
                      },
                      "defaultTableExpirationMs": {
                        "description": "The default lifetime of all tables in the dataset, in milliseconds. The minimum value is 3600000 milliseconds (one hour).",
                        "type": "number"
                      },
                      "deleteContentsOnDestroy": {
                        "description": "If set to true, delete all the tables in the dataset when destroying the resource; otherwise, destroying the resource will fail if tables are present.",
                        "type": "boolean"
                      },
                      "description": {
                        "description": "A user-friendly description of the dataset",
                        "type": "string"
                      },
                      "friendlyName": {
                        "description": "A descriptive name for the dataset",
                        "type": "string"
                      },
                      "isCaseInsensitive": {
                        "description": "TRUE if the dataset and its table names are case-insensitive, otherwise FALSE. By default, this is FALSE, which means the dataset and its table names are case-sensitive. This field does not affect routine references.",
                        "type": "boolean"
                      },
                      "labels": {
                        "description": "The labels associated with this dataset. You can use these to organize and group your datasets",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "location": {
                        "description": "The geographic location where the dataset should reside. See official docs.",
                        "type": "string"
                      },
                      "maxTimeTravelHours": {
                        "description": "Defines the time travel window in hours. The value can be from 48 to 168 hours (2 to 7 days).",
                        "type": "string"
                      },
                      "project": {
                        "description": "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
                        "type": "string"
                      },
                      "storageBillingModel": {
                        "description": "Specifies the storage billing model for the dataset. Set this flag value to LOGICAL to use logical bytes for storage billing, or to PHYSICAL to use physical bytes instead. LOGICAL is the default if this flag isn't specified.",
                        "type": "string"
                      }
                    }
                  },
                  "initProvider": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
                    "type": "object",
                    "properties": {
                      "access": {
                        "description": "An array of objects that define dataset access for one or more entities. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "dataset": {
                              "description": "Grants all resources of particular types in a particular dataset read access to the current dataset. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "dataset": {
                                    "description": "The dataset this entry applies to Structure is documented below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "projectId": {
                                          "description": "The ID of the project containing this table.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "targetTypes": {
                                    "description": "Which resources in the dataset this entry applies to. Currently, only views are supported, but additional target types may be added in the future. Possible values: VIEWS",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "domain": {
                              "description": "A domain to grant access to. Any users signed in with the domain specified will be granted the specified access",
                              "type": "string"
                            },
                            "groupByEmail": {
                              "description": "An email address of a Google Group to grant access to.",
                              "type": "string"
                            },
                            "role": {
                              "description": "Describes the rights granted to the user specified by the other member of the access object. Basic, predefined, and custom roles are supported. Predefined roles that have equivalent basic roles are swapped by the API to their basic counterparts. See official docs.",
                              "type": "string"
                            },
                            "routine": {
                              "description": "A routine from a different dataset to grant access to. Queries executed against that routine will have read access to tables in this dataset. The role field is not required when this field is set. If that routine is updated by any user, access to the routine needs to be granted again via an update operation. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            },
                            "specialGroup": {
                              "description": "A special group to grant access to. Possible values include:",
                              "type": "string"
                            },
                            "view": {
                              "description": "A view from a different dataset to grant access to. Queries executed against that view will have read access to tables in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to the view needs to be granted again via an update operation. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "datasetId": {
                                    "description": "The ID of the dataset containing this table.",
                                    "type": "string"
                                  },
                                  "projectId": {
                                    "description": "The ID of the project containing this table.",
                                    "type": "string"
                                  },
                                  "tableId": {
                                    "description": "The ID of the table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.",
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "defaultCollation": {
                        "description": "Defines the default collation specification of future tables created in the dataset. If a table is created in this dataset without table-level default collation, then the table inherits the dataset default collation, which is applied to the string fields that do not have explicit collation specified. A change to this field affects only tables created afterwards, and does not alter the existing tables. The following values are supported:",
                        "type": "string"
                      },
                      "defaultEncryptionConfiguration": {
                        "description": "The default encryption key for all tables in the dataset. Once this property is set, all newly-created partitioned tables in the dataset will have encryption key set to this value, unless table creation request (or query) overrides the key. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "defaultPartitionExpirationMs": {
                        "description": "The default partition expiration for all partitioned tables in the dataset, in milliseconds.",
                        "type": "number"
                      },
                      "defaultTableExpirationMs": {
                        "description": "The default lifetime of all tables in the dataset, in milliseconds. The minimum value is 3600000 milliseconds (one hour).",
                        "type": "number"
                      },
                      "deleteContentsOnDestroy": {
                        "description": "If set to true, delete all the tables in the dataset when destroying the resource; otherwise, destroying the resource will fail if tables are present.",
                        "type": "boolean"
                      },
                      "description": {
                        "description": "A user-friendly description of the dataset",
                        "type": "string"
                      },
                      "friendlyName": {
                        "description": "A descriptive name for the dataset",
                        "type": "string"
                      },
                      "isCaseInsensitive": {
                        "description": "TRUE if the dataset and its table names are case-insensitive, otherwise FALSE. By default, this is FALSE, which means the dataset and its table names are case-sensitive. This field does not affect routine references.",
                        "type": "boolean"
                      },
                      "labels": {
                        "description": "The labels associated with this dataset. You can use these to organize and group your datasets",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "location": {
                        "description": "The geographic location where the dataset should reside. See official docs.",
                        "type": "string"
                      },
                      "maxTimeTravelHours": {
                        "description": "Defines the time travel window in hours. The value can be from 48 to 168 hours (2 to 7 days).",
                        "type": "string"
                      },
                      "storageBillingModel": {
                        "description": "Specifies the storage billing model for the dataset. Set this flag value to LOGICAL to use logical bytes for storage billing, or to PHYSICAL to use physical bytes instead. LOGICAL is the default if this flag isn't specified.",
                        "type": "string"
                      }
                    }
                  },
                  "managementPolicies": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
                    "type": "array",
                    "default": [
                      "*"
                    ],
                    "items": {
                      "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
                      "type": "string",
                      "enum": [
                        "Observe",
                        "Create",
                        "Update",
                        "Delete",
                        "LateInitialize",
                        "*"
                      ]
                    }
                  },
                  "providerConfigRef": {
                    "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
                    "type": "object",
                    "default": {
                      "name": "default"
                    },
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "publishConnectionDetailsTo": {
                    "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "configRef": {
                        "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
                        "type": "object",
                        "default": {
                          "name": "default"
                        },
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "Metadata is the metadata for connection secret.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "type": {
                            "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name of the connection secret.",
                        "type": "string"
                      }
                    }
                  },
                  "writeConnectionSecretToRef": {
                    "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
                    "type": "object",
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "status": {
                "description": "DatasetStatus defines the observed state of Dataset.",
                "type": "object",
                "properties": {
                  "atProvider": {
                    "type": "object",
                    "properties": {
                      "access": {
                        "description": "An array of objects that define dataset access for one or more entities. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "dataset": {
                              "description": "Grants all resources of particular types in a particular dataset read access to the current dataset. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "dataset": {
                                    "description": "The dataset this entry applies to Structure is documented below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "datasetId": {
                                          "description": "The ID of the dataset containing this table.",
                                          "type": "string"
                                        },
                                        "projectId": {
                                          "description": "The ID of the project containing this table.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "targetTypes": {
                                    "description": "Which resources in the dataset this entry applies to. Currently, only views are supported, but additional target types may be added in the future. Possible values: VIEWS",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "domain": {
                              "description": "A domain to grant access to. Any users signed in with the domain specified will be granted the specified access",
                              "type": "string"
                            },
                            "groupByEmail": {
                              "description": "An email address of a Google Group to grant access to.",
                              "type": "string"
                            },
                            "role": {
                              "description": "Describes the rights granted to the user specified by the other member of the access object. Basic, predefined, and custom roles are supported. Predefined roles that have equivalent basic roles are swapped by the API to their basic counterparts. See official docs.",
                              "type": "string"
                            },
                            "routine": {
                              "description": "A routine from a different dataset to grant access to. Queries executed against that routine will have read access to tables in this dataset. The role field is not required when this field is set. If that routine is updated by any user, access to the routine needs to be granted again via an update operation. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "datasetId": {
                                    "description": "The ID of the dataset containing this table.",
                                    "type": "string"
                                  },
                                  "projectId": {
                                    "description": "The ID of the project containing this table.",
                                    "type": "string"
                                  },
                                  "routineId": {
                                    "description": "The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "specialGroup": {
                              "description": "A special group to grant access to. Possible values include:",
                              "type": "string"
                            },
                            "userByEmail": {
                              "description": "An email address of a user to grant access to. For example: fred@example.com",
                              "type": "string"
                            },
                            "view": {
                              "description": "A view from a different dataset to grant access to. Queries executed against that view will have read access to tables in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to the view needs to be granted again via an update operation. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "datasetId": {
                                    "description": "The ID of the dataset containing this table.",
                                    "type": "string"
                                  },
                                  "projectId": {
                                    "description": "The ID of the project containing this table.",
                                    "type": "string"
                                  },
                                  "tableId": {
                                    "description": "The ID of the table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.",
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "creationTime": {
                        "description": "The time when this dataset was created, in milliseconds since the epoch.",
                        "type": "number"
                      },
                      "defaultCollation": {
                        "description": "Defines the default collation specification of future tables created in the dataset. If a table is created in this dataset without table-level default collation, then the table inherits the dataset default collation, which is applied to the string fields that do not have explicit collation specified. A change to this field affects only tables created afterwards, and does not alter the existing tables. The following values are supported:",
                        "type": "string"
                      },
                      "defaultEncryptionConfiguration": {
                        "description": "The default encryption key for all tables in the dataset. Once this property is set, all newly-created partitioned tables in the dataset will have encryption key set to this value, unless table creation request (or query) overrides the key. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "kmsKeyName": {
                              "description": "Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "defaultPartitionExpirationMs": {
                        "description": "The default partition expiration for all partitioned tables in the dataset, in milliseconds.",
                        "type": "number"
                      },
                      "defaultTableExpirationMs": {
                        "description": "The default lifetime of all tables in the dataset, in milliseconds. The minimum value is 3600000 milliseconds (one hour).",
                        "type": "number"
                      },
                      "deleteContentsOnDestroy": {
                        "description": "If set to true, delete all the tables in the dataset when destroying the resource; otherwise, destroying the resource will fail if tables are present.",
                        "type": "boolean"
                      },
                      "description": {
                        "description": "A user-friendly description of the dataset",
                        "type": "string"
                      },
                      "etag": {
                        "description": "A hash of the resource.",
                        "type": "string"
                      },
                      "friendlyName": {
                        "description": "A descriptive name for the dataset",
                        "type": "string"
                      },
                      "id": {
                        "description": "an identifier for the resource with format projects/{{project}}/datasets/{{dataset_id}}",
                        "type": "string"
                      },
                      "isCaseInsensitive": {
                        "description": "TRUE if the dataset and its table names are case-insensitive, otherwise FALSE. By default, this is FALSE, which means the dataset and its table names are case-sensitive. This field does not affect routine references.",
                        "type": "boolean"
                      },
                      "labels": {
                        "description": "The labels associated with this dataset. You can use these to organize and group your datasets",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "lastModifiedTime": {
                        "description": "The date when this dataset or any of its tables was last modified, in milliseconds since the epoch.",
                        "type": "number"
                      },
                      "location": {
                        "description": "The geographic location where the dataset should reside. See official docs.",
                        "type": "string"
                      },
                      "maxTimeTravelHours": {
                        "description": "Defines the time travel window in hours. The value can be from 48 to 168 hours (2 to 7 days).",
                        "type": "string"
                      },
                      "project": {
                        "description": "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
                        "type": "string"
                      },
                      "selfLink": {
                        "description": "The URI of the created resource.",
                        "type": "string"
                      },
                      "storageBillingModel": {
                        "description": "Specifies the storage billing model for the dataset. Set this flag value to LOGICAL to use logical bytes for storage billing, or to PHYSICAL to use physical bytes instead. LOGICAL is the default if this flag isn't specified.",
                        "type": "string"
                      }
                    }
                  },
                  "conditions": {
                    "description": "Conditions of the resource.",
                    "type": "array",
                    "items": {
                      "description": "A Condition that may apply to a resource.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "A Reason for this condition's last transition from one status to another.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of this condition; is it currently True, False, or Unknown?",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "READY",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
          },
          {
            "name": "SYNCED",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Synced')].status"
          },
          {
            "name": "EXTERNAL-NAME",
            "type": "string",
            "jsonPath": ".metadata.annotations.crossplane\\.io/external-name"
          },
          {
            "name": "AGE",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}