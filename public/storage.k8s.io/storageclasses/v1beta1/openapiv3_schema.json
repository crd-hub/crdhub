{
  "$schema": "http://json-schema.org/schema#",
  "description": "StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned. \n StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.",
  "type": "object",
  "required": [
    "provisioner"
  ],
  "properties": {
    "allowVolumeExpansion": {
      "description": "AllowVolumeExpansion shows whether the storage class allow volume expand",
      "type": "boolean"
    },
    "allowedTopologies": {
      "description": "Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.",
      "type": "array",
      "items": {
        "description": "A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.",
        "type": "object",
        "properties": {
          "matchLabelExpressions": {
            "description": "A list of topology selector requirements by labels.",
            "type": "array",
            "items": {
              "description": "A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.",
              "type": "object",
              "required": [
                "key",
                "values"
              ],
              "properties": {
                "key": {
                  "description": "The label key that the selector applies to.",
                  "type": "string"
                },
                "values": {
                  "description": "An array of string values. One value must match the label to be selected. Each entry in Values is ORed.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "storage.k8s.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "StorageClass"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "mountOptions": {
      "description": "Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "parameters": {
      "description": "Parameters holds the parameters for the provisioner that should create volumes of this storage class.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "provisioner": {
      "description": "Provisioner indicates the type of the provisioner.",
      "type": "string"
    },
    "reclaimPolicy": {
      "description": "Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.",
      "type": "string"
    },
    "volumeBindingMode": {
      "description": "VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.",
      "type": "string"
    }
  }
}