{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "podviews.core.k8s.appscode.com",
    "creationTimestamp": null
  },
  "spec": {
    "group": "core.k8s.appscode.com",
    "names": {
      "plural": "podviews",
      "singular": "podview",
      "kind": "PodView",
      "listKind": "PodViewList"
    },
    "scope": "Namespaced",
    "versions": [
      {
        "name": "v1alpha1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "PodViewSpec defines the desired state of PodView",
                "type": "object",
                "required": [
                  "containers",
                  "resources"
                ],
                "properties": {
                  "containers": {
                    "type": "array",
                    "items": {
                      "description": "A single application container that you want to run within a pod.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "args": {
                          "description": "Arguments to the entrypoint.\nThe docker image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax\ncan be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,\nregardless of whether the variable exists or not.\nCannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "command": {
                          "description": "Entrypoint array. Not executed within a shell.\nThe docker image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax\ncan be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,\nregardless of whether the variable exists or not.\nCannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "env": {
                          "description": "List of environment variables to set in the container.\nCannot be updated.",
                          "type": "array",
                          "items": {
                            "description": "EnvVar represents an environment variable present in a Container.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                                "type": "string"
                              },
                              "value": {
                                "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".",
                                "type": "string"
                              },
                              "valueFrom": {
                                "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                                "type": "object",
                                "properties": {
                                  "configMapKeyRef": {
                                    "description": "Selects a key of a ConfigMap.",
                                    "type": "object",
                                    "required": [
                                      "key"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key to select.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                        "type": "string",
                                        "default": ""
                                      },
                                      "optional": {
                                        "description": "Specify whether the ConfigMap or its key must be defined",
                                        "type": "boolean"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "fieldRef": {
                                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                    "type": "object",
                                    "required": [
                                      "fieldPath"
                                    ],
                                    "properties": {
                                      "apiVersion": {
                                        "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                        "type": "string"
                                      },
                                      "fieldPath": {
                                        "description": "Path of the field to select in the specified API version.",
                                        "type": "string"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "resourceFieldRef": {
                                    "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                    "type": "object",
                                    "required": [
                                      "resource"
                                    ],
                                    "properties": {
                                      "containerName": {
                                        "description": "Container name: required for volumes, optional for env vars",
                                        "type": "string"
                                      },
                                      "divisor": {
                                        "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "x-kubernetes-int-or-string": true
                                      },
                                      "resource": {
                                        "description": "Required: resource to select",
                                        "type": "string"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "secretKeyRef": {
                                    "description": "Selects a key of a secret in the pod's namespace",
                                    "type": "object",
                                    "required": [
                                      "key"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key of the secret to select from.  Must be a valid secret key.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                        "type": "string",
                                        "default": ""
                                      },
                                      "optional": {
                                        "description": "Specify whether the Secret or its key must be defined",
                                        "type": "boolean"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "envFrom": {
                          "description": "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.",
                          "type": "array",
                          "items": {
                            "description": "EnvFromSource represents the source of a set of ConfigMaps",
                            "type": "object",
                            "properties": {
                              "configMapRef": {
                                "description": "The ConfigMap to select from",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                    "type": "string",
                                    "default": ""
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "prefix": {
                                "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                                "type": "string"
                              },
                              "secretRef": {
                                "description": "The Secret to select from",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                    "type": "string",
                                    "default": ""
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              }
                            }
                          }
                        },
                        "image": {
                          "description": "Docker image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.",
                          "type": "string"
                        },
                        "imagePullPolicy": {
                          "description": "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                          "type": "string"
                        },
                        "lifecycle": {
                          "description": "Actions that the management system should take in response to container lifecycle events.\nCannot be updated.",
                          "type": "object",
                          "properties": {
                            "postStart": {
                              "description": "PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                              "type": "object",
                              "properties": {
                                "exec": {
                                  "description": "Exec specifies a command to execute in the container.",
                                  "type": "object",
                                  "properties": {
                                    "command": {
                                      "description": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  }
                                },
                                "httpGet": {
                                  "description": "HTTPGet specifies an HTTP GET request to perform.",
                                  "type": "object",
                                  "required": [
                                    "port"
                                  ],
                                  "properties": {
                                    "host": {
                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.",
                                      "type": "string"
                                    },
                                    "httpHeaders": {
                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                      "type": "array",
                                      "items": {
                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                        "type": "object",
                                        "required": [
                                          "name",
                                          "value"
                                        ],
                                        "properties": {
                                          "name": {
                                            "description": "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                            "type": "string"
                                          },
                                          "value": {
                                            "description": "The header field value",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    },
                                    "path": {
                                      "description": "Path to access on the HTTP server.",
                                      "type": "string"
                                    },
                                    "port": {
                                      "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                                      "anyOf": [
                                        {
                                          "type": "integer"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "x-kubernetes-int-or-string": true
                                    },
                                    "scheme": {
                                      "description": "Scheme to use for connecting to the host.\nDefaults to HTTP.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "sleep": {
                                  "description": "Sleep represents a duration that the container should sleep.",
                                  "type": "object",
                                  "required": [
                                    "seconds"
                                  ],
                                  "properties": {
                                    "seconds": {
                                      "description": "Seconds is the number of seconds to sleep.",
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                "tcpSocket": {
                                  "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor backward compatibility. There is no validation of this field and\nlifecycle hooks will fail at runtime when it is specified.",
                                  "type": "object",
                                  "required": [
                                    "port"
                                  ],
                                  "properties": {
                                    "host": {
                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                      "type": "string"
                                    },
                                    "port": {
                                      "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                                      "anyOf": [
                                        {
                                          "type": "integer"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "x-kubernetes-int-or-string": true
                                    }
                                  }
                                }
                              }
                            },
                            "preStop": {
                              "description": "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                              "type": "object",
                              "properties": {
                                "exec": {
                                  "description": "Exec specifies a command to execute in the container.",
                                  "type": "object",
                                  "properties": {
                                    "command": {
                                      "description": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  }
                                },
                                "httpGet": {
                                  "description": "HTTPGet specifies an HTTP GET request to perform.",
                                  "type": "object",
                                  "required": [
                                    "port"
                                  ],
                                  "properties": {
                                    "host": {
                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.",
                                      "type": "string"
                                    },
                                    "httpHeaders": {
                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                      "type": "array",
                                      "items": {
                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                        "type": "object",
                                        "required": [
                                          "name",
                                          "value"
                                        ],
                                        "properties": {
                                          "name": {
                                            "description": "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                            "type": "string"
                                          },
                                          "value": {
                                            "description": "The header field value",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    },
                                    "path": {
                                      "description": "Path to access on the HTTP server.",
                                      "type": "string"
                                    },
                                    "port": {
                                      "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                                      "anyOf": [
                                        {
                                          "type": "integer"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "x-kubernetes-int-or-string": true
                                    },
                                    "scheme": {
                                      "description": "Scheme to use for connecting to the host.\nDefaults to HTTP.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "sleep": {
                                  "description": "Sleep represents a duration that the container should sleep.",
                                  "type": "object",
                                  "required": [
                                    "seconds"
                                  ],
                                  "properties": {
                                    "seconds": {
                                      "description": "Seconds is the number of seconds to sleep.",
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                "tcpSocket": {
                                  "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor backward compatibility. There is no validation of this field and\nlifecycle hooks will fail at runtime when it is specified.",
                                  "type": "object",
                                  "required": [
                                    "port"
                                  ],
                                  "properties": {
                                    "host": {
                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                      "type": "string"
                                    },
                                    "port": {
                                      "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                                      "anyOf": [
                                        {
                                          "type": "integer"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "x-kubernetes-int-or-string": true
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "livenessProbe": {
                          "description": "Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                          "type": "object",
                          "properties": {
                            "exec": {
                              "description": "Exec specifies a command to execute in the container.",
                              "type": "object",
                              "properties": {
                                "command": {
                                  "description": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              }
                            },
                            "failureThreshold": {
                              "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "grpc": {
                              "description": "GRPC specifies a GRPC HealthCheckRequest.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "port": {
                                  "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "service": {
                                  "description": "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
                                  "type": "string",
                                  "default": ""
                                }
                              }
                            },
                            "httpGet": {
                              "description": "HTTPGet specifies an HTTP GET request to perform.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "host": {
                                  "description": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.",
                                  "type": "string"
                                },
                                "httpHeaders": {
                                  "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                  "type": "array",
                                  "items": {
                                    "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                    "type": "object",
                                    "required": [
                                      "name",
                                      "value"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "The header field value",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "path": {
                                  "description": "Path to access on the HTTP server.",
                                  "type": "string"
                                },
                                "port": {
                                  "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "scheme": {
                                  "description": "Scheme to use for connecting to the host.\nDefaults to HTTP.",
                                  "type": "string"
                                }
                              }
                            },
                            "initialDelaySeconds": {
                              "description": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                              "type": "integer",
                              "format": "int32"
                            },
                            "periodSeconds": {
                              "description": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "successThreshold": {
                              "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "tcpSocket": {
                              "description": "TCPSocket specifies a connection to a TCP port.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "host": {
                                  "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                  "type": "string"
                                },
                                "port": {
                                  "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                }
                              }
                            },
                            "terminationGracePeriodSeconds": {
                              "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "timeoutSeconds": {
                              "description": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "name": {
                          "description": "Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated.",
                          "type": "string"
                        },
                        "ports": {
                          "description": "List of ports to expose from the container. Exposing a port here gives\nthe system additional information about the network connections a\ncontainer uses, but is primarily informational. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nCannot be updated.",
                          "type": "array",
                          "items": {
                            "description": "ContainerPort represents a network port in a single container.",
                            "type": "object",
                            "required": [
                              "containerPort"
                            ],
                            "properties": {
                              "containerPort": {
                                "description": "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 \u003c x \u003c 65536.",
                                "type": "integer",
                                "format": "int32"
                              },
                              "hostIP": {
                                "description": "What host IP to bind the external port to.",
                                "type": "string"
                              },
                              "hostPort": {
                                "description": "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 \u003c x \u003c 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.",
                                "type": "integer",
                                "format": "int32"
                              },
                              "name": {
                                "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.",
                                "type": "string"
                              },
                              "protocol": {
                                "description": "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".",
                                "type": "string",
                                "default": "TCP"
                              }
                            }
                          },
                          "x-kubernetes-list-map-keys": [
                            "containerPort",
                            "protocol"
                          ],
                          "x-kubernetes-list-type": "map"
                        },
                        "readinessProbe": {
                          "description": "Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                          "type": "object",
                          "properties": {
                            "exec": {
                              "description": "Exec specifies a command to execute in the container.",
                              "type": "object",
                              "properties": {
                                "command": {
                                  "description": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              }
                            },
                            "failureThreshold": {
                              "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "grpc": {
                              "description": "GRPC specifies a GRPC HealthCheckRequest.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "port": {
                                  "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "service": {
                                  "description": "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
                                  "type": "string",
                                  "default": ""
                                }
                              }
                            },
                            "httpGet": {
                              "description": "HTTPGet specifies an HTTP GET request to perform.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "host": {
                                  "description": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.",
                                  "type": "string"
                                },
                                "httpHeaders": {
                                  "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                  "type": "array",
                                  "items": {
                                    "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                    "type": "object",
                                    "required": [
                                      "name",
                                      "value"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "The header field value",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "path": {
                                  "description": "Path to access on the HTTP server.",
                                  "type": "string"
                                },
                                "port": {
                                  "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "scheme": {
                                  "description": "Scheme to use for connecting to the host.\nDefaults to HTTP.",
                                  "type": "string"
                                }
                              }
                            },
                            "initialDelaySeconds": {
                              "description": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                              "type": "integer",
                              "format": "int32"
                            },
                            "periodSeconds": {
                              "description": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "successThreshold": {
                              "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "tcpSocket": {
                              "description": "TCPSocket specifies a connection to a TCP port.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "host": {
                                  "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                  "type": "string"
                                },
                                "port": {
                                  "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                }
                              }
                            },
                            "terminationGracePeriodSeconds": {
                              "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "timeoutSeconds": {
                              "description": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "resources": {
                          "description": "Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "type": "object",
                          "properties": {
                            "limits": {
                              "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "requests": {
                              "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "usage": {
                              "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        },
                        "securityContext": {
                          "description": "Security options the pod should run with.\nMore info: https://kubernetes.io/docs/concepts/policy/security-context/\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                          "type": "object",
                          "properties": {
                            "allowPrivilegeEscalation": {
                              "description": "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.",
                              "type": "boolean"
                            },
                            "appArmorProfile": {
                              "description": "appArmorProfile is the AppArmor options to use by this container. If set, this profile\noverrides the pod's appArmorProfile.\nNote that this field cannot be set when spec.os.name is windows.",
                              "type": "object",
                              "required": [
                                "type"
                              ],
                              "properties": {
                                "localhostProfile": {
                                  "description": "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.",
                                  "type": "string"
                                }
                              }
                            },
                            "capabilities": {
                              "description": "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.",
                              "type": "object",
                              "properties": {
                                "add": {
                                  "description": "Added capabilities",
                                  "type": "array",
                                  "items": {
                                    "description": "Capability represent POSIX capabilities type",
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "drop": {
                                  "description": "Removed capabilities",
                                  "type": "array",
                                  "items": {
                                    "description": "Capability represent POSIX capabilities type",
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              }
                            },
                            "privileged": {
                              "description": "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.",
                              "type": "boolean"
                            },
                            "procMount": {
                              "description": "procMount denotes the type of proc mount to use for the containers.\nThe default value is Default which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.",
                              "type": "string"
                            },
                            "readOnlyRootFilesystem": {
                              "description": "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.",
                              "type": "boolean"
                            },
                            "runAsGroup": {
                              "description": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "runAsNonRoot": {
                              "description": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.",
                              "type": "boolean"
                            },
                            "runAsUser": {
                              "description": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "seLinuxOptions": {
                              "description": "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.",
                              "type": "object",
                              "properties": {
                                "level": {
                                  "description": "Level is SELinux level label that applies to the container.",
                                  "type": "string"
                                },
                                "role": {
                                  "description": "Role is a SELinux role label that applies to the container.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Type is a SELinux type label that applies to the container.",
                                  "type": "string"
                                },
                                "user": {
                                  "description": "User is a SELinux user label that applies to the container.",
                                  "type": "string"
                                }
                              }
                            },
                            "seccompProfile": {
                              "description": "The seccomp options to use by this container. If seccomp options are\nprovided at both the pod \u0026 container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.",
                              "type": "object",
                              "required": [
                                "type"
                              ],
                              "properties": {
                                "localhostProfile": {
                                  "description": "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.",
                                  "type": "string"
                                }
                              }
                            },
                            "windowsOptions": {
                              "description": "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.",
                              "type": "object",
                              "properties": {
                                "gmsaCredentialSpec": {
                                  "description": "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.",
                                  "type": "string"
                                },
                                "gmsaCredentialSpecName": {
                                  "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                  "type": "string"
                                },
                                "hostProcess": {
                                  "description": "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.",
                                  "type": "boolean"
                                },
                                "runAsUserName": {
                                  "description": "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "startupProbe": {
                          "description": "StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                          "type": "object",
                          "properties": {
                            "exec": {
                              "description": "Exec specifies a command to execute in the container.",
                              "type": "object",
                              "properties": {
                                "command": {
                                  "description": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              }
                            },
                            "failureThreshold": {
                              "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "grpc": {
                              "description": "GRPC specifies a GRPC HealthCheckRequest.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "port": {
                                  "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "service": {
                                  "description": "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
                                  "type": "string",
                                  "default": ""
                                }
                              }
                            },
                            "httpGet": {
                              "description": "HTTPGet specifies an HTTP GET request to perform.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "host": {
                                  "description": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.",
                                  "type": "string"
                                },
                                "httpHeaders": {
                                  "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                  "type": "array",
                                  "items": {
                                    "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                    "type": "object",
                                    "required": [
                                      "name",
                                      "value"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "The header field value",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "path": {
                                  "description": "Path to access on the HTTP server.",
                                  "type": "string"
                                },
                                "port": {
                                  "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "scheme": {
                                  "description": "Scheme to use for connecting to the host.\nDefaults to HTTP.",
                                  "type": "string"
                                }
                              }
                            },
                            "initialDelaySeconds": {
                              "description": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                              "type": "integer",
                              "format": "int32"
                            },
                            "periodSeconds": {
                              "description": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "successThreshold": {
                              "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "tcpSocket": {
                              "description": "TCPSocket specifies a connection to a TCP port.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "host": {
                                  "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                  "type": "string"
                                },
                                "port": {
                                  "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                }
                              }
                            },
                            "terminationGracePeriodSeconds": {
                              "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "timeoutSeconds": {
                              "description": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "stdin": {
                          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.",
                          "type": "boolean"
                        },
                        "stdinOnce": {
                          "description": "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false",
                          "type": "boolean"
                        },
                        "terminationMessagePath": {
                          "description": "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.",
                          "type": "string"
                        },
                        "terminationMessagePolicy": {
                          "description": "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.",
                          "type": "string"
                        },
                        "tty": {
                          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.",
                          "type": "boolean"
                        },
                        "volumeDevices": {
                          "description": "volumeDevices is the list of block devices to be used by the container.",
                          "type": "array",
                          "items": {
                            "description": "volumeDevice describes a mapping of a raw block device within a container.",
                            "type": "object",
                            "required": [
                              "devicePath",
                              "name"
                            ],
                            "properties": {
                              "devicePath": {
                                "description": "devicePath is the path inside of the container that the device will be mapped to.",
                                "type": "string"
                              },
                              "name": {
                                "description": "name must match the name of a persistentVolumeClaim in the pod",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "volumeMounts": {
                          "description": "Pod volumes to mount into the container's filesystem.\nCannot be updated.",
                          "type": "array",
                          "items": {
                            "description": "VolumeMount describes a mounting of a Volume within a container.",
                            "type": "object",
                            "required": [
                              "mountPath",
                              "name"
                            ],
                            "properties": {
                              "mountPath": {
                                "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
                                "type": "string"
                              },
                              "mountPropagation": {
                                "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\n(which defaults to None).",
                                "type": "string"
                              },
                              "name": {
                                "description": "This must match the Name of a Volume.",
                                "type": "string"
                              },
                              "readOnly": {
                                "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.",
                                "type": "boolean"
                              },
                              "recursiveReadOnly": {
                                "description": "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\nrecursively read-only.  If this field is set to IfPossible, the mount is made\nrecursively read-only, if it is supported by the container runtime.  If this\nfield is set to Enabled, the mount is made recursively read-only if it is\nsupported by the container runtime, otherwise the pod will not be started and\nan error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\nNone (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.",
                                "type": "string"
                              },
                              "subPath": {
                                "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).",
                                "type": "string"
                              },
                              "subPathExpr": {
                                "description": "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "workingDir": {
                          "description": "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "resources": {
                    "description": "ResourceView describes the compute resource requirements.",
                    "type": "object",
                    "properties": {
                      "limits": {
                        "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "type": "object",
                        "additionalProperties": {
                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        }
                      },
                      "requests": {
                        "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "type": "object",
                        "additionalProperties": {
                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        }
                      },
                      "usage": {
                        "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "type": "object",
                        "additionalProperties": {
                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        }
                      }
                    }
                  }
                }
              },
              "status": {
                "description": "PodStatus represents information about the status of a pod. Status may trail the actual\nstate of a system, especially if the node that hosts the pod cannot contact the control\nplane.",
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "Current service state of pod.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
                    "type": "array",
                    "items": {
                      "description": "PodCondition contains details for the current condition of this pod.",
                      "type": "object",
                      "required": [
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastProbeTime": {
                          "description": "Last time we probed the condition.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "lastTransitionTime": {
                          "description": "Last time the condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "Human-readable message indicating details about last transition.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status is the status of the condition.\nCan be True, False, Unknown.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type is the type of the condition.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-list-map-keys": [
                      "type"
                    ],
                    "x-kubernetes-list-type": "map"
                  },
                  "containerStatuses": {
                    "description": "Statuses of containers in this pod.\nEach container in the pod should have at most one status in this list,\nand all statuses should be for containers in the pod.\nHowever this is not enforced.\nIf a status for a non-existent container is present in the list, or the list has duplicate names,\nthe behavior of various Kubernetes components is not defined and those statuses might be\nignored.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
                    "type": "array",
                    "items": {
                      "description": "ContainerStatus contains details for the current status of this container.",
                      "type": "object",
                      "required": [
                        "image",
                        "imageID",
                        "name",
                        "ready",
                        "restartCount"
                      ],
                      "properties": {
                        "allocatedResources": {
                          "description": "AllocatedResources represents the compute resources allocated for this container by the\nnode. Kubelet sets this value to Container.Resources.Requests upon successful pod admission\nand after successfully admitting desired pod resize.",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          }
                        },
                        "allocatedResourcesStatus": {
                          "description": "AllocatedResourcesStatus represents the status of various resources\nallocated for this Pod.",
                          "type": "array",
                          "items": {
                            "description": "ResourceStatus represents the status of a single resource allocated to a Pod.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the resource. Must be unique within the pod and in case of non-DRA resource, match one of the resources from the pod spec.\nFor DRA resources, the value must be \"claim:\u003cclaim_name\u003e/\u003crequest\u003e\".\nWhen this status is reported about a container, the \"claim_name\" and \"request\" must match one of the claims of this container.",
                                "type": "string"
                              },
                              "resources": {
                                "description": "List of unique resources health. Each element in the list contains an unique resource ID and its health.\nAt a minimum, for the lifetime of a Pod, resource ID must uniquely identify the resource allocated to the Pod on the Node.\nIf other Pod on the same Node reports the status with the same resource ID, it must be the same resource they share.\nSee ResourceID type definition for a specific format it has in various use cases.",
                                "type": "array",
                                "items": {
                                  "description": "ResourceHealth represents the health of a resource. It has the latest device health information.\nThis is a part of KEP https://kep.k8s.io/4680.",
                                  "type": "object",
                                  "required": [
                                    "resourceID"
                                  ],
                                  "properties": {
                                    "health": {
                                      "description": "Health of the resource.\ncan be one of:\n - Healthy: operates as normal\n - Unhealthy: reported unhealthy. We consider this a temporary health issue\n              since we do not have a mechanism today to distinguish\n              temporary and permanent issues.\n - Unknown: The status cannot be determined.\n            For example, Device Plugin got unregistered and hasn't been re-registered since.\n\nIn future we may want to introduce the PermanentlyUnhealthy Status.",
                                      "type": "string"
                                    },
                                    "resourceID": {
                                      "description": "ResourceID is the unique identifier of the resource. See the ResourceID type for more information.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "x-kubernetes-list-map-keys": [
                                  "resourceID"
                                ],
                                "x-kubernetes-list-type": "map"
                              }
                            }
                          },
                          "x-kubernetes-list-map-keys": [
                            "name"
                          ],
                          "x-kubernetes-list-type": "map"
                        },
                        "containerID": {
                          "description": "ContainerID is the ID of the container in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'.\nWhere type is a container runtime identifier, returned from Version call of CRI API\n(for example \"containerd\").",
                          "type": "string"
                        },
                        "image": {
                          "description": "Image is the name of container image that the container is running.\nThe container image may not match the image used in the PodSpec,\nas it may have been resolved by the runtime.\nMore info: https://kubernetes.io/docs/concepts/containers/images.",
                          "type": "string"
                        },
                        "imageID": {
                          "description": "ImageID is the image ID of the container's image. The image ID may not\nmatch the image ID of the image used in the PodSpec, as it may have been\nresolved by the runtime.",
                          "type": "string"
                        },
                        "lastState": {
                          "description": "LastTerminationState holds the last termination state of the container to\nhelp debug container crashes and restarts. This field is not\npopulated if the container is still running and RestartCount is 0.",
                          "type": "object",
                          "properties": {
                            "running": {
                              "description": "Details about a running container",
                              "type": "object",
                              "properties": {
                                "startedAt": {
                                  "description": "Time at which the container was last (re-)started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "terminated": {
                              "description": "Details about a terminated container",
                              "type": "object",
                              "required": [
                                "exitCode"
                              ],
                              "properties": {
                                "containerID": {
                                  "description": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'",
                                  "type": "string"
                                },
                                "exitCode": {
                                  "description": "Exit status from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "finishedAt": {
                                  "description": "Time at which the container last terminated",
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "message": {
                                  "description": "Message regarding the last termination of the container",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason from the last termination of the container",
                                  "type": "string"
                                },
                                "signal": {
                                  "description": "Signal from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "startedAt": {
                                  "description": "Time at which previous execution of the container started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "waiting": {
                              "description": "Details about a waiting container",
                              "type": "object",
                              "properties": {
                                "message": {
                                  "description": "Message regarding why the container is not yet running.",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason the container is not yet running.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "name": {
                          "description": "Name is a DNS_LABEL representing the unique name of the container.\nEach container in a pod must have a unique name across all container types.\nCannot be updated.",
                          "type": "string"
                        },
                        "ready": {
                          "description": "Ready specifies whether the container is currently passing its readiness check.\nThe value will change as readiness probes keep executing. If no readiness\nprobes are specified, this field defaults to true once the container is\nfully started (see Started field).\n\nThe value is typically used to determine whether a container is ready to\naccept traffic.",
                          "type": "boolean"
                        },
                        "resources": {
                          "description": "Resources represents the compute resource requests and limits that have been successfully\nenacted on the running container after it has been started or has been successfully resized.",
                          "type": "object",
                          "properties": {
                            "claims": {
                              "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
                              "type": "array",
                              "items": {
                                "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                                    "type": "string"
                                  },
                                  "request": {
                                    "description": "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.",
                                    "type": "string"
                                  }
                                }
                              },
                              "x-kubernetes-list-map-keys": [
                                "name"
                              ],
                              "x-kubernetes-list-type": "map"
                            },
                            "limits": {
                              "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "requests": {
                              "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        },
                        "restartCount": {
                          "description": "RestartCount holds the number of times the container has been restarted.\nKubelet makes an effort to always increment the value, but there\nare cases when the state may be lost due to node restarts and then the value\nmay be reset to 0. The value is never negative.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "started": {
                          "description": "Started indicates whether the container has finished its postStart lifecycle hook\nand passed its startup probe.\nInitialized as false, becomes true after startupProbe is considered\nsuccessful. Resets to false when the container is restarted, or if kubelet\nloses state temporarily. In both cases, startup probes will run again.\nIs always true when no startupProbe is defined and container is running and\nhas passed the postStart lifecycle hook. The null value must be treated the\nsame as false.",
                          "type": "boolean"
                        },
                        "state": {
                          "description": "State holds details about the container's current condition.",
                          "type": "object",
                          "properties": {
                            "running": {
                              "description": "Details about a running container",
                              "type": "object",
                              "properties": {
                                "startedAt": {
                                  "description": "Time at which the container was last (re-)started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "terminated": {
                              "description": "Details about a terminated container",
                              "type": "object",
                              "required": [
                                "exitCode"
                              ],
                              "properties": {
                                "containerID": {
                                  "description": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'",
                                  "type": "string"
                                },
                                "exitCode": {
                                  "description": "Exit status from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "finishedAt": {
                                  "description": "Time at which the container last terminated",
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "message": {
                                  "description": "Message regarding the last termination of the container",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason from the last termination of the container",
                                  "type": "string"
                                },
                                "signal": {
                                  "description": "Signal from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "startedAt": {
                                  "description": "Time at which previous execution of the container started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "waiting": {
                              "description": "Details about a waiting container",
                              "type": "object",
                              "properties": {
                                "message": {
                                  "description": "Message regarding why the container is not yet running.",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason the container is not yet running.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "user": {
                          "description": "User represents user identity information initially attached to the first process of the container",
                          "type": "object",
                          "properties": {
                            "linux": {
                              "description": "Linux holds user identity information initially attached to the first process of the containers in Linux.\nNote that the actual running identity can be changed if the process has enough privilege to do so.",
                              "type": "object",
                              "required": [
                                "gid",
                                "uid"
                              ],
                              "properties": {
                                "gid": {
                                  "description": "GID is the primary gid initially attached to the first process in the container",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "supplementalGroups": {
                                  "description": "SupplementalGroups are the supplemental groups initially attached to the first process in the container",
                                  "type": "array",
                                  "items": {
                                    "type": "integer",
                                    "format": "int64"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "uid": {
                                  "description": "UID is the primary uid initially attached to the first process in the container",
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          }
                        },
                        "volumeMounts": {
                          "description": "Status of volume mounts.",
                          "type": "array",
                          "items": {
                            "description": "VolumeMountStatus shows status of volume mounts.",
                            "type": "object",
                            "required": [
                              "mountPath",
                              "name"
                            ],
                            "properties": {
                              "mountPath": {
                                "description": "MountPath corresponds to the original VolumeMount.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name corresponds to the name of the original VolumeMount.",
                                "type": "string"
                              },
                              "readOnly": {
                                "description": "ReadOnly corresponds to the original VolumeMount.",
                                "type": "boolean"
                              },
                              "recursiveReadOnly": {
                                "description": "RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts).\nAn IfPossible value in the original VolumeMount must be translated to Disabled or Enabled,\ndepending on the mount result.",
                                "type": "string"
                              }
                            }
                          },
                          "x-kubernetes-list-map-keys": [
                            "mountPath"
                          ],
                          "x-kubernetes-list-type": "map"
                        }
                      }
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "ephemeralContainerStatuses": {
                    "description": "Statuses for any ephemeral containers that have run in this pod.\nEach ephemeral container in the pod should have at most one status in this list,\nand all statuses should be for containers in the pod.\nHowever this is not enforced.\nIf a status for a non-existent container is present in the list, or the list has duplicate names,\nthe behavior of various Kubernetes components is not defined and those statuses might be\nignored.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
                    "type": "array",
                    "items": {
                      "description": "ContainerStatus contains details for the current status of this container.",
                      "type": "object",
                      "required": [
                        "image",
                        "imageID",
                        "name",
                        "ready",
                        "restartCount"
                      ],
                      "properties": {
                        "allocatedResources": {
                          "description": "AllocatedResources represents the compute resources allocated for this container by the\nnode. Kubelet sets this value to Container.Resources.Requests upon successful pod admission\nand after successfully admitting desired pod resize.",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          }
                        },
                        "allocatedResourcesStatus": {
                          "description": "AllocatedResourcesStatus represents the status of various resources\nallocated for this Pod.",
                          "type": "array",
                          "items": {
                            "description": "ResourceStatus represents the status of a single resource allocated to a Pod.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the resource. Must be unique within the pod and in case of non-DRA resource, match one of the resources from the pod spec.\nFor DRA resources, the value must be \"claim:\u003cclaim_name\u003e/\u003crequest\u003e\".\nWhen this status is reported about a container, the \"claim_name\" and \"request\" must match one of the claims of this container.",
                                "type": "string"
                              },
                              "resources": {
                                "description": "List of unique resources health. Each element in the list contains an unique resource ID and its health.\nAt a minimum, for the lifetime of a Pod, resource ID must uniquely identify the resource allocated to the Pod on the Node.\nIf other Pod on the same Node reports the status with the same resource ID, it must be the same resource they share.\nSee ResourceID type definition for a specific format it has in various use cases.",
                                "type": "array",
                                "items": {
                                  "description": "ResourceHealth represents the health of a resource. It has the latest device health information.\nThis is a part of KEP https://kep.k8s.io/4680.",
                                  "type": "object",
                                  "required": [
                                    "resourceID"
                                  ],
                                  "properties": {
                                    "health": {
                                      "description": "Health of the resource.\ncan be one of:\n - Healthy: operates as normal\n - Unhealthy: reported unhealthy. We consider this a temporary health issue\n              since we do not have a mechanism today to distinguish\n              temporary and permanent issues.\n - Unknown: The status cannot be determined.\n            For example, Device Plugin got unregistered and hasn't been re-registered since.\n\nIn future we may want to introduce the PermanentlyUnhealthy Status.",
                                      "type": "string"
                                    },
                                    "resourceID": {
                                      "description": "ResourceID is the unique identifier of the resource. See the ResourceID type for more information.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "x-kubernetes-list-map-keys": [
                                  "resourceID"
                                ],
                                "x-kubernetes-list-type": "map"
                              }
                            }
                          },
                          "x-kubernetes-list-map-keys": [
                            "name"
                          ],
                          "x-kubernetes-list-type": "map"
                        },
                        "containerID": {
                          "description": "ContainerID is the ID of the container in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'.\nWhere type is a container runtime identifier, returned from Version call of CRI API\n(for example \"containerd\").",
                          "type": "string"
                        },
                        "image": {
                          "description": "Image is the name of container image that the container is running.\nThe container image may not match the image used in the PodSpec,\nas it may have been resolved by the runtime.\nMore info: https://kubernetes.io/docs/concepts/containers/images.",
                          "type": "string"
                        },
                        "imageID": {
                          "description": "ImageID is the image ID of the container's image. The image ID may not\nmatch the image ID of the image used in the PodSpec, as it may have been\nresolved by the runtime.",
                          "type": "string"
                        },
                        "lastState": {
                          "description": "LastTerminationState holds the last termination state of the container to\nhelp debug container crashes and restarts. This field is not\npopulated if the container is still running and RestartCount is 0.",
                          "type": "object",
                          "properties": {
                            "running": {
                              "description": "Details about a running container",
                              "type": "object",
                              "properties": {
                                "startedAt": {
                                  "description": "Time at which the container was last (re-)started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "terminated": {
                              "description": "Details about a terminated container",
                              "type": "object",
                              "required": [
                                "exitCode"
                              ],
                              "properties": {
                                "containerID": {
                                  "description": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'",
                                  "type": "string"
                                },
                                "exitCode": {
                                  "description": "Exit status from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "finishedAt": {
                                  "description": "Time at which the container last terminated",
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "message": {
                                  "description": "Message regarding the last termination of the container",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason from the last termination of the container",
                                  "type": "string"
                                },
                                "signal": {
                                  "description": "Signal from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "startedAt": {
                                  "description": "Time at which previous execution of the container started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "waiting": {
                              "description": "Details about a waiting container",
                              "type": "object",
                              "properties": {
                                "message": {
                                  "description": "Message regarding why the container is not yet running.",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason the container is not yet running.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "name": {
                          "description": "Name is a DNS_LABEL representing the unique name of the container.\nEach container in a pod must have a unique name across all container types.\nCannot be updated.",
                          "type": "string"
                        },
                        "ready": {
                          "description": "Ready specifies whether the container is currently passing its readiness check.\nThe value will change as readiness probes keep executing. If no readiness\nprobes are specified, this field defaults to true once the container is\nfully started (see Started field).\n\nThe value is typically used to determine whether a container is ready to\naccept traffic.",
                          "type": "boolean"
                        },
                        "resources": {
                          "description": "Resources represents the compute resource requests and limits that have been successfully\nenacted on the running container after it has been started or has been successfully resized.",
                          "type": "object",
                          "properties": {
                            "claims": {
                              "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
                              "type": "array",
                              "items": {
                                "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                                    "type": "string"
                                  },
                                  "request": {
                                    "description": "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.",
                                    "type": "string"
                                  }
                                }
                              },
                              "x-kubernetes-list-map-keys": [
                                "name"
                              ],
                              "x-kubernetes-list-type": "map"
                            },
                            "limits": {
                              "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "requests": {
                              "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        },
                        "restartCount": {
                          "description": "RestartCount holds the number of times the container has been restarted.\nKubelet makes an effort to always increment the value, but there\nare cases when the state may be lost due to node restarts and then the value\nmay be reset to 0. The value is never negative.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "started": {
                          "description": "Started indicates whether the container has finished its postStart lifecycle hook\nand passed its startup probe.\nInitialized as false, becomes true after startupProbe is considered\nsuccessful. Resets to false when the container is restarted, or if kubelet\nloses state temporarily. In both cases, startup probes will run again.\nIs always true when no startupProbe is defined and container is running and\nhas passed the postStart lifecycle hook. The null value must be treated the\nsame as false.",
                          "type": "boolean"
                        },
                        "state": {
                          "description": "State holds details about the container's current condition.",
                          "type": "object",
                          "properties": {
                            "running": {
                              "description": "Details about a running container",
                              "type": "object",
                              "properties": {
                                "startedAt": {
                                  "description": "Time at which the container was last (re-)started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "terminated": {
                              "description": "Details about a terminated container",
                              "type": "object",
                              "required": [
                                "exitCode"
                              ],
                              "properties": {
                                "containerID": {
                                  "description": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'",
                                  "type": "string"
                                },
                                "exitCode": {
                                  "description": "Exit status from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "finishedAt": {
                                  "description": "Time at which the container last terminated",
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "message": {
                                  "description": "Message regarding the last termination of the container",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason from the last termination of the container",
                                  "type": "string"
                                },
                                "signal": {
                                  "description": "Signal from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "startedAt": {
                                  "description": "Time at which previous execution of the container started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "waiting": {
                              "description": "Details about a waiting container",
                              "type": "object",
                              "properties": {
                                "message": {
                                  "description": "Message regarding why the container is not yet running.",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason the container is not yet running.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "user": {
                          "description": "User represents user identity information initially attached to the first process of the container",
                          "type": "object",
                          "properties": {
                            "linux": {
                              "description": "Linux holds user identity information initially attached to the first process of the containers in Linux.\nNote that the actual running identity can be changed if the process has enough privilege to do so.",
                              "type": "object",
                              "required": [
                                "gid",
                                "uid"
                              ],
                              "properties": {
                                "gid": {
                                  "description": "GID is the primary gid initially attached to the first process in the container",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "supplementalGroups": {
                                  "description": "SupplementalGroups are the supplemental groups initially attached to the first process in the container",
                                  "type": "array",
                                  "items": {
                                    "type": "integer",
                                    "format": "int64"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "uid": {
                                  "description": "UID is the primary uid initially attached to the first process in the container",
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          }
                        },
                        "volumeMounts": {
                          "description": "Status of volume mounts.",
                          "type": "array",
                          "items": {
                            "description": "VolumeMountStatus shows status of volume mounts.",
                            "type": "object",
                            "required": [
                              "mountPath",
                              "name"
                            ],
                            "properties": {
                              "mountPath": {
                                "description": "MountPath corresponds to the original VolumeMount.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name corresponds to the name of the original VolumeMount.",
                                "type": "string"
                              },
                              "readOnly": {
                                "description": "ReadOnly corresponds to the original VolumeMount.",
                                "type": "boolean"
                              },
                              "recursiveReadOnly": {
                                "description": "RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts).\nAn IfPossible value in the original VolumeMount must be translated to Disabled or Enabled,\ndepending on the mount result.",
                                "type": "string"
                              }
                            }
                          },
                          "x-kubernetes-list-map-keys": [
                            "mountPath"
                          ],
                          "x-kubernetes-list-type": "map"
                        }
                      }
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "hostIP": {
                    "description": "hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet.\nA pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will\nnot be updated even if there is a node is assigned to pod",
                    "type": "string"
                  },
                  "hostIPs": {
                    "description": "hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must\nmatch the hostIP field. This list is empty if the pod has not started yet.\nA pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will\nnot be updated even if there is a node is assigned to this pod.",
                    "type": "array",
                    "items": {
                      "description": "HostIP represents a single IP address allocated to the host.",
                      "type": "object",
                      "required": [
                        "ip"
                      ],
                      "properties": {
                        "ip": {
                          "description": "IP is the IP address assigned to the host",
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "initContainerStatuses": {
                    "description": "Statuses of init containers in this pod. The most recent successful non-restartable\ninit container will have ready = true, the most recently started container will have\nstartTime set.\nEach init container in the pod should have at most one status in this list,\nand all statuses should be for containers in the pod.\nHowever this is not enforced.\nIf a status for a non-existent container is present in the list, or the list has duplicate names,\nthe behavior of various Kubernetes components is not defined and those statuses might be\nignored.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-and-container-status",
                    "type": "array",
                    "items": {
                      "description": "ContainerStatus contains details for the current status of this container.",
                      "type": "object",
                      "required": [
                        "image",
                        "imageID",
                        "name",
                        "ready",
                        "restartCount"
                      ],
                      "properties": {
                        "allocatedResources": {
                          "description": "AllocatedResources represents the compute resources allocated for this container by the\nnode. Kubelet sets this value to Container.Resources.Requests upon successful pod admission\nand after successfully admitting desired pod resize.",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          }
                        },
                        "allocatedResourcesStatus": {
                          "description": "AllocatedResourcesStatus represents the status of various resources\nallocated for this Pod.",
                          "type": "array",
                          "items": {
                            "description": "ResourceStatus represents the status of a single resource allocated to a Pod.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the resource. Must be unique within the pod and in case of non-DRA resource, match one of the resources from the pod spec.\nFor DRA resources, the value must be \"claim:\u003cclaim_name\u003e/\u003crequest\u003e\".\nWhen this status is reported about a container, the \"claim_name\" and \"request\" must match one of the claims of this container.",
                                "type": "string"
                              },
                              "resources": {
                                "description": "List of unique resources health. Each element in the list contains an unique resource ID and its health.\nAt a minimum, for the lifetime of a Pod, resource ID must uniquely identify the resource allocated to the Pod on the Node.\nIf other Pod on the same Node reports the status with the same resource ID, it must be the same resource they share.\nSee ResourceID type definition for a specific format it has in various use cases.",
                                "type": "array",
                                "items": {
                                  "description": "ResourceHealth represents the health of a resource. It has the latest device health information.\nThis is a part of KEP https://kep.k8s.io/4680.",
                                  "type": "object",
                                  "required": [
                                    "resourceID"
                                  ],
                                  "properties": {
                                    "health": {
                                      "description": "Health of the resource.\ncan be one of:\n - Healthy: operates as normal\n - Unhealthy: reported unhealthy. We consider this a temporary health issue\n              since we do not have a mechanism today to distinguish\n              temporary and permanent issues.\n - Unknown: The status cannot be determined.\n            For example, Device Plugin got unregistered and hasn't been re-registered since.\n\nIn future we may want to introduce the PermanentlyUnhealthy Status.",
                                      "type": "string"
                                    },
                                    "resourceID": {
                                      "description": "ResourceID is the unique identifier of the resource. See the ResourceID type for more information.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "x-kubernetes-list-map-keys": [
                                  "resourceID"
                                ],
                                "x-kubernetes-list-type": "map"
                              }
                            }
                          },
                          "x-kubernetes-list-map-keys": [
                            "name"
                          ],
                          "x-kubernetes-list-type": "map"
                        },
                        "containerID": {
                          "description": "ContainerID is the ID of the container in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'.\nWhere type is a container runtime identifier, returned from Version call of CRI API\n(for example \"containerd\").",
                          "type": "string"
                        },
                        "image": {
                          "description": "Image is the name of container image that the container is running.\nThe container image may not match the image used in the PodSpec,\nas it may have been resolved by the runtime.\nMore info: https://kubernetes.io/docs/concepts/containers/images.",
                          "type": "string"
                        },
                        "imageID": {
                          "description": "ImageID is the image ID of the container's image. The image ID may not\nmatch the image ID of the image used in the PodSpec, as it may have been\nresolved by the runtime.",
                          "type": "string"
                        },
                        "lastState": {
                          "description": "LastTerminationState holds the last termination state of the container to\nhelp debug container crashes and restarts. This field is not\npopulated if the container is still running and RestartCount is 0.",
                          "type": "object",
                          "properties": {
                            "running": {
                              "description": "Details about a running container",
                              "type": "object",
                              "properties": {
                                "startedAt": {
                                  "description": "Time at which the container was last (re-)started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "terminated": {
                              "description": "Details about a terminated container",
                              "type": "object",
                              "required": [
                                "exitCode"
                              ],
                              "properties": {
                                "containerID": {
                                  "description": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'",
                                  "type": "string"
                                },
                                "exitCode": {
                                  "description": "Exit status from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "finishedAt": {
                                  "description": "Time at which the container last terminated",
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "message": {
                                  "description": "Message regarding the last termination of the container",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason from the last termination of the container",
                                  "type": "string"
                                },
                                "signal": {
                                  "description": "Signal from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "startedAt": {
                                  "description": "Time at which previous execution of the container started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "waiting": {
                              "description": "Details about a waiting container",
                              "type": "object",
                              "properties": {
                                "message": {
                                  "description": "Message regarding why the container is not yet running.",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason the container is not yet running.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "name": {
                          "description": "Name is a DNS_LABEL representing the unique name of the container.\nEach container in a pod must have a unique name across all container types.\nCannot be updated.",
                          "type": "string"
                        },
                        "ready": {
                          "description": "Ready specifies whether the container is currently passing its readiness check.\nThe value will change as readiness probes keep executing. If no readiness\nprobes are specified, this field defaults to true once the container is\nfully started (see Started field).\n\nThe value is typically used to determine whether a container is ready to\naccept traffic.",
                          "type": "boolean"
                        },
                        "resources": {
                          "description": "Resources represents the compute resource requests and limits that have been successfully\nenacted on the running container after it has been started or has been successfully resized.",
                          "type": "object",
                          "properties": {
                            "claims": {
                              "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
                              "type": "array",
                              "items": {
                                "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                                    "type": "string"
                                  },
                                  "request": {
                                    "description": "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.",
                                    "type": "string"
                                  }
                                }
                              },
                              "x-kubernetes-list-map-keys": [
                                "name"
                              ],
                              "x-kubernetes-list-type": "map"
                            },
                            "limits": {
                              "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "requests": {
                              "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        },
                        "restartCount": {
                          "description": "RestartCount holds the number of times the container has been restarted.\nKubelet makes an effort to always increment the value, but there\nare cases when the state may be lost due to node restarts and then the value\nmay be reset to 0. The value is never negative.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "started": {
                          "description": "Started indicates whether the container has finished its postStart lifecycle hook\nand passed its startup probe.\nInitialized as false, becomes true after startupProbe is considered\nsuccessful. Resets to false when the container is restarted, or if kubelet\nloses state temporarily. In both cases, startup probes will run again.\nIs always true when no startupProbe is defined and container is running and\nhas passed the postStart lifecycle hook. The null value must be treated the\nsame as false.",
                          "type": "boolean"
                        },
                        "state": {
                          "description": "State holds details about the container's current condition.",
                          "type": "object",
                          "properties": {
                            "running": {
                              "description": "Details about a running container",
                              "type": "object",
                              "properties": {
                                "startedAt": {
                                  "description": "Time at which the container was last (re-)started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "terminated": {
                              "description": "Details about a terminated container",
                              "type": "object",
                              "required": [
                                "exitCode"
                              ],
                              "properties": {
                                "containerID": {
                                  "description": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'",
                                  "type": "string"
                                },
                                "exitCode": {
                                  "description": "Exit status from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "finishedAt": {
                                  "description": "Time at which the container last terminated",
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "message": {
                                  "description": "Message regarding the last termination of the container",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason from the last termination of the container",
                                  "type": "string"
                                },
                                "signal": {
                                  "description": "Signal from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "startedAt": {
                                  "description": "Time at which previous execution of the container started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "waiting": {
                              "description": "Details about a waiting container",
                              "type": "object",
                              "properties": {
                                "message": {
                                  "description": "Message regarding why the container is not yet running.",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason the container is not yet running.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "user": {
                          "description": "User represents user identity information initially attached to the first process of the container",
                          "type": "object",
                          "properties": {
                            "linux": {
                              "description": "Linux holds user identity information initially attached to the first process of the containers in Linux.\nNote that the actual running identity can be changed if the process has enough privilege to do so.",
                              "type": "object",
                              "required": [
                                "gid",
                                "uid"
                              ],
                              "properties": {
                                "gid": {
                                  "description": "GID is the primary gid initially attached to the first process in the container",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "supplementalGroups": {
                                  "description": "SupplementalGroups are the supplemental groups initially attached to the first process in the container",
                                  "type": "array",
                                  "items": {
                                    "type": "integer",
                                    "format": "int64"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "uid": {
                                  "description": "UID is the primary uid initially attached to the first process in the container",
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          }
                        },
                        "volumeMounts": {
                          "description": "Status of volume mounts.",
                          "type": "array",
                          "items": {
                            "description": "VolumeMountStatus shows status of volume mounts.",
                            "type": "object",
                            "required": [
                              "mountPath",
                              "name"
                            ],
                            "properties": {
                              "mountPath": {
                                "description": "MountPath corresponds to the original VolumeMount.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name corresponds to the name of the original VolumeMount.",
                                "type": "string"
                              },
                              "readOnly": {
                                "description": "ReadOnly corresponds to the original VolumeMount.",
                                "type": "boolean"
                              },
                              "recursiveReadOnly": {
                                "description": "RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts).\nAn IfPossible value in the original VolumeMount must be translated to Disabled or Enabled,\ndepending on the mount result.",
                                "type": "string"
                              }
                            }
                          },
                          "x-kubernetes-list-map-keys": [
                            "mountPath"
                          ],
                          "x-kubernetes-list-type": "map"
                        }
                      }
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "message": {
                    "description": "A human readable message indicating details about why the pod is in this condition.",
                    "type": "string"
                  },
                  "nominatedNodeName": {
                    "description": "nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be\nscheduled right away as preemption victims receive their graceful termination periods.\nThis field does not guarantee that the pod will be scheduled on this node. Scheduler may decide\nto place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to\ngive the resources on this node to a higher priority pod that is created after preemption.\nAs a result, this field may be different than PodSpec.nodeName when the pod is\nscheduled.",
                    "type": "string"
                  },
                  "phase": {
                    "description": "The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle.\nThe conditions array, the reason and message fields, and the individual container status\narrays contain more detail about the pod's status.\nThere are five possible phase values:\n\nPending: The pod has been accepted by the Kubernetes system, but one or more of the\ncontainer images has not been created. This includes time before being scheduled as\nwell as time spent downloading images over the network, which could take a while.\nRunning: The pod has been bound to a node, and all of the containers have been created.\nAt least one container is still running, or is in the process of starting or restarting.\nSucceeded: All containers in the pod have terminated in success, and will not be restarted.\nFailed: All containers in the pod have terminated, and at least one container has\nterminated in failure. The container either exited with non-zero status or was terminated\nby the system.\nUnknown: For some reason the state of the pod could not be obtained, typically due to an\nerror in communicating with the host of the pod.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase",
                    "type": "string"
                  },
                  "podIP": {
                    "description": "podIP address allocated to the pod. Routable at least within the cluster.\nEmpty if not yet allocated.",
                    "type": "string"
                  },
                  "podIPs": {
                    "description": "podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must\nmatch the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list\nis empty if no IPs have been allocated yet.",
                    "type": "array",
                    "items": {
                      "description": "PodIP represents a single IP address allocated to the pod.",
                      "type": "object",
                      "required": [
                        "ip"
                      ],
                      "properties": {
                        "ip": {
                          "description": "IP is the IP address assigned to the pod",
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-list-map-keys": [
                      "ip"
                    ],
                    "x-kubernetes-list-type": "map"
                  },
                  "qosClass": {
                    "description": "The Quality of Service (QOS) classification assigned to the pod based on resource requirements\nSee PodQOSClass type for available QOS classes\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes",
                    "type": "string"
                  },
                  "reason": {
                    "description": "A brief CamelCase message indicating details about why the pod is in this state.\ne.g. 'Evicted'",
                    "type": "string"
                  },
                  "resize": {
                    "description": "Status of resources resize desired for pod's containers.\nIt is empty if no resources resize is pending.\nAny changes to container resources will automatically set this to \"Proposed\"",
                    "type": "string"
                  },
                  "resourceClaimStatuses": {
                    "description": "Status of resource claims.",
                    "type": "array",
                    "items": {
                      "description": "PodResourceClaimStatus is stored in the PodStatus for each PodResourceClaim\nwhich references a ResourceClaimTemplate. It stores the generated name for\nthe corresponding ResourceClaim.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name uniquely identifies this resource claim inside the pod.\nThis must match the name of an entry in pod.spec.resourceClaims,\nwhich implies that the string must be a DNS_LABEL.",
                          "type": "string"
                        },
                        "resourceClaimName": {
                          "description": "ResourceClaimName is the name of the ResourceClaim that was\ngenerated for the Pod in the namespace of the Pod. If this is\nunset, then generating a ResourceClaim was not necessary. The\npod.spec.resourceClaims entry can be ignored in this case.",
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-list-map-keys": [
                      "name"
                    ],
                    "x-kubernetes-list-type": "map"
                  },
                  "startTime": {
                    "description": "RFC 3339 date and time at which the object was acknowledged by the Kubelet.\nThis is before the Kubelet pulled the container image(s) for the pod.",
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        }
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}