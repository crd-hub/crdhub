{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "podviews.core.k8s.appscode.com",
    "creationTimestamp": null
  },
  "spec": {
    "group": "core.k8s.appscode.com",
    "names": {
      "plural": "podviews",
      "singular": "podview",
      "kind": "PodView",
      "listKind": "PodViewList"
    },
    "scope": "Namespaced",
    "versions": [
      {
        "name": "v1alpha1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "PodViewSpec defines the desired state of PodView",
                "type": "object",
                "required": [
                  "containers",
                  "resources"
                ],
                "properties": {
                  "containers": {
                    "type": "array",
                    "items": {
                      "description": "A single application container that you want to run within a pod.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "args": {
                          "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "command": {
                          "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "env": {
                          "description": "List of environment variables to set in the container. Cannot be updated.",
                          "type": "array",
                          "items": {
                            "description": "EnvVar represents an environment variable present in a Container.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                                "type": "string"
                              },
                              "value": {
                                "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                                "type": "string"
                              },
                              "valueFrom": {
                                "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                                "type": "object",
                                "properties": {
                                  "configMapKeyRef": {
                                    "description": "Selects a key of a ConfigMap.",
                                    "type": "object",
                                    "required": [
                                      "key"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key to select.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                        "type": "string"
                                      },
                                      "optional": {
                                        "description": "Specify whether the ConfigMap or its key must be defined",
                                        "type": "boolean"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "fieldRef": {
                                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                    "type": "object",
                                    "required": [
                                      "fieldPath"
                                    ],
                                    "properties": {
                                      "apiVersion": {
                                        "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                        "type": "string"
                                      },
                                      "fieldPath": {
                                        "description": "Path of the field to select in the specified API version.",
                                        "type": "string"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "resourceFieldRef": {
                                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                    "type": "object",
                                    "required": [
                                      "resource"
                                    ],
                                    "properties": {
                                      "containerName": {
                                        "description": "Container name: required for volumes, optional for env vars",
                                        "type": "string"
                                      },
                                      "divisor": {
                                        "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "x-kubernetes-int-or-string": true
                                      },
                                      "resource": {
                                        "description": "Required: resource to select",
                                        "type": "string"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "secretKeyRef": {
                                    "description": "Selects a key of a secret in the pod's namespace",
                                    "type": "object",
                                    "required": [
                                      "key"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key of the secret to select from.  Must be a valid secret key.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                        "type": "string"
                                      },
                                      "optional": {
                                        "description": "Specify whether the Secret or its key must be defined",
                                        "type": "boolean"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "envFrom": {
                          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                          "type": "array",
                          "items": {
                            "description": "EnvFromSource represents the source of a set of ConfigMaps",
                            "type": "object",
                            "properties": {
                              "configMapRef": {
                                "description": "The ConfigMap to select from",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "prefix": {
                                "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                                "type": "string"
                              },
                              "secretRef": {
                                "description": "The Secret to select from",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              }
                            }
                          }
                        },
                        "image": {
                          "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                          "type": "string"
                        },
                        "imagePullPolicy": {
                          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                          "type": "string"
                        },
                        "lifecycle": {
                          "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                          "type": "object",
                          "properties": {
                            "postStart": {
                              "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                              "type": "object",
                              "properties": {
                                "exec": {
                                  "description": "Exec specifies the action to take.",
                                  "type": "object",
                                  "properties": {
                                    "command": {
                                      "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "httpGet": {
                                  "description": "HTTPGet specifies the http request to perform.",
                                  "type": "object",
                                  "required": [
                                    "port"
                                  ],
                                  "properties": {
                                    "host": {
                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                      "type": "string"
                                    },
                                    "httpHeaders": {
                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                      "type": "array",
                                      "items": {
                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                        "type": "object",
                                        "required": [
                                          "name",
                                          "value"
                                        ],
                                        "properties": {
                                          "name": {
                                            "description": "The header field name",
                                            "type": "string"
                                          },
                                          "value": {
                                            "description": "The header field value",
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "path": {
                                      "description": "Path to access on the HTTP server.",
                                      "type": "string"
                                    },
                                    "port": {
                                      "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                      "anyOf": [
                                        {
                                          "type": "integer"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "x-kubernetes-int-or-string": true
                                    },
                                    "scheme": {
                                      "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "tcpSocket": {
                                  "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.",
                                  "type": "object",
                                  "required": [
                                    "port"
                                  ],
                                  "properties": {
                                    "host": {
                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                      "type": "string"
                                    },
                                    "port": {
                                      "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                      "anyOf": [
                                        {
                                          "type": "integer"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "x-kubernetes-int-or-string": true
                                    }
                                  }
                                }
                              }
                            },
                            "preStop": {
                              "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                              "type": "object",
                              "properties": {
                                "exec": {
                                  "description": "Exec specifies the action to take.",
                                  "type": "object",
                                  "properties": {
                                    "command": {
                                      "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "httpGet": {
                                  "description": "HTTPGet specifies the http request to perform.",
                                  "type": "object",
                                  "required": [
                                    "port"
                                  ],
                                  "properties": {
                                    "host": {
                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                      "type": "string"
                                    },
                                    "httpHeaders": {
                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                      "type": "array",
                                      "items": {
                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                        "type": "object",
                                        "required": [
                                          "name",
                                          "value"
                                        ],
                                        "properties": {
                                          "name": {
                                            "description": "The header field name",
                                            "type": "string"
                                          },
                                          "value": {
                                            "description": "The header field value",
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "path": {
                                      "description": "Path to access on the HTTP server.",
                                      "type": "string"
                                    },
                                    "port": {
                                      "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                      "anyOf": [
                                        {
                                          "type": "integer"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "x-kubernetes-int-or-string": true
                                    },
                                    "scheme": {
                                      "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "tcpSocket": {
                                  "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.",
                                  "type": "object",
                                  "required": [
                                    "port"
                                  ],
                                  "properties": {
                                    "host": {
                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                      "type": "string"
                                    },
                                    "port": {
                                      "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                      "anyOf": [
                                        {
                                          "type": "integer"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "x-kubernetes-int-or-string": true
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "livenessProbe": {
                          "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                          "type": "object",
                          "properties": {
                            "exec": {
                              "description": "Exec specifies the action to take.",
                              "type": "object",
                              "properties": {
                                "command": {
                                  "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "failureThreshold": {
                              "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "grpc": {
                              "description": "GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "port": {
                                  "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "service": {
                                  "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.",
                                  "type": "string"
                                }
                              }
                            },
                            "httpGet": {
                              "description": "HTTPGet specifies the http request to perform.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "host": {
                                  "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                  "type": "string"
                                },
                                "httpHeaders": {
                                  "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                  "type": "array",
                                  "items": {
                                    "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                    "type": "object",
                                    "required": [
                                      "name",
                                      "value"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "The header field name",
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "The header field value",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "path": {
                                  "description": "Path to access on the HTTP server.",
                                  "type": "string"
                                },
                                "port": {
                                  "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "scheme": {
                                  "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                  "type": "string"
                                }
                              }
                            },
                            "initialDelaySeconds": {
                              "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                              "type": "integer",
                              "format": "int32"
                            },
                            "periodSeconds": {
                              "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "successThreshold": {
                              "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "tcpSocket": {
                              "description": "TCPSocket specifies an action involving a TCP port.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "host": {
                                  "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                  "type": "string"
                                },
                                "port": {
                                  "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                }
                              }
                            },
                            "terminationGracePeriodSeconds": {
                              "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "timeoutSeconds": {
                              "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "name": {
                          "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                          "type": "string"
                        },
                        "ports": {
                          "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
                          "type": "array",
                          "items": {
                            "description": "ContainerPort represents a network port in a single container.",
                            "type": "object",
                            "required": [
                              "containerPort"
                            ],
                            "properties": {
                              "containerPort": {
                                "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 \u003c x \u003c 65536.",
                                "type": "integer",
                                "format": "int32"
                              },
                              "hostIP": {
                                "description": "What host IP to bind the external port to.",
                                "type": "string"
                              },
                              "hostPort": {
                                "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 \u003c x \u003c 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                                "type": "integer",
                                "format": "int32"
                              },
                              "name": {
                                "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                                "type": "string"
                              },
                              "protocol": {
                                "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
                                "type": "string",
                                "default": "TCP"
                              }
                            }
                          },
                          "x-kubernetes-list-map-keys": [
                            "containerPort",
                            "protocol"
                          ],
                          "x-kubernetes-list-type": "map"
                        },
                        "readinessProbe": {
                          "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                          "type": "object",
                          "properties": {
                            "exec": {
                              "description": "Exec specifies the action to take.",
                              "type": "object",
                              "properties": {
                                "command": {
                                  "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "failureThreshold": {
                              "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "grpc": {
                              "description": "GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "port": {
                                  "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "service": {
                                  "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.",
                                  "type": "string"
                                }
                              }
                            },
                            "httpGet": {
                              "description": "HTTPGet specifies the http request to perform.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "host": {
                                  "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                  "type": "string"
                                },
                                "httpHeaders": {
                                  "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                  "type": "array",
                                  "items": {
                                    "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                    "type": "object",
                                    "required": [
                                      "name",
                                      "value"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "The header field name",
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "The header field value",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "path": {
                                  "description": "Path to access on the HTTP server.",
                                  "type": "string"
                                },
                                "port": {
                                  "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "scheme": {
                                  "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                  "type": "string"
                                }
                              }
                            },
                            "initialDelaySeconds": {
                              "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                              "type": "integer",
                              "format": "int32"
                            },
                            "periodSeconds": {
                              "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "successThreshold": {
                              "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "tcpSocket": {
                              "description": "TCPSocket specifies an action involving a TCP port.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "host": {
                                  "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                  "type": "string"
                                },
                                "port": {
                                  "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                }
                              }
                            },
                            "terminationGracePeriodSeconds": {
                              "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "timeoutSeconds": {
                              "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "resources": {
                          "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "type": "object",
                          "properties": {
                            "limits": {
                              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "requests": {
                              "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "usage": {
                              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        },
                        "securityContext": {
                          "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                          "type": "object",
                          "properties": {
                            "allowPrivilegeEscalation": {
                              "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                              "type": "boolean"
                            },
                            "capabilities": {
                              "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.",
                              "type": "object",
                              "properties": {
                                "add": {
                                  "description": "Added capabilities",
                                  "type": "array",
                                  "items": {
                                    "description": "Capability represent POSIX capabilities type",
                                    "type": "string"
                                  }
                                },
                                "drop": {
                                  "description": "Removed capabilities",
                                  "type": "array",
                                  "items": {
                                    "description": "Capability represent POSIX capabilities type",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "privileged": {
                              "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                              "type": "boolean"
                            },
                            "procMount": {
                              "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
                              "type": "string"
                            },
                            "readOnlyRootFilesystem": {
                              "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                              "type": "boolean"
                            },
                            "runAsGroup": {
                              "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "runAsNonRoot": {
                              "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                              "type": "boolean"
                            },
                            "runAsUser": {
                              "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "seLinuxOptions": {
                              "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                              "type": "object",
                              "properties": {
                                "level": {
                                  "description": "Level is SELinux level label that applies to the container.",
                                  "type": "string"
                                },
                                "role": {
                                  "description": "Role is a SELinux role label that applies to the container.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Type is a SELinux type label that applies to the container.",
                                  "type": "string"
                                },
                                "user": {
                                  "description": "User is a SELinux user label that applies to the container.",
                                  "type": "string"
                                }
                              }
                            },
                            "seccompProfile": {
                              "description": "The seccomp options to use by this container. If seccomp options are provided at both the pod \u0026 container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.",
                              "type": "object",
                              "required": [
                                "type"
                              ],
                              "properties": {
                                "localhostProfile": {
                                  "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is \"Localhost\".",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                                  "type": "string"
                                }
                              }
                            },
                            "windowsOptions": {
                              "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.",
                              "type": "object",
                              "properties": {
                                "gmsaCredentialSpec": {
                                  "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                  "type": "string"
                                },
                                "gmsaCredentialSpecName": {
                                  "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                  "type": "string"
                                },
                                "hostProcess": {
                                  "description": "HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.",
                                  "type": "boolean"
                                },
                                "runAsUserName": {
                                  "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "startupProbe": {
                          "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                          "type": "object",
                          "properties": {
                            "exec": {
                              "description": "Exec specifies the action to take.",
                              "type": "object",
                              "properties": {
                                "command": {
                                  "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "failureThreshold": {
                              "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "grpc": {
                              "description": "GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "port": {
                                  "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "service": {
                                  "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.",
                                  "type": "string"
                                }
                              }
                            },
                            "httpGet": {
                              "description": "HTTPGet specifies the http request to perform.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "host": {
                                  "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                  "type": "string"
                                },
                                "httpHeaders": {
                                  "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                  "type": "array",
                                  "items": {
                                    "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                    "type": "object",
                                    "required": [
                                      "name",
                                      "value"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "The header field name",
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "The header field value",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "path": {
                                  "description": "Path to access on the HTTP server.",
                                  "type": "string"
                                },
                                "port": {
                                  "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "scheme": {
                                  "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                  "type": "string"
                                }
                              }
                            },
                            "initialDelaySeconds": {
                              "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                              "type": "integer",
                              "format": "int32"
                            },
                            "periodSeconds": {
                              "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "successThreshold": {
                              "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "tcpSocket": {
                              "description": "TCPSocket specifies an action involving a TCP port.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "host": {
                                  "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                  "type": "string"
                                },
                                "port": {
                                  "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                }
                              }
                            },
                            "terminationGracePeriodSeconds": {
                              "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "timeoutSeconds": {
                              "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "stdin": {
                          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                          "type": "boolean"
                        },
                        "stdinOnce": {
                          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                          "type": "boolean"
                        },
                        "terminationMessagePath": {
                          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                          "type": "string"
                        },
                        "terminationMessagePolicy": {
                          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                          "type": "string"
                        },
                        "tty": {
                          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                          "type": "boolean"
                        },
                        "volumeDevices": {
                          "description": "volumeDevices is the list of block devices to be used by the container.",
                          "type": "array",
                          "items": {
                            "description": "volumeDevice describes a mapping of a raw block device within a container.",
                            "type": "object",
                            "required": [
                              "devicePath",
                              "name"
                            ],
                            "properties": {
                              "devicePath": {
                                "description": "devicePath is the path inside of the container that the device will be mapped to.",
                                "type": "string"
                              },
                              "name": {
                                "description": "name must match the name of a persistentVolumeClaim in the pod",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "volumeMounts": {
                          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                          "type": "array",
                          "items": {
                            "description": "VolumeMount describes a mounting of a Volume within a container.",
                            "type": "object",
                            "required": [
                              "mountPath",
                              "name"
                            ],
                            "properties": {
                              "mountPath": {
                                "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                "type": "string"
                              },
                              "mountPropagation": {
                                "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                                "type": "string"
                              },
                              "name": {
                                "description": "This must match the Name of a Volume.",
                                "type": "string"
                              },
                              "readOnly": {
                                "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                                "type": "boolean"
                              },
                              "subPath": {
                                "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                                "type": "string"
                              },
                              "subPathExpr": {
                                "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "workingDir": {
                          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "resources": {
                    "description": "ResourceView describes the compute resource requirements.",
                    "type": "object",
                    "properties": {
                      "limits": {
                        "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "type": "object",
                        "additionalProperties": {
                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        }
                      },
                      "requests": {
                        "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "type": "object",
                        "additionalProperties": {
                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        }
                      },
                      "usage": {
                        "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "type": "object",
                        "additionalProperties": {
                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        }
                      }
                    }
                  }
                }
              },
              "status": {
                "description": "PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.",
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
                    "type": "array",
                    "items": {
                      "description": "PodCondition contains details for the current condition of this pod.",
                      "type": "object",
                      "required": [
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastProbeTime": {
                          "description": "Last time we probed the condition.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "lastTransitionTime": {
                          "description": "Last time the condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "Human-readable message indicating details about last transition.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "containerStatuses": {
                    "description": "The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
                    "type": "array",
                    "items": {
                      "description": "ContainerStatus contains details for the current status of this container.",
                      "type": "object",
                      "required": [
                        "image",
                        "imageID",
                        "name",
                        "ready",
                        "restartCount"
                      ],
                      "properties": {
                        "containerID": {
                          "description": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'.",
                          "type": "string"
                        },
                        "image": {
                          "description": "The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.",
                          "type": "string"
                        },
                        "imageID": {
                          "description": "ImageID of the container's image.",
                          "type": "string"
                        },
                        "lastState": {
                          "description": "Details about the container's last termination condition.",
                          "type": "object",
                          "properties": {
                            "running": {
                              "description": "Details about a running container",
                              "type": "object",
                              "properties": {
                                "startedAt": {
                                  "description": "Time at which the container was last (re-)started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "terminated": {
                              "description": "Details about a terminated container",
                              "type": "object",
                              "required": [
                                "exitCode"
                              ],
                              "properties": {
                                "containerID": {
                                  "description": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'",
                                  "type": "string"
                                },
                                "exitCode": {
                                  "description": "Exit status from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "finishedAt": {
                                  "description": "Time at which the container last terminated",
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "message": {
                                  "description": "Message regarding the last termination of the container",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason from the last termination of the container",
                                  "type": "string"
                                },
                                "signal": {
                                  "description": "Signal from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "startedAt": {
                                  "description": "Time at which previous execution of the container started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "waiting": {
                              "description": "Details about a waiting container",
                              "type": "object",
                              "properties": {
                                "message": {
                                  "description": "Message regarding why the container is not yet running.",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason the container is not yet running.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "name": {
                          "description": "This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.",
                          "type": "string"
                        },
                        "ready": {
                          "description": "Specifies whether the container has passed its readiness probe.",
                          "type": "boolean"
                        },
                        "restartCount": {
                          "description": "The number of times the container has been restarted.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "started": {
                          "description": "Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.",
                          "type": "boolean"
                        },
                        "state": {
                          "description": "Details about the container's current condition.",
                          "type": "object",
                          "properties": {
                            "running": {
                              "description": "Details about a running container",
                              "type": "object",
                              "properties": {
                                "startedAt": {
                                  "description": "Time at which the container was last (re-)started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "terminated": {
                              "description": "Details about a terminated container",
                              "type": "object",
                              "required": [
                                "exitCode"
                              ],
                              "properties": {
                                "containerID": {
                                  "description": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'",
                                  "type": "string"
                                },
                                "exitCode": {
                                  "description": "Exit status from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "finishedAt": {
                                  "description": "Time at which the container last terminated",
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "message": {
                                  "description": "Message regarding the last termination of the container",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason from the last termination of the container",
                                  "type": "string"
                                },
                                "signal": {
                                  "description": "Signal from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "startedAt": {
                                  "description": "Time at which previous execution of the container started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "waiting": {
                              "description": "Details about a waiting container",
                              "type": "object",
                              "properties": {
                                "message": {
                                  "description": "Message regarding why the container is not yet running.",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason the container is not yet running.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "ephemeralContainerStatuses": {
                    "description": "Status for any ephemeral containers that have run in this pod.",
                    "type": "array",
                    "items": {
                      "description": "ContainerStatus contains details for the current status of this container.",
                      "type": "object",
                      "required": [
                        "image",
                        "imageID",
                        "name",
                        "ready",
                        "restartCount"
                      ],
                      "properties": {
                        "containerID": {
                          "description": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'.",
                          "type": "string"
                        },
                        "image": {
                          "description": "The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.",
                          "type": "string"
                        },
                        "imageID": {
                          "description": "ImageID of the container's image.",
                          "type": "string"
                        },
                        "lastState": {
                          "description": "Details about the container's last termination condition.",
                          "type": "object",
                          "properties": {
                            "running": {
                              "description": "Details about a running container",
                              "type": "object",
                              "properties": {
                                "startedAt": {
                                  "description": "Time at which the container was last (re-)started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "terminated": {
                              "description": "Details about a terminated container",
                              "type": "object",
                              "required": [
                                "exitCode"
                              ],
                              "properties": {
                                "containerID": {
                                  "description": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'",
                                  "type": "string"
                                },
                                "exitCode": {
                                  "description": "Exit status from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "finishedAt": {
                                  "description": "Time at which the container last terminated",
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "message": {
                                  "description": "Message regarding the last termination of the container",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason from the last termination of the container",
                                  "type": "string"
                                },
                                "signal": {
                                  "description": "Signal from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "startedAt": {
                                  "description": "Time at which previous execution of the container started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "waiting": {
                              "description": "Details about a waiting container",
                              "type": "object",
                              "properties": {
                                "message": {
                                  "description": "Message regarding why the container is not yet running.",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason the container is not yet running.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "name": {
                          "description": "This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.",
                          "type": "string"
                        },
                        "ready": {
                          "description": "Specifies whether the container has passed its readiness probe.",
                          "type": "boolean"
                        },
                        "restartCount": {
                          "description": "The number of times the container has been restarted.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "started": {
                          "description": "Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.",
                          "type": "boolean"
                        },
                        "state": {
                          "description": "Details about the container's current condition.",
                          "type": "object",
                          "properties": {
                            "running": {
                              "description": "Details about a running container",
                              "type": "object",
                              "properties": {
                                "startedAt": {
                                  "description": "Time at which the container was last (re-)started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "terminated": {
                              "description": "Details about a terminated container",
                              "type": "object",
                              "required": [
                                "exitCode"
                              ],
                              "properties": {
                                "containerID": {
                                  "description": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'",
                                  "type": "string"
                                },
                                "exitCode": {
                                  "description": "Exit status from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "finishedAt": {
                                  "description": "Time at which the container last terminated",
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "message": {
                                  "description": "Message regarding the last termination of the container",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason from the last termination of the container",
                                  "type": "string"
                                },
                                "signal": {
                                  "description": "Signal from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "startedAt": {
                                  "description": "Time at which previous execution of the container started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "waiting": {
                              "description": "Details about a waiting container",
                              "type": "object",
                              "properties": {
                                "message": {
                                  "description": "Message regarding why the container is not yet running.",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason the container is not yet running.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "hostIP": {
                    "description": "IP address of the host to which the pod is assigned. Empty if not yet scheduled.",
                    "type": "string"
                  },
                  "initContainerStatuses": {
                    "description": "The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
                    "type": "array",
                    "items": {
                      "description": "ContainerStatus contains details for the current status of this container.",
                      "type": "object",
                      "required": [
                        "image",
                        "imageID",
                        "name",
                        "ready",
                        "restartCount"
                      ],
                      "properties": {
                        "containerID": {
                          "description": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'.",
                          "type": "string"
                        },
                        "image": {
                          "description": "The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.",
                          "type": "string"
                        },
                        "imageID": {
                          "description": "ImageID of the container's image.",
                          "type": "string"
                        },
                        "lastState": {
                          "description": "Details about the container's last termination condition.",
                          "type": "object",
                          "properties": {
                            "running": {
                              "description": "Details about a running container",
                              "type": "object",
                              "properties": {
                                "startedAt": {
                                  "description": "Time at which the container was last (re-)started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "terminated": {
                              "description": "Details about a terminated container",
                              "type": "object",
                              "required": [
                                "exitCode"
                              ],
                              "properties": {
                                "containerID": {
                                  "description": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'",
                                  "type": "string"
                                },
                                "exitCode": {
                                  "description": "Exit status from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "finishedAt": {
                                  "description": "Time at which the container last terminated",
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "message": {
                                  "description": "Message regarding the last termination of the container",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason from the last termination of the container",
                                  "type": "string"
                                },
                                "signal": {
                                  "description": "Signal from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "startedAt": {
                                  "description": "Time at which previous execution of the container started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "waiting": {
                              "description": "Details about a waiting container",
                              "type": "object",
                              "properties": {
                                "message": {
                                  "description": "Message regarding why the container is not yet running.",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason the container is not yet running.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "name": {
                          "description": "This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.",
                          "type": "string"
                        },
                        "ready": {
                          "description": "Specifies whether the container has passed its readiness probe.",
                          "type": "boolean"
                        },
                        "restartCount": {
                          "description": "The number of times the container has been restarted.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "started": {
                          "description": "Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.",
                          "type": "boolean"
                        },
                        "state": {
                          "description": "Details about the container's current condition.",
                          "type": "object",
                          "properties": {
                            "running": {
                              "description": "Details about a running container",
                              "type": "object",
                              "properties": {
                                "startedAt": {
                                  "description": "Time at which the container was last (re-)started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "terminated": {
                              "description": "Details about a terminated container",
                              "type": "object",
                              "required": [
                                "exitCode"
                              ],
                              "properties": {
                                "containerID": {
                                  "description": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'",
                                  "type": "string"
                                },
                                "exitCode": {
                                  "description": "Exit status from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "finishedAt": {
                                  "description": "Time at which the container last terminated",
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "message": {
                                  "description": "Message regarding the last termination of the container",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason from the last termination of the container",
                                  "type": "string"
                                },
                                "signal": {
                                  "description": "Signal from the last termination of the container",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "startedAt": {
                                  "description": "Time at which previous execution of the container started",
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "waiting": {
                              "description": "Details about a waiting container",
                              "type": "object",
                              "properties": {
                                "message": {
                                  "description": "Message regarding why the container is not yet running.",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "(brief) reason the container is not yet running.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "message": {
                    "description": "A human readable message indicating details about why the pod is in this condition.",
                    "type": "string"
                  },
                  "nominatedNodeName": {
                    "description": "nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.",
                    "type": "string"
                  },
                  "phase": {
                    "description": "The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values: \n Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod. \n More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase",
                    "type": "string"
                  },
                  "podIP": {
                    "description": "IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.",
                    "type": "string"
                  },
                  "podIPs": {
                    "description": "podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.",
                    "type": "array",
                    "items": {
                      "description": "IP address information for entries in the (plural) PodIPs field. Each entry includes: \n IP: An IP address allocated to the pod. Routable at least within the cluster.",
                      "type": "object",
                      "properties": {
                        "ip": {
                          "description": "ip is an IP address (IPv4 or IPv6) assigned to the pod",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "qosClass": {
                    "description": "The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md",
                    "type": "string"
                  },
                  "reason": {
                    "description": "A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'",
                    "type": "string"
                  },
                  "startTime": {
                    "description": "RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.",
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        }
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}