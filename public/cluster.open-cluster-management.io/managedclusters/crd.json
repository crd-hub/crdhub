{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "managedclusters.cluster.open-cluster-management.io",
    "creationTimestamp": null
  },
  "spec": {
    "group": "cluster.open-cluster-management.io",
    "names": {
      "plural": "managedclusters",
      "singular": "managedcluster",
      "shortNames": [
        "mcl",
        "mcls"
      ],
      "kind": "ManagedCluster",
      "listKind": "ManagedClusterList"
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "ManagedCluster represents the desired state and current status\nof a managed cluster. ManagedCluster is a cluster-scoped resource. The name\nis the cluster UID.\n\n\nThe cluster join process is a double opt-in process. See the following join process steps:\n\n\n1. The agent on the managed cluster creates a CSR on the hub with the cluster UID and agent name.\n2. The agent on the managed cluster creates a ManagedCluster on the hub.\n3. The cluster admin on the hub cluster approves the CSR for the UID and agent name of the ManagedCluster.\n4. The cluster admin sets the spec.acceptClient of the ManagedCluster to true.\n5. The cluster admin on the managed cluster creates a credential of the kubeconfig for the hub cluster.\n\n\nAfter the hub cluster creates the cluster namespace, the klusterlet agent on the ManagedCluster pushes\nthe credential to the hub cluster to use against the kube-apiserver of the ManagedCluster.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "Spec represents a desired configuration for the agent on the managed cluster.",
                "type": "object",
                "properties": {
                  "hubAcceptsClient": {
                    "description": "hubAcceptsClient represents that hub accepts the joining of Klusterlet agent on\nthe managed cluster with the hub. The default value is false, and can only be set\ntrue when the user on hub has an RBAC rule to UPDATE on the virtual subresource\nof managedclusters/accept.\nWhen the value is set true, a namespace whose name is the same as the name of ManagedCluster\nis created on the hub. This namespace represents the managed cluster, also role/rolebinding is created on\nthe namespace to grant the permision of access from the agent on the managed cluster.\nWhen the value is set to false, the namespace representing the managed cluster is\ndeleted.",
                    "type": "boolean"
                  },
                  "leaseDurationSeconds": {
                    "description": "LeaseDurationSeconds is used to coordinate the lease update time of Klusterlet agents on the managed cluster.\nIf its value is zero, the Klusterlet agent will update its lease every 60 seconds by default",
                    "type": "integer",
                    "format": "int32",
                    "default": 60
                  },
                  "managedClusterClientConfigs": {
                    "description": "ManagedClusterClientConfigs represents a list of the apiserver address of the managed cluster.\nIf it is empty, the managed cluster has no accessible address for the hub to connect with it.",
                    "type": "array",
                    "items": {
                      "description": "ClientConfig represents the apiserver address of the managed cluster.\nTODO include credential to connect to managed cluster kube-apiserver",
                      "type": "object",
                      "properties": {
                        "caBundle": {
                          "description": "CABundle is the ca bundle to connect to apiserver of the managed cluster.\nSystem certs are used if it is not set.",
                          "type": "string",
                          "format": "byte"
                        },
                        "url": {
                          "description": "URL is the URL of apiserver endpoint of the managed cluster.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "taints": {
                    "description": "Taints is a property of managed cluster that allow the cluster to be repelled when scheduling.\nTaints, including 'ManagedClusterUnavailable' and 'ManagedClusterUnreachable', can not be added/removed by agent\nrunning on the managed cluster; while it's fine to add/remove other taints from either hub cluser or managed cluster.",
                    "type": "array",
                    "items": {
                      "description": "The managed cluster this Taint is attached to has the \"effect\" on\nany placement that does not tolerate the Taint.",
                      "type": "object",
                      "required": [
                        "effect",
                        "key"
                      ],
                      "properties": {
                        "effect": {
                          "description": "Effect indicates the effect of the taint on placements that do not tolerate the taint.\nValid effects are NoSelect, PreferNoSelect and NoSelectIfNew.",
                          "type": "string",
                          "enum": [
                            "NoSelect",
                            "PreferNoSelect",
                            "NoSelectIfNew"
                          ]
                        },
                        "key": {
                          "description": "Key is the taint key applied to a cluster. e.g. bar or foo.example.com/bar.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                          "type": "string",
                          "maxLength": 316,
                          "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                        },
                        "timeAdded": {
                          "description": "TimeAdded represents the time at which the taint was added.",
                          "type": "string",
                          "format": "date-time",
                          "nullable": true
                        },
                        "value": {
                          "description": "Value is the taint value corresponding to the taint key.",
                          "type": "string",
                          "maxLength": 1024
                        }
                      }
                    }
                  }
                }
              },
              "status": {
                "description": "Status represents the current status of joined managed cluster",
                "type": "object",
                "properties": {
                  "allocatable": {
                    "description": "Allocatable represents the total allocatable resources on the managed cluster.",
                    "type": "object",
                    "additionalProperties": {
                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "x-kubernetes-int-or-string": true
                    }
                  },
                  "capacity": {
                    "description": "Capacity represents the total resource capacity from all nodeStatuses\non the managed cluster.",
                    "type": "object",
                    "additionalProperties": {
                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "x-kubernetes-int-or-string": true
                    }
                  },
                  "clusterClaims": {
                    "description": "ClusterClaims represents cluster information that a managed cluster claims,\nfor example a unique cluster identifier (id.k8s.io) and kubernetes version\n(kubeversion.open-cluster-management.io). They are written from the managed\ncluster. The set of claims is not uniform across a fleet, some claims can be\nvendor or version specific and may not be included from all managed clusters.",
                    "type": "array",
                    "items": {
                      "description": "ManagedClusterClaim represents a ClusterClaim collected from a managed cluster.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name is the name of a ClusterClaim resource on managed cluster. It's a well known\nor customized name to identify the claim.",
                          "type": "string",
                          "maxLength": 253,
                          "minLength": 1
                        },
                        "value": {
                          "description": "Value is a claim-dependent string",
                          "type": "string",
                          "maxLength": 1024,
                          "minLength": 1
                        }
                      }
                    }
                  },
                  "conditions": {
                    "description": "Conditions contains the different condition statuses for this managed cluster.",
                    "type": "array",
                    "items": {
                      "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "message",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                          "type": "string",
                          "maxLength": 32768
                        },
                        "observedGeneration": {
                          "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                          "type": "integer",
                          "format": "int64",
                          "minimum": 0
                        },
                        "reason": {
                          "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                          "type": "string",
                          "maxLength": 1024,
                          "minLength": 1,
                          "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                        },
                        "status": {
                          "description": "status of the condition, one of True, False, Unknown.",
                          "type": "string",
                          "enum": [
                            "True",
                            "False",
                            "Unknown"
                          ]
                        },
                        "type": {
                          "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                          "type": "string",
                          "maxLength": 316,
                          "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                        }
                      }
                    }
                  },
                  "version": {
                    "description": "Version represents the kubernetes version of the managed cluster.",
                    "type": "object",
                    "properties": {
                      "kubernetes": {
                        "description": "Kubernetes is the kubernetes version of managed cluster.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "Hub Accepted",
            "type": "boolean",
            "jsonPath": ".spec.hubAcceptsClient"
          },
          {
            "name": "Managed Cluster URLs",
            "type": "string",
            "jsonPath": ".spec.managedClusterClientConfigs[*].url"
          },
          {
            "name": "Joined",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type==\"ManagedClusterJoined\")].status"
          },
          {
            "name": "Available",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type==\"ManagedClusterConditionAvailable\")].status"
          },
          {
            "name": "Age",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": [],
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": []
  }
}