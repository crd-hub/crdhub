{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "managedclustersets.cluster.open-cluster-management.io",
    "creationTimestamp": null
  },
  "spec": {
    "group": "cluster.open-cluster-management.io",
    "names": {
      "plural": "managedclustersets",
      "singular": "managedclusterset",
      "shortNames": [
        "mclset",
        "mclsets"
      ],
      "kind": "ManagedClusterSet",
      "listKind": "ManagedClusterSetList"
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1beta2",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "ManagedClusterSet defines a group of ManagedClusters that you can run\nworkloads on. You can define a workload to be deployed on a ManagedClusterSet. See the following options  for the workload:\n- The workload can run on any ManagedCluster in the ManagedClusterSet\n- The workload cannot run on any ManagedCluster outside the ManagedClusterSet\n- The service exposed by the workload can be shared in any ManagedCluster in the ManagedClusterSet\n\n\nTo assign a ManagedCluster to a certain ManagedClusterSet, add a label with the name cluster.open-cluster-management.io/clusterset\non the ManagedCluster to refer to the ManagedClusterSet. You are not\nallowed to add or remove this label on a ManagedCluster unless you have an\nRBAC rule to CREATE on a virtual subresource of managedclustersets/join.\nTo update this label, you must have the permission on both\nthe old and new ManagedClusterSet.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "Spec defines the attributes of the ManagedClusterSet",
                "type": "object",
                "default": {
                  "clusterSelector": {
                    "selectorType": "ExclusiveClusterSetLabel"
                  }
                },
                "properties": {
                  "clusterSelector": {
                    "description": "ClusterSelector represents a selector of ManagedClusters",
                    "type": "object",
                    "default": {
                      "selectorType": "ExclusiveClusterSetLabel"
                    },
                    "properties": {
                      "labelSelector": {
                        "description": "LabelSelector define the general labelSelector which clusterset will use to select target managedClusters",
                        "type": "object",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "type": "array",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              }
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "matchLabels": {
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "selectorType": {
                        "description": "SelectorType could only be \"ExclusiveClusterSetLabel\" or \"LabelSelector\"\n\"ExclusiveClusterSetLabel\" means to use label \"cluster.open-cluster-management.io/clusterset:\u003cManagedClusterSet Name\u003e\"\" to select target clusters.\n\"LabelSelector\" means use labelSelector to select target managedClusters",
                        "type": "string",
                        "default": "ExclusiveClusterSetLabel",
                        "enum": [
                          "ExclusiveClusterSetLabel",
                          "LabelSelector"
                        ]
                      }
                    }
                  }
                }
              },
              "status": {
                "description": "Status represents the current status of the ManagedClusterSet",
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "Conditions contains the different condition statuses for this ManagedClusterSet.",
                    "type": "array",
                    "items": {
                      "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "message",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                          "type": "string",
                          "maxLength": 32768
                        },
                        "observedGeneration": {
                          "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                          "type": "integer",
                          "format": "int64",
                          "minimum": 0
                        },
                        "reason": {
                          "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                          "type": "string",
                          "maxLength": 1024,
                          "minLength": 1,
                          "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                        },
                        "status": {
                          "description": "status of the condition, one of True, False, Unknown.",
                          "type": "string",
                          "enum": [
                            "True",
                            "False",
                            "Unknown"
                          ]
                        },
                        "type": {
                          "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                          "type": "string",
                          "maxLength": 316,
                          "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "Empty",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type==\"ClusterSetEmpty\")].status"
          },
          {
            "name": "Age",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": [],
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": []
  }
}