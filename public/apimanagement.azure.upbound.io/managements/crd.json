{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "managements.apimanagement.azure.upbound.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.13.0"
    }
  },
  "spec": {
    "group": "apimanagement.azure.upbound.io",
    "names": {
      "plural": "managements",
      "singular": "management",
      "kind": "Management",
      "listKind": "ManagementList",
      "categories": [
        "crossplane",
        "managed",
        "azure"
      ]
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "Management is the Schema for the Managements API. Manages an API Management Service.",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "ManagementSpec defines the desired state of Management",
                "type": "object",
                "required": [
                  "forProvider"
                ],
                "properties": {
                  "deletionPolicy": {
                    "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
                    "type": "string",
                    "default": "Delete",
                    "enum": [
                      "Orphan",
                      "Delete"
                    ]
                  },
                  "forProvider": {
                    "type": "object",
                    "properties": {
                      "additionalLocation": {
                        "description": "One or more additional_location blocks as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "capacity": {
                              "description": "The number of compute units in this region. Defaults to the capacity of the main region.",
                              "type": "number"
                            },
                            "gatewayDisabled": {
                              "description": "Only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in this additional location.",
                              "type": "boolean"
                            },
                            "location": {
                              "description": "The name of the Azure Region in which the API Management Service should be expanded to.",
                              "type": "string"
                            },
                            "publicIpAddressId": {
                              "description": "ID of a standard SKU IPv4 Public IP.",
                              "type": "string"
                            },
                            "virtualNetworkConfiguration": {
                              "description": "A virtual_network_configuration block as defined below. Required when virtual_network_type is External or Internal.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "subnetId": {
                                    "description": "The id of the subnet that will be used for the API Management.",
                                    "type": "string"
                                  },
                                  "subnetIdRef": {
                                    "description": "Reference to a Subnet in network to populate subnetId.",
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "Name of the referenced object.",
                                        "type": "string"
                                      },
                                      "policy": {
                                        "description": "Policies for referencing.",
                                        "type": "object",
                                        "properties": {
                                          "resolution": {
                                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                            "type": "string",
                                            "default": "Required",
                                            "enum": [
                                              "Required",
                                              "Optional"
                                            ]
                                          },
                                          "resolve": {
                                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                            "type": "string",
                                            "enum": [
                                              "Always",
                                              "IfNotPresent"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "subnetIdSelector": {
                                    "description": "Selector for a Subnet in network to populate subnetId.",
                                    "type": "object",
                                    "properties": {
                                      "matchControllerRef": {
                                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                        "type": "boolean"
                                      },
                                      "matchLabels": {
                                        "description": "MatchLabels ensures an object with matching labels is selected.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      },
                                      "policy": {
                                        "description": "Policies for selection.",
                                        "type": "object",
                                        "properties": {
                                          "resolution": {
                                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                            "type": "string",
                                            "default": "Required",
                                            "enum": [
                                              "Required",
                                              "Optional"
                                            ]
                                          },
                                          "resolve": {
                                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                            "type": "string",
                                            "enum": [
                                              "Always",
                                              "IfNotPresent"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "zones": {
                              "description": "A list of availability zones. Changing this forces a new resource to be created.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "certificate": {
                        "description": "One or more (up to 10) certificate blocks as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "encodedCertificateSecretRef"
                          ],
                          "properties": {
                            "certificatePasswordSecretRef": {
                              "description": "The password for the certificate.",
                              "type": "object",
                              "required": [
                                "key",
                                "name",
                                "namespace"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key to select.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the secret.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace of the secret.",
                                  "type": "string"
                                }
                              }
                            },
                            "encodedCertificateSecretRef": {
                              "description": "The Base64 Encoded PFX or Base64 Encoded X.509 Certificate.",
                              "type": "object",
                              "required": [
                                "key",
                                "name",
                                "namespace"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key to select.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the secret.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace of the secret.",
                                  "type": "string"
                                }
                              }
                            },
                            "storeName": {
                              "description": "The name of the Certificate Store where this certificate should be stored. Possible values are CertificateAuthority and Root.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "clientCertificateEnabled": {
                        "description": "Enforce a client certificate to be presented on each request to the gateway? This is only supported when SKU type is Consumption.",
                        "type": "boolean"
                      },
                      "delegation": {
                        "description": "A delegation block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "subscriptionsEnabled": {
                              "description": "Should subscription requests be delegated to an external url? Defaults to false.",
                              "type": "boolean"
                            },
                            "url": {
                              "description": "The delegation URL.",
                              "type": "string"
                            },
                            "userRegistrationEnabled": {
                              "description": "Should user registration requests be delegated to an external url? Defaults to false.",
                              "type": "boolean"
                            },
                            "validationKeySecretRef": {
                              "description": "A base64-encoded validation key to validate, that a request is coming from Azure API Management.",
                              "type": "object",
                              "required": [
                                "key",
                                "name",
                                "namespace"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key to select.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the secret.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace of the secret.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      "gatewayDisabled": {
                        "description": "Disable the gateway in main region? This is only supported when additional_location is set.",
                        "type": "boolean"
                      },
                      "identity": {
                        "description": "An identity block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "identityIds": {
                              "description": "A list of User Assigned Managed Identity IDs to be assigned to this API Management Service.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "type": {
                              "description": "Specifies the type of Managed Service Identity that should be configured on this API Management Service. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "location": {
                        "description": "The Azure location where the API Management Service exists. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "minApiVersion": {
                        "description": "The version which the control plane API calls to API Management service are limited with version equal to or newer than.",
                        "type": "string"
                      },
                      "notificationSenderEmail": {
                        "description": "Email address from which the notification will be sent.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "A policy block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "xmlContent": {
                              "description": "The XML Content for this Policy.",
                              "type": "string"
                            },
                            "xmlLink": {
                              "description": "A link to an API Management Policy XML Document, which must be publicly available.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "protocols": {
                        "description": "A protocols block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enableHttp2": {
                              "description": "Should HTTP/2 be supported by the API Management Service? Defaults to false.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "publicIpAddressId": {
                        "description": "ID of a standard SKU IPv4 Public IP.",
                        "type": "string"
                      },
                      "publicNetworkAccessEnabled": {
                        "description": "Is public access to the service allowed?. Defaults to true",
                        "type": "boolean"
                      },
                      "publisherEmail": {
                        "description": "The email of publisher/company.",
                        "type": "string"
                      },
                      "publisherName": {
                        "description": "The name of publisher/company.",
                        "type": "string"
                      },
                      "resourceGroupName": {
                        "description": "The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "resourceGroupNameRef": {
                        "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "resourceGroupNameSelector": {
                        "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
                        "type": "object",
                        "properties": {
                          "matchControllerRef": {
                            "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                            "type": "boolean"
                          },
                          "matchLabels": {
                            "description": "MatchLabels ensures an object with matching labels is selected.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "policy": {
                            "description": "Policies for selection.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "security": {
                        "description": "A security block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enableBackendSsl30": {
                              "description": "Should SSL 3.0 be enabled on the backend of the gateway? Defaults to false.",
                              "type": "boolean"
                            },
                            "enableBackendTls10": {
                              "description": "Should TLS 1.0 be enabled on the backend of the gateway? Defaults to false.",
                              "type": "boolean"
                            },
                            "enableBackendTls11": {
                              "description": "Should TLS 1.1 be enabled on the backend of the gateway? Defaults to false.",
                              "type": "boolean"
                            },
                            "enableFrontendSsl30": {
                              "description": "Should SSL 3.0 be enabled on the frontend of the gateway? Defaults to false.",
                              "type": "boolean"
                            },
                            "enableFrontendTls10": {
                              "description": "Should TLS 1.0 be enabled on the frontend of the gateway? Defaults to false.",
                              "type": "boolean"
                            },
                            "enableFrontendTls11": {
                              "description": "Should TLS 1.1 be enabled on the frontend of the gateway? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsEcdheEcdsaWithAes128CbcShaCiphersEnabled": {
                              "description": "Should the TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsEcdheEcdsaWithAes256CbcShaCiphersEnabled": {
                              "description": "Should the TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsEcdheRsaWithAes128CbcShaCiphersEnabled": {
                              "description": "Should the TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsEcdheRsaWithAes256CbcShaCiphersEnabled": {
                              "description": "Should the TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsRsaWithAes128CbcSha256CiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_AES_128_CBC_SHA256 cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsRsaWithAes128CbcShaCiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_AES_128_CBC_SHA cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsRsaWithAes128GcmSha256CiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_AES_128_GCM_SHA256 cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsRsaWithAes256CbcSha256CiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_AES_256_CBC_SHA256 cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsRsaWithAes256CbcShaCiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_AES_256_CBC_SHA cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsRsaWithAes256GcmSha384CiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_AES_256_GCM_SHA384 cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tripleDesCiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_3DES_EDE_CBC_SHA cipher be enabled for alL TLS versions (1.0, 1.1 and 1.2)?",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "signIn": {
                        "description": "A sign_in block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "description": "Should anonymous users be redirected to the sign in page?",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "signUp": {
                        "description": "A sign_up block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "description": "Can users sign up on the development portal?",
                              "type": "boolean"
                            },
                            "termsOfService": {
                              "description": "A terms_of_service block as defined below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "consentRequired": {
                                    "description": "Should the user be asked for consent during sign up?",
                                    "type": "boolean"
                                  },
                                  "enabled": {
                                    "description": "Should Terms of Service be displayed during sign up?.",
                                    "type": "boolean"
                                  },
                                  "text": {
                                    "description": "The Terms of Service which users are required to agree to in order to sign up.",
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "skuName": {
                        "description": "sku_name is a string consisting of two parts separated by an underscore(_). The first part is the name, valid values include: Consumption, Developer, Basic, Standard and Premium. The second part is the capacity (e.g. the number of deployed units of the sku), which must be a positive integer (e.g. Developer_1).",
                        "type": "string"
                      },
                      "tags": {
                        "description": "A mapping of tags assigned to the resource.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "tenantAccess": {
                        "description": "A tenant_access block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "description": "Should the access to the management API be enabled?",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "virtualNetworkConfiguration": {
                        "description": "A virtual_network_configuration block as defined below. Required when virtual_network_type is External or Internal.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "subnetId": {
                              "description": "The id of the subnet that will be used for the API Management.",
                              "type": "string"
                            },
                            "subnetIdRef": {
                              "description": "Reference to a Subnet in network to populate subnetId.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name of the referenced object.",
                                  "type": "string"
                                },
                                "policy": {
                                  "description": "Policies for referencing.",
                                  "type": "object",
                                  "properties": {
                                    "resolution": {
                                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                      "type": "string",
                                      "default": "Required",
                                      "enum": [
                                        "Required",
                                        "Optional"
                                      ]
                                    },
                                    "resolve": {
                                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                      "type": "string",
                                      "enum": [
                                        "Always",
                                        "IfNotPresent"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "subnetIdSelector": {
                              "description": "Selector for a Subnet in network to populate subnetId.",
                              "type": "object",
                              "properties": {
                                "matchControllerRef": {
                                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                  "type": "boolean"
                                },
                                "matchLabels": {
                                  "description": "MatchLabels ensures an object with matching labels is selected.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "policy": {
                                  "description": "Policies for selection.",
                                  "type": "object",
                                  "properties": {
                                    "resolution": {
                                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                      "type": "string",
                                      "default": "Required",
                                      "enum": [
                                        "Required",
                                        "Optional"
                                      ]
                                    },
                                    "resolve": {
                                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                      "type": "string",
                                      "enum": [
                                        "Always",
                                        "IfNotPresent"
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "virtualNetworkType": {
                        "description": "The type of virtual network you want to use, valid values include: None, External, Internal.",
                        "type": "string"
                      },
                      "zones": {
                        "description": "Specifies a list of Availability Zones in which this API Management service should be located. Changing this forces a new API Management service to be created.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "initProvider": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
                    "type": "object",
                    "properties": {
                      "additionalLocation": {
                        "description": "One or more additional_location blocks as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "capacity": {
                              "description": "The number of compute units in this region. Defaults to the capacity of the main region.",
                              "type": "number"
                            },
                            "gatewayDisabled": {
                              "description": "Only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in this additional location.",
                              "type": "boolean"
                            },
                            "location": {
                              "description": "The name of the Azure Region in which the API Management Service should be expanded to.",
                              "type": "string"
                            },
                            "publicIpAddressId": {
                              "description": "ID of a standard SKU IPv4 Public IP.",
                              "type": "string"
                            },
                            "virtualNetworkConfiguration": {
                              "description": "A virtual_network_configuration block as defined below. Required when virtual_network_type is External or Internal.",
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            },
                            "zones": {
                              "description": "A list of availability zones. Changing this forces a new resource to be created.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "certificate": {
                        "description": "One or more (up to 10) certificate blocks as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "storeName": {
                              "description": "The name of the Certificate Store where this certificate should be stored. Possible values are CertificateAuthority and Root.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "clientCertificateEnabled": {
                        "description": "Enforce a client certificate to be presented on each request to the gateway? This is only supported when SKU type is Consumption.",
                        "type": "boolean"
                      },
                      "delegation": {
                        "description": "A delegation block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "subscriptionsEnabled": {
                              "description": "Should subscription requests be delegated to an external url? Defaults to false.",
                              "type": "boolean"
                            },
                            "url": {
                              "description": "The delegation URL.",
                              "type": "string"
                            },
                            "userRegistrationEnabled": {
                              "description": "Should user registration requests be delegated to an external url? Defaults to false.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "gatewayDisabled": {
                        "description": "Disable the gateway in main region? This is only supported when additional_location is set.",
                        "type": "boolean"
                      },
                      "identity": {
                        "description": "An identity block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "identityIds": {
                              "description": "A list of User Assigned Managed Identity IDs to be assigned to this API Management Service.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "type": {
                              "description": "Specifies the type of Managed Service Identity that should be configured on this API Management Service. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "location": {
                        "description": "The Azure location where the API Management Service exists. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "minApiVersion": {
                        "description": "The version which the control plane API calls to API Management service are limited with version equal to or newer than.",
                        "type": "string"
                      },
                      "notificationSenderEmail": {
                        "description": "Email address from which the notification will be sent.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "A policy block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "xmlContent": {
                              "description": "The XML Content for this Policy.",
                              "type": "string"
                            },
                            "xmlLink": {
                              "description": "A link to an API Management Policy XML Document, which must be publicly available.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "protocols": {
                        "description": "A protocols block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enableHttp2": {
                              "description": "Should HTTP/2 be supported by the API Management Service? Defaults to false.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "publicIpAddressId": {
                        "description": "ID of a standard SKU IPv4 Public IP.",
                        "type": "string"
                      },
                      "publicNetworkAccessEnabled": {
                        "description": "Is public access to the service allowed?. Defaults to true",
                        "type": "boolean"
                      },
                      "publisherEmail": {
                        "description": "The email of publisher/company.",
                        "type": "string"
                      },
                      "publisherName": {
                        "description": "The name of publisher/company.",
                        "type": "string"
                      },
                      "security": {
                        "description": "A security block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enableBackendSsl30": {
                              "description": "Should SSL 3.0 be enabled on the backend of the gateway? Defaults to false.",
                              "type": "boolean"
                            },
                            "enableBackendTls10": {
                              "description": "Should TLS 1.0 be enabled on the backend of the gateway? Defaults to false.",
                              "type": "boolean"
                            },
                            "enableBackendTls11": {
                              "description": "Should TLS 1.1 be enabled on the backend of the gateway? Defaults to false.",
                              "type": "boolean"
                            },
                            "enableFrontendSsl30": {
                              "description": "Should SSL 3.0 be enabled on the frontend of the gateway? Defaults to false.",
                              "type": "boolean"
                            },
                            "enableFrontendTls10": {
                              "description": "Should TLS 1.0 be enabled on the frontend of the gateway? Defaults to false.",
                              "type": "boolean"
                            },
                            "enableFrontendTls11": {
                              "description": "Should TLS 1.1 be enabled on the frontend of the gateway? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsEcdheEcdsaWithAes128CbcShaCiphersEnabled": {
                              "description": "Should the TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsEcdheEcdsaWithAes256CbcShaCiphersEnabled": {
                              "description": "Should the TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsEcdheRsaWithAes128CbcShaCiphersEnabled": {
                              "description": "Should the TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsEcdheRsaWithAes256CbcShaCiphersEnabled": {
                              "description": "Should the TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsRsaWithAes128CbcSha256CiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_AES_128_CBC_SHA256 cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsRsaWithAes128CbcShaCiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_AES_128_CBC_SHA cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsRsaWithAes128GcmSha256CiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_AES_128_GCM_SHA256 cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsRsaWithAes256CbcSha256CiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_AES_256_CBC_SHA256 cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsRsaWithAes256CbcShaCiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_AES_256_CBC_SHA cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsRsaWithAes256GcmSha384CiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_AES_256_GCM_SHA384 cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tripleDesCiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_3DES_EDE_CBC_SHA cipher be enabled for alL TLS versions (1.0, 1.1 and 1.2)?",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "signIn": {
                        "description": "A sign_in block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "description": "Should anonymous users be redirected to the sign in page?",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "signUp": {
                        "description": "A sign_up block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "description": "Can users sign up on the development portal?",
                              "type": "boolean"
                            },
                            "termsOfService": {
                              "description": "A terms_of_service block as defined below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "consentRequired": {
                                    "description": "Should the user be asked for consent during sign up?",
                                    "type": "boolean"
                                  },
                                  "enabled": {
                                    "description": "Should Terms of Service be displayed during sign up?.",
                                    "type": "boolean"
                                  },
                                  "text": {
                                    "description": "The Terms of Service which users are required to agree to in order to sign up.",
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "skuName": {
                        "description": "sku_name is a string consisting of two parts separated by an underscore(_). The first part is the name, valid values include: Consumption, Developer, Basic, Standard and Premium. The second part is the capacity (e.g. the number of deployed units of the sku), which must be a positive integer (e.g. Developer_1).",
                        "type": "string"
                      },
                      "tags": {
                        "description": "A mapping of tags assigned to the resource.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "tenantAccess": {
                        "description": "A tenant_access block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "description": "Should the access to the management API be enabled?",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "virtualNetworkConfiguration": {
                        "description": "A virtual_network_configuration block as defined below. Required when virtual_network_type is External or Internal.",
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "virtualNetworkType": {
                        "description": "The type of virtual network you want to use, valid values include: None, External, Internal.",
                        "type": "string"
                      },
                      "zones": {
                        "description": "Specifies a list of Availability Zones in which this API Management service should be located. Changing this forces a new API Management service to be created.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "managementPolicies": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
                    "type": "array",
                    "default": [
                      "*"
                    ],
                    "items": {
                      "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
                      "type": "string",
                      "enum": [
                        "Observe",
                        "Create",
                        "Update",
                        "Delete",
                        "LateInitialize",
                        "*"
                      ]
                    }
                  },
                  "providerConfigRef": {
                    "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
                    "type": "object",
                    "default": {
                      "name": "default"
                    },
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "publishConnectionDetailsTo": {
                    "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "configRef": {
                        "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
                        "type": "object",
                        "default": {
                          "name": "default"
                        },
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "Metadata is the metadata for connection secret.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "type": {
                            "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name of the connection secret.",
                        "type": "string"
                      }
                    }
                  },
                  "writeConnectionSecretToRef": {
                    "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
                    "type": "object",
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  }
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.location))",
                    "message": "spec.forProvider.location is a required parameter"
                  },
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.publisherEmail) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.publisherEmail))",
                    "message": "spec.forProvider.publisherEmail is a required parameter"
                  },
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.publisherName) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.publisherName))",
                    "message": "spec.forProvider.publisherName is a required parameter"
                  },
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.skuName) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.skuName))",
                    "message": "spec.forProvider.skuName is a required parameter"
                  }
                ]
              },
              "status": {
                "description": "ManagementStatus defines the observed state of Management.",
                "type": "object",
                "properties": {
                  "atProvider": {
                    "type": "object",
                    "properties": {
                      "additionalLocation": {
                        "description": "One or more additional_location blocks as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "capacity": {
                              "description": "The number of compute units in this region. Defaults to the capacity of the main region.",
                              "type": "number"
                            },
                            "gatewayDisabled": {
                              "description": "Only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in this additional location.",
                              "type": "boolean"
                            },
                            "gatewayRegionalUrl": {
                              "description": "The URL of the Regional Gateway for the API Management Service in the specified region.",
                              "type": "string"
                            },
                            "location": {
                              "description": "The name of the Azure Region in which the API Management Service should be expanded to.",
                              "type": "string"
                            },
                            "privateIpAddresses": {
                              "description": "The Private IP addresses of the API Management Service. Available only when the API Manager instance is using Virtual Network mode.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "publicIpAddressId": {
                              "description": "ID of a standard SKU IPv4 Public IP.",
                              "type": "string"
                            },
                            "publicIpAddresses": {
                              "description": "Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "virtualNetworkConfiguration": {
                              "description": "A virtual_network_configuration block as defined below. Required when virtual_network_type is External or Internal.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "subnetId": {
                                    "description": "The id of the subnet that will be used for the API Management.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "zones": {
                              "description": "A list of availability zones. Changing this forces a new resource to be created.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "certificate": {
                        "description": "One or more (up to 10) certificate blocks as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "expiry": {
                              "description": "The expiration date of the certificate in RFC3339 format: 2000-01-02T03:04:05Z.",
                              "type": "string"
                            },
                            "storeName": {
                              "description": "The name of the Certificate Store where this certificate should be stored. Possible values are CertificateAuthority and Root.",
                              "type": "string"
                            },
                            "subject": {
                              "description": "The subject of the certificate.",
                              "type": "string"
                            },
                            "thumbprint": {
                              "description": "The thumbprint of the certificate.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "clientCertificateEnabled": {
                        "description": "Enforce a client certificate to be presented on each request to the gateway? This is only supported when SKU type is Consumption.",
                        "type": "boolean"
                      },
                      "delegation": {
                        "description": "A delegation block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "subscriptionsEnabled": {
                              "description": "Should subscription requests be delegated to an external url? Defaults to false.",
                              "type": "boolean"
                            },
                            "url": {
                              "description": "The delegation URL.",
                              "type": "string"
                            },
                            "userRegistrationEnabled": {
                              "description": "Should user registration requests be delegated to an external url? Defaults to false.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "developerPortalUrl": {
                        "description": "The URL for the Developer Portal associated with this API Management service.",
                        "type": "string"
                      },
                      "gatewayDisabled": {
                        "description": "Disable the gateway in main region? This is only supported when additional_location is set.",
                        "type": "boolean"
                      },
                      "gatewayRegionalUrl": {
                        "description": "The Region URL for the Gateway of the API Management Service.",
                        "type": "string"
                      },
                      "gatewayUrl": {
                        "description": "The URL of the Gateway for the API Management Service.",
                        "type": "string"
                      },
                      "hostnameConfiguration": {
                        "description": "A hostname_configuration block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "developerPortal": {
                              "description": "One or more developer_portal blocks as documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "certificateSource": {
                                    "description": "The source of the certificate.",
                                    "type": "string"
                                  },
                                  "certificateStatus": {
                                    "description": "The status of the certificate.",
                                    "type": "string"
                                  },
                                  "expiry": {
                                    "description": "The expiration date of the certificate in RFC3339 format: 2000-01-02T03:04:05Z.",
                                    "type": "string"
                                  },
                                  "hostName": {
                                    "description": "The Hostname to use for the Management API.",
                                    "type": "string"
                                  },
                                  "keyVaultId": {
                                    "description": "The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type application/x-pkcs12.",
                                    "type": "string"
                                  },
                                  "negotiateClientCertificate": {
                                    "description": "Should Client Certificate Negotiation be enabled for this Hostname? Defaults to false.",
                                    "type": "boolean"
                                  },
                                  "sslKeyvaultIdentityClientId": {
                                    "description": "System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing the SSL certificate.",
                                    "type": "string"
                                  },
                                  "subject": {
                                    "description": "The subject of the certificate.",
                                    "type": "string"
                                  },
                                  "thumbprint": {
                                    "description": "The thumbprint of the certificate.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "management": {
                              "description": "One or more management blocks as documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "certificateSource": {
                                    "description": "The source of the certificate.",
                                    "type": "string"
                                  },
                                  "certificateStatus": {
                                    "description": "The status of the certificate.",
                                    "type": "string"
                                  },
                                  "expiry": {
                                    "description": "The expiration date of the certificate in RFC3339 format: 2000-01-02T03:04:05Z.",
                                    "type": "string"
                                  },
                                  "hostName": {
                                    "description": "The Hostname to use for the Management API.",
                                    "type": "string"
                                  },
                                  "keyVaultId": {
                                    "description": "The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type application/x-pkcs12.",
                                    "type": "string"
                                  },
                                  "negotiateClientCertificate": {
                                    "description": "Should Client Certificate Negotiation be enabled for this Hostname? Defaults to false.",
                                    "type": "boolean"
                                  },
                                  "sslKeyvaultIdentityClientId": {
                                    "description": "System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing the SSL certificate.",
                                    "type": "string"
                                  },
                                  "subject": {
                                    "description": "The subject of the certificate.",
                                    "type": "string"
                                  },
                                  "thumbprint": {
                                    "description": "The thumbprint of the certificate.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "portal": {
                              "description": "One or more portal blocks as documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "certificateSource": {
                                    "description": "The source of the certificate.",
                                    "type": "string"
                                  },
                                  "certificateStatus": {
                                    "description": "The status of the certificate.",
                                    "type": "string"
                                  },
                                  "expiry": {
                                    "description": "The expiration date of the certificate in RFC3339 format: 2000-01-02T03:04:05Z.",
                                    "type": "string"
                                  },
                                  "hostName": {
                                    "description": "The Hostname to use for the Management API.",
                                    "type": "string"
                                  },
                                  "keyVaultId": {
                                    "description": "The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type application/x-pkcs12.",
                                    "type": "string"
                                  },
                                  "negotiateClientCertificate": {
                                    "description": "Should Client Certificate Negotiation be enabled for this Hostname? Defaults to false.",
                                    "type": "boolean"
                                  },
                                  "sslKeyvaultIdentityClientId": {
                                    "description": "System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing the SSL certificate.",
                                    "type": "string"
                                  },
                                  "subject": {
                                    "description": "The subject of the certificate.",
                                    "type": "string"
                                  },
                                  "thumbprint": {
                                    "description": "The thumbprint of the certificate.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "proxy": {
                              "description": "One or more proxy blocks as documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "certificateSource": {
                                    "description": "The source of the certificate.",
                                    "type": "string"
                                  },
                                  "certificateStatus": {
                                    "description": "The status of the certificate.",
                                    "type": "string"
                                  },
                                  "defaultSslBinding": {
                                    "description": "Is the certificate associated with this Hostname the Default SSL Certificate? This is used when an SNI header isn't specified by a client. Defaults to false.",
                                    "type": "boolean"
                                  },
                                  "expiry": {
                                    "description": "The expiration date of the certificate in RFC3339 format: 2000-01-02T03:04:05Z.",
                                    "type": "string"
                                  },
                                  "hostName": {
                                    "description": "The Hostname to use for the Management API.",
                                    "type": "string"
                                  },
                                  "keyVaultId": {
                                    "description": "The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type application/x-pkcs12.",
                                    "type": "string"
                                  },
                                  "negotiateClientCertificate": {
                                    "description": "Should Client Certificate Negotiation be enabled for this Hostname? Defaults to false.",
                                    "type": "boolean"
                                  },
                                  "sslKeyvaultIdentityClientId": {
                                    "description": "System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing the SSL certificate.",
                                    "type": "string"
                                  },
                                  "subject": {
                                    "description": "The subject of the certificate.",
                                    "type": "string"
                                  },
                                  "thumbprint": {
                                    "description": "The thumbprint of the certificate.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "scm": {
                              "description": "One or more scm blocks as documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "certificateSource": {
                                    "description": "The source of the certificate.",
                                    "type": "string"
                                  },
                                  "certificateStatus": {
                                    "description": "The status of the certificate.",
                                    "type": "string"
                                  },
                                  "expiry": {
                                    "description": "The expiration date of the certificate in RFC3339 format: 2000-01-02T03:04:05Z.",
                                    "type": "string"
                                  },
                                  "hostName": {
                                    "description": "The Hostname to use for the Management API.",
                                    "type": "string"
                                  },
                                  "keyVaultId": {
                                    "description": "The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type application/x-pkcs12.",
                                    "type": "string"
                                  },
                                  "negotiateClientCertificate": {
                                    "description": "Should Client Certificate Negotiation be enabled for this Hostname? Defaults to false.",
                                    "type": "boolean"
                                  },
                                  "sslKeyvaultIdentityClientId": {
                                    "description": "System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing the SSL certificate.",
                                    "type": "string"
                                  },
                                  "subject": {
                                    "description": "The subject of the certificate.",
                                    "type": "string"
                                  },
                                  "thumbprint": {
                                    "description": "The thumbprint of the certificate.",
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "id": {
                        "description": "The ID of the API Management Service.",
                        "type": "string"
                      },
                      "identity": {
                        "description": "An identity block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "identityIds": {
                              "description": "A list of User Assigned Managed Identity IDs to be assigned to this API Management Service.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "principalId": {
                              "description": "The Principal ID associated with this Managed Service Identity.",
                              "type": "string"
                            },
                            "tenantId": {
                              "description": "The Tenant ID associated with this Managed Service Identity.",
                              "type": "string"
                            },
                            "type": {
                              "description": "Specifies the type of Managed Service Identity that should be configured on this API Management Service. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "location": {
                        "description": "The Azure location where the API Management Service exists. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "managementApiUrl": {
                        "description": "The URL for the Management API associated with this API Management service.",
                        "type": "string"
                      },
                      "minApiVersion": {
                        "description": "The version which the control plane API calls to API Management service are limited with version equal to or newer than.",
                        "type": "string"
                      },
                      "notificationSenderEmail": {
                        "description": "Email address from which the notification will be sent.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "A policy block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "xmlContent": {
                              "description": "The XML Content for this Policy.",
                              "type": "string"
                            },
                            "xmlLink": {
                              "description": "A link to an API Management Policy XML Document, which must be publicly available.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "portalUrl": {
                        "description": "The URL for the Publisher Portal associated with this API Management service.",
                        "type": "string"
                      },
                      "privateIpAddresses": {
                        "description": "The Private IP addresses of the API Management Service.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "protocols": {
                        "description": "A protocols block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enableHttp2": {
                              "description": "Should HTTP/2 be supported by the API Management Service? Defaults to false.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "publicIpAddressId": {
                        "description": "ID of a standard SKU IPv4 Public IP.",
                        "type": "string"
                      },
                      "publicIpAddresses": {
                        "description": "The Public IP addresses of the API Management Service.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "publicNetworkAccessEnabled": {
                        "description": "Is public access to the service allowed?. Defaults to true",
                        "type": "boolean"
                      },
                      "publisherEmail": {
                        "description": "The email of publisher/company.",
                        "type": "string"
                      },
                      "publisherName": {
                        "description": "The name of publisher/company.",
                        "type": "string"
                      },
                      "resourceGroupName": {
                        "description": "The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "scmUrl": {
                        "description": "The URL for the SCM (Source Code Management) Endpoint associated with this API Management service.",
                        "type": "string"
                      },
                      "security": {
                        "description": "A security block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enableBackendSsl30": {
                              "description": "Should SSL 3.0 be enabled on the backend of the gateway? Defaults to false.",
                              "type": "boolean"
                            },
                            "enableBackendTls10": {
                              "description": "Should TLS 1.0 be enabled on the backend of the gateway? Defaults to false.",
                              "type": "boolean"
                            },
                            "enableBackendTls11": {
                              "description": "Should TLS 1.1 be enabled on the backend of the gateway? Defaults to false.",
                              "type": "boolean"
                            },
                            "enableFrontendSsl30": {
                              "description": "Should SSL 3.0 be enabled on the frontend of the gateway? Defaults to false.",
                              "type": "boolean"
                            },
                            "enableFrontendTls10": {
                              "description": "Should TLS 1.0 be enabled on the frontend of the gateway? Defaults to false.",
                              "type": "boolean"
                            },
                            "enableFrontendTls11": {
                              "description": "Should TLS 1.1 be enabled on the frontend of the gateway? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsEcdheEcdsaWithAes128CbcShaCiphersEnabled": {
                              "description": "Should the TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsEcdheEcdsaWithAes256CbcShaCiphersEnabled": {
                              "description": "Should the TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsEcdheRsaWithAes128CbcShaCiphersEnabled": {
                              "description": "Should the TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsEcdheRsaWithAes256CbcShaCiphersEnabled": {
                              "description": "Should the TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsRsaWithAes128CbcSha256CiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_AES_128_CBC_SHA256 cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsRsaWithAes128CbcShaCiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_AES_128_CBC_SHA cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsRsaWithAes128GcmSha256CiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_AES_128_GCM_SHA256 cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsRsaWithAes256CbcSha256CiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_AES_256_CBC_SHA256 cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsRsaWithAes256CbcShaCiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_AES_256_CBC_SHA cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tlsRsaWithAes256GcmSha384CiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_AES_256_GCM_SHA384 cipher be enabled? Defaults to false.",
                              "type": "boolean"
                            },
                            "tripleDesCiphersEnabled": {
                              "description": "Should the TLS_RSA_WITH_3DES_EDE_CBC_SHA cipher be enabled for alL TLS versions (1.0, 1.1 and 1.2)?",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "signIn": {
                        "description": "A sign_in block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "description": "Should anonymous users be redirected to the sign in page?",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "signUp": {
                        "description": "A sign_up block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "description": "Can users sign up on the development portal?",
                              "type": "boolean"
                            },
                            "termsOfService": {
                              "description": "A terms_of_service block as defined below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "consentRequired": {
                                    "description": "Should the user be asked for consent during sign up?",
                                    "type": "boolean"
                                  },
                                  "enabled": {
                                    "description": "Should Terms of Service be displayed during sign up?.",
                                    "type": "boolean"
                                  },
                                  "text": {
                                    "description": "The Terms of Service which users are required to agree to in order to sign up.",
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "skuName": {
                        "description": "sku_name is a string consisting of two parts separated by an underscore(_). The first part is the name, valid values include: Consumption, Developer, Basic, Standard and Premium. The second part is the capacity (e.g. the number of deployed units of the sku), which must be a positive integer (e.g. Developer_1).",
                        "type": "string"
                      },
                      "tags": {
                        "description": "A mapping of tags assigned to the resource.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "tenantAccess": {
                        "description": "A tenant_access block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "description": "Should the access to the management API be enabled?",
                              "type": "boolean"
                            },
                            "tenantId": {
                              "description": "The identifier for the tenant access information contract.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "virtualNetworkConfiguration": {
                        "description": "A virtual_network_configuration block as defined below. Required when virtual_network_type is External or Internal.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "subnetId": {
                              "description": "The id of the subnet that will be used for the API Management.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "virtualNetworkType": {
                        "description": "The type of virtual network you want to use, valid values include: None, External, Internal.",
                        "type": "string"
                      },
                      "zones": {
                        "description": "Specifies a list of Availability Zones in which this API Management service should be located. Changing this forces a new API Management service to be created.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "conditions": {
                    "description": "Conditions of the resource.",
                    "type": "array",
                    "items": {
                      "description": "A Condition that may apply to a resource.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "A Reason for this condition's last transition from one status to another.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of this condition; is it currently True, False, or Unknown?",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "READY",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
          },
          {
            "name": "SYNCED",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Synced')].status"
          },
          {
            "name": "EXTERNAL-NAME",
            "type": "string",
            "jsonPath": ".metadata.annotations.crossplane\\.io/external-name"
          },
          {
            "name": "AGE",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}