{
  "$schema": "http://json-schema.org/schema#",
  "description": "API is the Schema for the APIs API. Manages an API within an API Management Service.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "apimanagement.azure.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "API"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "APISpec defines the desired state of API",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "apiManagementName": {
              "description": "The Name of the API Management Service where this API should be created. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "apiManagementNameRef": {
              "description": "Reference to a Management in apimanagement to populate apiManagementName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "apiManagementNameSelector": {
              "description": "Selector for a Management in apimanagement to populate apiManagementName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "apiType": {
              "description": "Type of API. Possible values are graphql, http, soap, and websocket. Defaults to http.",
              "type": "string"
            },
            "contact": {
              "description": "A contact block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "email": {
                    "description": "The email address of the contact person/organization.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the contact person/organization.",
                    "type": "string"
                  },
                  "url": {
                    "description": "Absolute URL of the contact information.",
                    "type": "string"
                  }
                }
              }
            },
            "description": {
              "description": "A description of the API Management API, which may include HTML formatting tags.",
              "type": "string"
            },
            "displayName": {
              "description": "The display name of the API.",
              "type": "string"
            },
            "import": {
              "description": "A import block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "contentFormat": {
                    "description": "The format of the content from which the API Definition should be imported. Possible values are: openapi, openapi+json, openapi+json-link, openapi-link, swagger-json, swagger-link-json, wadl-link-json, wadl-xml, wsdl and wsdl-link.",
                    "type": "string"
                  },
                  "contentValue": {
                    "description": "The Content from which the API Definition should be imported. When a content_format of *-link-* is specified this must be a URL, otherwise this must be defined inline.",
                    "type": "string"
                  },
                  "wsdlSelector": {
                    "description": "A wsdl_selector block as defined below, which allows you to limit the import of a WSDL to only a subset of the document. This can only be specified when content_format is wsdl or wsdl-link.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "endpointName": {
                          "description": "The name of endpoint (port) to import from WSDL.",
                          "type": "string"
                        },
                        "serviceName": {
                          "description": "The name of service to import from WSDL.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "license": {
              "description": "A license block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the license .",
                    "type": "string"
                  },
                  "url": {
                    "description": "Absolute URL of the license.",
                    "type": "string"
                  }
                }
              }
            },
            "oauth2Authorization": {
              "description": "An oauth2_authorization block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "authorizationServerName": {
                    "description": "OAuth authorization server identifier. The name of an OAuth2 Authorization Server.",
                    "type": "string"
                  },
                  "scope": {
                    "description": "Operations scope.",
                    "type": "string"
                  }
                }
              }
            },
            "openidAuthentication": {
              "description": "An openid_authentication block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "bearerTokenSendingMethods": {
                    "description": "How to send token to the server. A list of zero or more methods. Valid values are authorizationHeader and query.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "openidProviderName": {
                    "description": "OpenID Connect provider identifier. The name of an OpenID Connect Provider.",
                    "type": "string"
                  }
                }
              }
            },
            "path": {
              "description": "The Path for this API Management API, which is a relative URL which uniquely identifies this API and all of its resource paths within the API Management Service.",
              "type": "string"
            },
            "protocols": {
              "description": "A list of protocols the operations in this API can be invoked. Possible values are http, https, ws, and wss.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "resourceGroupName": {
              "description": "The Name of the Resource Group where the API Management API exists. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "revision": {
              "description": "The Revision which used for this API. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "revisionDescription": {
              "description": "The description of the API Revision of the API Management API.",
              "type": "string"
            },
            "serviceUrl": {
              "description": "Absolute URL of the backend service implementing this API.",
              "type": "string"
            },
            "soapPassThrough": {
              "description": "Should this API expose a SOAP frontend, rather than a HTTP frontend? Defaults to false.",
              "type": "boolean"
            },
            "sourceApiId": {
              "description": "The API id of the source API, which could be in format azurerm_api_management_api.example.id or in format azurerm_api_management_api.example.id;rev=1",
              "type": "string"
            },
            "subscriptionKeyParameterNames": {
              "description": "A subscription_key_parameter_names block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "header": {
                    "description": "The name of the HTTP Header which should be used for the Subscription Key.",
                    "type": "string"
                  },
                  "query": {
                    "description": "The name of the QueryString parameter which should be used for the Subscription Key.",
                    "type": "string"
                  }
                }
              }
            },
            "subscriptionRequired": {
              "description": "Should this API require a subscription key? Defaults to true.",
              "type": "boolean"
            },
            "termsOfServiceUrl": {
              "description": "Absolute URL of the Terms of Service for the API.",
              "type": "string"
            },
            "version": {
              "description": "The Version number of this API, if this API is versioned.",
              "type": "string"
            },
            "versionDescription": {
              "description": "The description of the API Version of the API Management API.",
              "type": "string"
            },
            "versionSetId": {
              "description": "The ID of the Version Set which this API is associated with.",
              "type": "string"
            }
          }
        },
        "initProvider": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "apiType": {
              "description": "Type of API. Possible values are graphql, http, soap, and websocket. Defaults to http.",
              "type": "string"
            },
            "contact": {
              "description": "A contact block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "email": {
                    "description": "The email address of the contact person/organization.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the contact person/organization.",
                    "type": "string"
                  },
                  "url": {
                    "description": "Absolute URL of the contact information.",
                    "type": "string"
                  }
                }
              }
            },
            "description": {
              "description": "A description of the API Management API, which may include HTML formatting tags.",
              "type": "string"
            },
            "displayName": {
              "description": "The display name of the API.",
              "type": "string"
            },
            "import": {
              "description": "A import block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "contentFormat": {
                    "description": "The format of the content from which the API Definition should be imported. Possible values are: openapi, openapi+json, openapi+json-link, openapi-link, swagger-json, swagger-link-json, wadl-link-json, wadl-xml, wsdl and wsdl-link.",
                    "type": "string"
                  },
                  "contentValue": {
                    "description": "The Content from which the API Definition should be imported. When a content_format of *-link-* is specified this must be a URL, otherwise this must be defined inline.",
                    "type": "string"
                  },
                  "wsdlSelector": {
                    "description": "A wsdl_selector block as defined below, which allows you to limit the import of a WSDL to only a subset of the document. This can only be specified when content_format is wsdl or wsdl-link.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "endpointName": {
                          "description": "The name of endpoint (port) to import from WSDL.",
                          "type": "string"
                        },
                        "serviceName": {
                          "description": "The name of service to import from WSDL.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "license": {
              "description": "A license block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the license .",
                    "type": "string"
                  },
                  "url": {
                    "description": "Absolute URL of the license.",
                    "type": "string"
                  }
                }
              }
            },
            "oauth2Authorization": {
              "description": "An oauth2_authorization block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "authorizationServerName": {
                    "description": "OAuth authorization server identifier. The name of an OAuth2 Authorization Server.",
                    "type": "string"
                  },
                  "scope": {
                    "description": "Operations scope.",
                    "type": "string"
                  }
                }
              }
            },
            "openidAuthentication": {
              "description": "An openid_authentication block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "bearerTokenSendingMethods": {
                    "description": "How to send token to the server. A list of zero or more methods. Valid values are authorizationHeader and query.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "openidProviderName": {
                    "description": "OpenID Connect provider identifier. The name of an OpenID Connect Provider.",
                    "type": "string"
                  }
                }
              }
            },
            "path": {
              "description": "The Path for this API Management API, which is a relative URL which uniquely identifies this API and all of its resource paths within the API Management Service.",
              "type": "string"
            },
            "protocols": {
              "description": "A list of protocols the operations in this API can be invoked. Possible values are http, https, ws, and wss.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "revision": {
              "description": "The Revision which used for this API. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "revisionDescription": {
              "description": "The description of the API Revision of the API Management API.",
              "type": "string"
            },
            "serviceUrl": {
              "description": "Absolute URL of the backend service implementing this API.",
              "type": "string"
            },
            "soapPassThrough": {
              "description": "Should this API expose a SOAP frontend, rather than a HTTP frontend? Defaults to false.",
              "type": "boolean"
            },
            "sourceApiId": {
              "description": "The API id of the source API, which could be in format azurerm_api_management_api.example.id or in format azurerm_api_management_api.example.id;rev=1",
              "type": "string"
            },
            "subscriptionKeyParameterNames": {
              "description": "A subscription_key_parameter_names block as documented below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "header": {
                    "description": "The name of the HTTP Header which should be used for the Subscription Key.",
                    "type": "string"
                  },
                  "query": {
                    "description": "The name of the QueryString parameter which should be used for the Subscription Key.",
                    "type": "string"
                  }
                }
              }
            },
            "subscriptionRequired": {
              "description": "Should this API require a subscription key? Defaults to true.",
              "type": "boolean"
            },
            "termsOfServiceUrl": {
              "description": "Absolute URL of the Terms of Service for the API.",
              "type": "string"
            },
            "version": {
              "description": "The Version number of this API, if this API is versioned.",
              "type": "string"
            },
            "versionDescription": {
              "description": "The description of the API Version of the API Management API.",
              "type": "string"
            },
            "versionSetId": {
              "description": "The ID of the Version Set which this API is associated with.",
              "type": "string"
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.revision) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.revision))",
          "message": "spec.forProvider.revision is a required parameter"
        }
      ]
    }
  }
}