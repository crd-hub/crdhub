{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "clusters.docdb.aws.upbound.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.13.0"
    }
  },
  "spec": {
    "group": "docdb.aws.upbound.io",
    "names": {
      "plural": "clusters",
      "singular": "cluster",
      "kind": "Cluster",
      "listKind": "ClusterList",
      "categories": [
        "crossplane",
        "managed",
        "aws"
      ]
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "Cluster is the Schema for the Clusters API. Manages a DocumentDB Aurora Cluster",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "ClusterSpec defines the desired state of Cluster",
                "type": "object",
                "required": [
                  "forProvider"
                ],
                "properties": {
                  "deletionPolicy": {
                    "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
                    "type": "string",
                    "default": "Delete",
                    "enum": [
                      "Orphan",
                      "Delete"
                    ]
                  },
                  "forProvider": {
                    "type": "object",
                    "required": [
                      "region"
                    ],
                    "properties": {
                      "applyImmediately": {
                        "description": "Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is false.",
                        "type": "boolean"
                      },
                      "availabilityZones": {
                        "description": "A list of EC2 Availability Zones that instances in the DB cluster can be created in.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "backupRetentionPeriod": {
                        "description": "The days to retain backups for. Default 1",
                        "type": "number"
                      },
                      "dbClusterParameterGroupName": {
                        "description": "A cluster parameter group to associate with the cluster.",
                        "type": "string"
                      },
                      "dbSubnetGroupName": {
                        "description": "A DB subnet group to associate with this DB instance.",
                        "type": "string"
                      },
                      "deletionProtection": {
                        "description": "A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.",
                        "type": "boolean"
                      },
                      "enabledCloudwatchLogsExports": {
                        "description": "List of log types to export to cloudwatch. If omitted, no logs will be exported. The following log types are supported: audit, profiler.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "engine": {
                        "description": "The name of the database engine to be used for this DB cluster. Defaults to docdb. Valid Values: docdb",
                        "type": "string"
                      },
                      "engineVersion": {
                        "description": "The database engine version. Updating this argument results in an outage.",
                        "type": "string"
                      },
                      "finalSnapshotIdentifier": {
                        "description": "The name of your final DB snapshot when this DB cluster is deleted. If omitted, no final snapshot will be made.",
                        "type": "string"
                      },
                      "globalClusterIdentifier": {
                        "description": "The global cluster identifier specified on aws_docdb_global_cluster.",
                        "type": "string"
                      },
                      "kmsKeyId": {
                        "description": "The ARN for the KMS encryption key. When specifying kms_key_id, storage_encrypted needs to be set to true.",
                        "type": "string"
                      },
                      "kmsKeyIdRef": {
                        "description": "Reference to a Key in kms to populate kmsKeyId.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "kmsKeyIdSelector": {
                        "description": "Selector for a Key in kms to populate kmsKeyId.",
                        "type": "object",
                        "properties": {
                          "matchControllerRef": {
                            "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                            "type": "boolean"
                          },
                          "matchLabels": {
                            "description": "MatchLabels ensures an object with matching labels is selected.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "policy": {
                            "description": "Policies for selection.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "masterPasswordSecretRef": {
                        "description": "Password for the master DB user. Note that this may show up in logs, and it will be stored in the state file. Please refer to the DocumentDB Naming Constraints.",
                        "type": "object",
                        "required": [
                          "key",
                          "name",
                          "namespace"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key to select.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the secret.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace of the secret.",
                            "type": "string"
                          }
                        }
                      },
                      "masterUsername": {
                        "description": "Username for the master DB user.",
                        "type": "string"
                      },
                      "port": {
                        "description": "The port on which the DB accepts connections",
                        "type": "number"
                      },
                      "preferredBackupWindow": {
                        "description": "The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00",
                        "type": "string"
                      },
                      "preferredMaintenanceWindow": {
                        "description": "The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30",
                        "type": "string"
                      },
                      "region": {
                        "description": "Region is the region you'd like your resource to be created in.",
                        "type": "string"
                      },
                      "skipFinalSnapshot": {
                        "description": "Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from final_snapshot_identifier. Default is false.",
                        "type": "boolean"
                      },
                      "snapshotIdentifier": {
                        "description": "Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot.",
                        "type": "string"
                      },
                      "storageEncrypted": {
                        "description": "Specifies whether the DB cluster is encrypted. The default is false.",
                        "type": "boolean"
                      },
                      "tags": {
                        "description": "Key-value map of resource tags.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "vpcSecurityGroupIdRefs": {
                        "description": "References to SecurityGroup in ec2 to populate vpcSecurityGroupIds.",
                        "type": "array",
                        "items": {
                          "description": "A Reference to a named object.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name of the referenced object.",
                              "type": "string"
                            },
                            "policy": {
                              "description": "Policies for referencing.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      },
                      "vpcSecurityGroupIdSelector": {
                        "description": "Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.",
                        "type": "object",
                        "properties": {
                          "matchControllerRef": {
                            "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                            "type": "boolean"
                          },
                          "matchLabels": {
                            "description": "MatchLabels ensures an object with matching labels is selected.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "policy": {
                            "description": "Policies for selection.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "vpcSecurityGroupIds": {
                        "description": "List of VPC security groups to associate with the Cluster",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "initProvider": {
                    "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
                    "type": "object",
                    "properties": {
                      "applyImmediately": {
                        "description": "Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is false.",
                        "type": "boolean"
                      },
                      "availabilityZones": {
                        "description": "A list of EC2 Availability Zones that instances in the DB cluster can be created in.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "backupRetentionPeriod": {
                        "description": "The days to retain backups for. Default 1",
                        "type": "number"
                      },
                      "dbClusterParameterGroupName": {
                        "description": "A cluster parameter group to associate with the cluster.",
                        "type": "string"
                      },
                      "dbSubnetGroupName": {
                        "description": "A DB subnet group to associate with this DB instance.",
                        "type": "string"
                      },
                      "deletionProtection": {
                        "description": "A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.",
                        "type": "boolean"
                      },
                      "enabledCloudwatchLogsExports": {
                        "description": "List of log types to export to cloudwatch. If omitted, no logs will be exported. The following log types are supported: audit, profiler.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "engine": {
                        "description": "The name of the database engine to be used for this DB cluster. Defaults to docdb. Valid Values: docdb",
                        "type": "string"
                      },
                      "engineVersion": {
                        "description": "The database engine version. Updating this argument results in an outage.",
                        "type": "string"
                      },
                      "finalSnapshotIdentifier": {
                        "description": "The name of your final DB snapshot when this DB cluster is deleted. If omitted, no final snapshot will be made.",
                        "type": "string"
                      },
                      "globalClusterIdentifier": {
                        "description": "The global cluster identifier specified on aws_docdb_global_cluster.",
                        "type": "string"
                      },
                      "masterUsername": {
                        "description": "Username for the master DB user.",
                        "type": "string"
                      },
                      "port": {
                        "description": "The port on which the DB accepts connections",
                        "type": "number"
                      },
                      "preferredBackupWindow": {
                        "description": "The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00",
                        "type": "string"
                      },
                      "preferredMaintenanceWindow": {
                        "description": "The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30",
                        "type": "string"
                      },
                      "skipFinalSnapshot": {
                        "description": "Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from final_snapshot_identifier. Default is false.",
                        "type": "boolean"
                      },
                      "snapshotIdentifier": {
                        "description": "Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot.",
                        "type": "string"
                      },
                      "storageEncrypted": {
                        "description": "Specifies whether the DB cluster is encrypted. The default is false.",
                        "type": "boolean"
                      },
                      "tags": {
                        "description": "Key-value map of resource tags.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "managementPolicies": {
                    "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
                    "type": "array",
                    "default": [
                      "*"
                    ],
                    "items": {
                      "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
                      "type": "string",
                      "enum": [
                        "Observe",
                        "Create",
                        "Update",
                        "Delete",
                        "LateInitialize",
                        "*"
                      ]
                    }
                  },
                  "providerConfigRef": {
                    "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
                    "type": "object",
                    "default": {
                      "name": "default"
                    },
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "publishConnectionDetailsTo": {
                    "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "configRef": {
                        "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
                        "type": "object",
                        "default": {
                          "name": "default"
                        },
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "Metadata is the metadata for connection secret.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "type": {
                            "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name of the connection secret.",
                        "type": "string"
                      }
                    }
                  },
                  "writeConnectionSecretToRef": {
                    "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
                    "type": "object",
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "status": {
                "description": "ClusterStatus defines the observed state of Cluster.",
                "type": "object",
                "properties": {
                  "atProvider": {
                    "type": "object",
                    "properties": {
                      "applyImmediately": {
                        "description": "Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is false.",
                        "type": "boolean"
                      },
                      "arn": {
                        "description": "Amazon Resource Name (ARN) of cluster",
                        "type": "string"
                      },
                      "availabilityZones": {
                        "description": "A list of EC2 Availability Zones that instances in the DB cluster can be created in.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "backupRetentionPeriod": {
                        "description": "The days to retain backups for. Default 1",
                        "type": "number"
                      },
                      "clusterMembers": {
                        "description": "– List of DocumentDB Instances that are a part of this cluster",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "clusterResourceId": {
                        "description": "The DocumentDB Cluster Resource ID",
                        "type": "string"
                      },
                      "dbClusterParameterGroupName": {
                        "description": "A cluster parameter group to associate with the cluster.",
                        "type": "string"
                      },
                      "dbSubnetGroupName": {
                        "description": "A DB subnet group to associate with this DB instance.",
                        "type": "string"
                      },
                      "deletionProtection": {
                        "description": "A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.",
                        "type": "boolean"
                      },
                      "enabledCloudwatchLogsExports": {
                        "description": "List of log types to export to cloudwatch. If omitted, no logs will be exported. The following log types are supported: audit, profiler.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "endpoint": {
                        "description": "The DNS address of the DocumentDB instance",
                        "type": "string"
                      },
                      "engine": {
                        "description": "The name of the database engine to be used for this DB cluster. Defaults to docdb. Valid Values: docdb",
                        "type": "string"
                      },
                      "engineVersion": {
                        "description": "The database engine version. Updating this argument results in an outage.",
                        "type": "string"
                      },
                      "finalSnapshotIdentifier": {
                        "description": "The name of your final DB snapshot when this DB cluster is deleted. If omitted, no final snapshot will be made.",
                        "type": "string"
                      },
                      "globalClusterIdentifier": {
                        "description": "The global cluster identifier specified on aws_docdb_global_cluster.",
                        "type": "string"
                      },
                      "hostedZoneId": {
                        "description": "The Route53 Hosted Zone ID of the endpoint",
                        "type": "string"
                      },
                      "id": {
                        "description": "The DocumentDB Cluster Identifier",
                        "type": "string"
                      },
                      "kmsKeyId": {
                        "description": "The ARN for the KMS encryption key. When specifying kms_key_id, storage_encrypted needs to be set to true.",
                        "type": "string"
                      },
                      "masterUsername": {
                        "description": "Username for the master DB user.",
                        "type": "string"
                      },
                      "port": {
                        "description": "The port on which the DB accepts connections",
                        "type": "number"
                      },
                      "preferredBackupWindow": {
                        "description": "The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00",
                        "type": "string"
                      },
                      "preferredMaintenanceWindow": {
                        "description": "The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30",
                        "type": "string"
                      },
                      "readerEndpoint": {
                        "description": "A read-only endpoint for the DocumentDB cluster, automatically load-balanced across replicas",
                        "type": "string"
                      },
                      "skipFinalSnapshot": {
                        "description": "Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from final_snapshot_identifier. Default is false.",
                        "type": "boolean"
                      },
                      "snapshotIdentifier": {
                        "description": "Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot.",
                        "type": "string"
                      },
                      "storageEncrypted": {
                        "description": "Specifies whether the DB cluster is encrypted. The default is false.",
                        "type": "boolean"
                      },
                      "tags": {
                        "description": "Key-value map of resource tags.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "tagsAll": {
                        "description": "A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "vpcSecurityGroupIds": {
                        "description": "List of VPC security groups to associate with the Cluster",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "conditions": {
                    "description": "Conditions of the resource.",
                    "type": "array",
                    "items": {
                      "description": "A Condition that may apply to a resource.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "A Reason for this condition's last transition from one status to another.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of this condition; is it currently True, False, or Unknown?",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-list-map-keys": [
                      "type"
                    ],
                    "x-kubernetes-list-type": "map"
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "READY",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
          },
          {
            "name": "SYNCED",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Synced')].status"
          },
          {
            "name": "EXTERNAL-NAME",
            "type": "string",
            "jsonPath": ".metadata.annotations.crossplane\\.io/external-name"
          },
          {
            "name": "AGE",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}