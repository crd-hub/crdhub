{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "vaultpolicybindings.policy.kubevault.com",
    "creationTimestamp": null,
    "labels": {
      "app.kubernetes.io/name": "kubevault"
    }
  },
  "spec": {
    "group": "policy.kubevault.com",
    "names": {
      "plural": "vaultpolicybindings",
      "singular": "vaultpolicybinding",
      "shortNames": [
        "vpb"
      ],
      "kind": "VaultPolicyBinding",
      "listKind": "VaultPolicyBindingList",
      "categories": [
        "vault",
        "appscode",
        "all"
      ]
    },
    "scope": "Namespaced",
    "versions": [
      {
        "name": "v1alpha1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "links: https://www.vaultproject.io/api/auth/kubernetes/index.html#parameters-1",
                "type": "object",
                "required": [
                  "policies",
                  "subjectRef",
                  "vaultRef"
                ],
                "properties": {
                  "policies": {
                    "description": "Policies is a list of Vault policy identifiers.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name is a Vault server policy name. This name should be returned by `vault read sys/policy` command.\nMore info: https://www.vaultproject.io/docs/concepts/policies.html#listing-policies",
                          "type": "string"
                        },
                        "ref": {
                          "description": "Ref is name of a VaultPolicy crd object. Actual vault policy name is spec.vaultRoleName field.\nMore info: https://www.vaultproject.io/docs/concepts/policies.html#listing-policies",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "subjectRef": {
                    "description": "SubjectRef refers to Vault users who will be granted policies.",
                    "type": "object",
                    "properties": {
                      "appRole": {
                        "description": "More info: https://www.vaultproject.io/docs/auth/approle#configuration",
                        "type": "object",
                        "required": [
                          "bindSecretID"
                        ],
                        "properties": {
                          "bindSecretID": {
                            "description": "Require secret_id to be presented when logging in using this AppRole.",
                            "type": "boolean"
                          },
                          "enableLocalSecretIds": {
                            "description": "If set, the secret IDs generated using this role will be cluster local. This can only be set during role creation and once set, it can't be reset later.",
                            "type": "boolean"
                          },
                          "path": {
                            "description": "Specifies the path where approle auth is enabled\ndefault : approle",
                            "type": "string"
                          },
                          "roleName": {
                            "description": "RoleName is the Name of the AppRole\nThis defaults to following format: k8s.${cluster}.${metadata.namespace}.${metadata.name}",
                            "type": "string"
                          },
                          "secretIdBoundCidrs": {
                            "description": "List of CIDR blocks; if set, specifies blocks of IP addresses which can perform the login operation.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "secretIdNumUses": {
                            "description": "Number of times any particular SecretID can be used to fetch a token from this AppRole, after which the SecretID will expire. A value of zero will allow unlimited uses.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "secretIdTTL": {
                            "description": "Duration in either an integer number of seconds (3600) or an integer time unit (60m) after which any SecretID expires.",
                            "type": "string"
                          },
                          "tokenBoundCidrs": {
                            "description": "List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "tokenExplicitMaxTTL": {
                            "description": "If set, will encode an explicit max TTL onto the token. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "tokenMaxTTL": {
                            "description": "The maximum lifetime for generated tokens. This current value of this will be referenced at renewal time.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "tokenNoDefaultPolicy": {
                            "description": "If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies.",
                            "type": "boolean"
                          },
                          "tokenNumUses": {
                            "description": "The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "tokenPeriod": {
                            "description": "The period, if any, to set on the token.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "tokenPolicies": {
                            "description": "List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "tokenTTL": {
                            "description": "The incremental lifetime for generated tokens. This current value of this will be referenced at renewal time.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "tokenType": {
                            "description": "The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time.",
                            "type": "string"
                          }
                        }
                      },
                      "jwt": {
                        "description": "More info: https://www.vaultproject.io/api-docs/auth/jwt#configure",
                        "type": "object",
                        "required": [
                          "allowedRedirectUris",
                          "path",
                          "userClaim"
                        ],
                        "properties": {
                          "allowedRedirectUris": {
                            "description": "The list of allowed values for redirect_uri during OIDC logins.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "boundAudiences": {
                            "description": "List of aud claims to match against. Any match is sufficient. Required for \"jwt\" roles, optional for \"oidc\" roles.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "boundClaims": {
                            "description": "If set, a map of claims/values to match against. The expected value may be a single string or a list of strings. The interpretation of the bound claim values is configured with bound_claims_type.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "boundClaimsType": {
                            "description": "Configures the interpretation of the bound_claims values. If \"string\" (the default), the values will treated as string literals and must match exactly. If set to \"glob\", the values will be interpreted as globs, with * matching any number of characters.",
                            "type": "string"
                          },
                          "boundSubject": {
                            "description": "If set, requires that the sub claim matches this value.",
                            "type": "string"
                          },
                          "claimMappings": {
                            "description": "If set, a map of claims (keys) to be copied to specified metadata fields (values).",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "groupClaim": {
                            "description": "The claim to use to uniquely identify the set of groups to which the user belongs; this will be used as the names for the Identity group aliases created due to a successful login. The claim value must be a list of strings.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the role.\nThis defaults to following format: k8s.${cluster}.${metadata.namespace}.${metadata.name}",
                            "type": "string"
                          },
                          "oidcScopes": {
                            "description": "If set, a list of OIDC scopes to be used with an OIDC role. The standard scope \"openid\" is automatically included and need not be specified.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "path": {
                            "description": "Specifies the path where jwt/oidc auth is enabled",
                            "type": "string"
                          },
                          "tokenBoundCidrs": {
                            "description": "List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "tokenExplicitMaxTTL": {
                            "description": "If set, will encode an explicit max TTL onto the token. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "tokenMaxTTL": {
                            "description": "The maximum lifetime for generated tokens. This current value of this will be referenced at renewal time.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "tokenNoDefaultPolicy": {
                            "description": "If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies.",
                            "type": "boolean"
                          },
                          "tokenNumUses": {
                            "description": "The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "tokenPeriod": {
                            "description": "The period, if any, to set on the token.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "tokenPolicies": {
                            "description": "List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "tokenTTL": {
                            "description": "The incremental lifetime for generated tokens. This current value of this will be referenced at renewal time.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "tokenType": {
                            "description": "The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time.",
                            "type": "string"
                          },
                          "userClaim": {
                            "description": "The claim to use to uniquely identify the user; this will be used as the name for the Identity entity alias created due to a successful login. The claim value must be a string.",
                            "type": "string"
                          },
                          "verboseOidcLogging": {
                            "type": "boolean"
                          }
                        }
                      },
                      "kubernetes": {
                        "description": "Kubernetes refers to Vault users who are authenticated via Kubernetes auth method\nMore info: https://www.vaultproject.io/docs/auth/kubernetes.html#configuration",
                        "type": "object",
                        "required": [
                          "serviceAccountNames",
                          "serviceAccountNamespaces"
                        ],
                        "properties": {
                          "audience": {
                            "description": "Optional Audience claim to verify in the JWT.",
                            "type": "string"
                          },
                          "maxTTL": {
                            "description": "Specifies the maximum allowed lifetime of tokens issued in seconds using this role.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the role",
                            "type": "string"
                          },
                          "path": {
                            "description": "Specifies the path where kubernetes auth is enabled\ndefault : kubernetes",
                            "type": "string"
                          },
                          "period": {
                            "description": "If set, indicates that the token generated using this role should never expire.\nThe token should be renewed within the duration specified by this value.\nAt each renewal, the token's TTL will be set to the value of this parameter.",
                            "type": "string"
                          },
                          "serviceAccountNames": {
                            "description": "Specifies the names of the service account to bind with policy",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "serviceAccountNamespaces": {
                            "description": "Specifies the namespaces of the service account",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "ttl": {
                            "description": "Specifies the TTL period of tokens issued using this role in seconds.",
                            "type": "string"
                          }
                        }
                      },
                      "ldapGroup": {
                        "description": "More info: https://www.vaultproject.io/api-docs/auth/ldap#configure-ldap",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "The name of the LDAP group",
                            "type": "string"
                          },
                          "path": {
                            "description": "Specifies the path where ldap groups auth is enabled\ndefault : ldap/groups",
                            "type": "string"
                          },
                          "policies": {
                            "description": "List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "ldapUser": {
                        "description": "More info: https://www.vaultproject.io/api-docs/auth/ldap#create-update-ldap-user",
                        "type": "object",
                        "required": [
                          "username"
                        ],
                        "properties": {
                          "groups": {
                            "description": "List of groups associated to the user.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "path": {
                            "description": "Specifies the path where ldap groups auth is enabled\ndefault : ldap/users",
                            "type": "string"
                          },
                          "policies": {
                            "description": "List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "username": {
                            "description": "The username of the LDAP user",
                            "type": "string"
                          }
                        }
                      },
                      "oidc": {
                        "description": "More info: https://www.vaultproject.io/api-docs/auth/jwt#create-role",
                        "type": "object",
                        "required": [
                          "allowedRedirectUris",
                          "path",
                          "userClaim"
                        ],
                        "properties": {
                          "allowedRedirectUris": {
                            "description": "The list of allowed values for redirect_uri during OIDC logins.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "boundAudiences": {
                            "description": "List of aud claims to match against. Any match is sufficient. Required for \"jwt\" roles, optional for \"oidc\" roles.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "boundClaims": {
                            "description": "If set, a map of claims/values to match against. The expected value may be a single string or a list of strings. The interpretation of the bound claim values is configured with bound_claims_type.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "boundClaimsType": {
                            "description": "Configures the interpretation of the bound_claims values. If \"string\" (the default), the values will treated as string literals and must match exactly. If set to \"glob\", the values will be interpreted as globs, with * matching any number of characters.",
                            "type": "string"
                          },
                          "boundSubject": {
                            "description": "If set, requires that the sub claim matches this value.",
                            "type": "string"
                          },
                          "claimMappings": {
                            "description": "If set, a map of claims (keys) to be copied to specified metadata fields (values).",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "groupClaim": {
                            "description": "The claim to use to uniquely identify the set of groups to which the user belongs; this will be used as the names for the Identity group aliases created due to a successful login. The claim value must be a list of strings.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the role.\nThis defaults to following format: k8s.${cluster}.${metadata.namespace}.${metadata.name}",
                            "type": "string"
                          },
                          "oidcScopes": {
                            "description": "If set, a list of OIDC scopes to be used with an OIDC role. The standard scope \"openid\" is automatically included and need not be specified.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "path": {
                            "description": "Specifies the path where jwt/oidc auth is enabled",
                            "type": "string"
                          },
                          "tokenBoundCidrs": {
                            "description": "List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "tokenExplicitMaxTTL": {
                            "description": "If set, will encode an explicit max TTL onto the token. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "tokenMaxTTL": {
                            "description": "The maximum lifetime for generated tokens. This current value of this will be referenced at renewal time.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "tokenNoDefaultPolicy": {
                            "description": "If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies.",
                            "type": "boolean"
                          },
                          "tokenNumUses": {
                            "description": "The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "tokenPeriod": {
                            "description": "The period, if any, to set on the token.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "tokenPolicies": {
                            "description": "List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "tokenTTL": {
                            "description": "The incremental lifetime for generated tokens. This current value of this will be referenced at renewal time.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "tokenType": {
                            "description": "The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time.",
                            "type": "string"
                          },
                          "userClaim": {
                            "description": "The claim to use to uniquely identify the user; this will be used as the name for the Identity entity alias created due to a successful login. The claim value must be a string.",
                            "type": "string"
                          },
                          "verboseOidcLogging": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  },
                  "vaultRef": {
                    "description": "VaultRef is the name of a AppBinding referencing to a Vault Server",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string",
                        "default": ""
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "vaultRoleName": {
                    "description": "VaultRoleName is the role name which will be bound of the policies\nThis defaults to following format: k8s.${cluster}.${metadata.namespace}.${metadata.name}\nxref: https://www.vaultproject.io/api/auth/kubernetes/index.html#create-role",
                    "type": "string"
                  }
                }
              },
              "status": {
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "Represents the latest available observations of a VaultPolicyBinding.",
                    "type": "array",
                    "items": {
                      "description": "Condition defines an observation of a object operational state.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "Last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A human-readable message indicating details about the transition.\nThis field may be empty.",
                          "type": "string"
                        },
                        "observedGeneration": {
                          "description": "If set, this represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "reason": {
                          "description": "The reason for the condition's last transition in CamelCase.\nThe specific API may choose whether this field is considered a guaranteed API.\nThis field may not be empty.",
                          "type": "string"
                        },
                        "severity": {
                          "description": "Severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of the condition, one of True, False, Unknown.",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary util\ncan be useful (see .node.status.util), the ability to deconflict is important.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "observedGeneration": {
                    "description": "ObservedGeneration is the most recent generation observed for this resource. It corresponds to the\nresource's generation, which is updated on mutation by the API Server.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "phase": {
                    "description": "Phase indicates whether successfully bind the policy to service account in vault or not or in progress",
                    "type": "string",
                    "enum": [
                      "Success",
                      "Failed"
                    ]
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "Status",
            "type": "string",
            "jsonPath": ".status.phase"
          },
          {
            "name": "Age",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}