{
  "$schema": "http://json-schema.org/schema#",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "engine.kubevault.com/v1alpha1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "AWSRole"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. \n Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "AWSRoleSpec contains connection information, AWS role info, etc\nMore info: https://www.vaultproject.io/api/secret/aws/index.html#parameters-3",
      "type": "object",
      "required": [
        "credentialType",
        "secretEngineRef"
      ],
      "properties": {
        "credentialType": {
          "description": "Specifies the type of credential to be used when retrieving credentials from the role",
          "type": "string",
          "enum": [
            "iam_user",
            "assumed_role",
            "federation_token"
          ]
        },
        "defaultSTSTTL": {
          "description": "The default TTL for STS credentials. When a TTL is not specified when STS credentials are requested,\nand a default TTL is specified on the role, then this default TTL will be used.\nValid only when credential_type is one of assumed_role or federation_token",
          "type": "string"
        },
        "maxSTSTTL": {
          "description": "The max allowed TTL for STS credentials (credentials TTL are capped to max_sts_ttl).\nValid only when credential_type is one of assumed_role or federation_token",
          "type": "string"
        },
        "policy": {
          "description": "Specifies the IAM policy in JSON format.",
          "type": "object",
          "x-kubernetes-preserve-unknown-fields": true,
          "x-kubernetes-embedded-resource": true
        },
        "policyARNs": {
          "description": "Specifies the ARNs of the AWS managed policies to be attached to IAM users when they are requested.\nValid only when credential_type is iam_user. When credential_type is iam_user,\nat least one of policy_arns or policy_document must be specified.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "policyDocument": {
          "description": "The IAM policy document for the role. The behavior depends on the credential type.\nWith iam_user, the policy document will be attached to the IAM user generated and\naugment the permissions the IAM user has. With assumed_role and federation_token,\nthe policy document will act as a filter on what the credentials can do.",
          "type": "string"
        },
        "roleARNs": {
          "description": "Specifies the ARNs of the AWS roles this Vault role is allowed to assume.\nRequired when credential_type is assumed_role and prohibited otherwise",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secretEngineRef": {
          "description": "SecretEngineRef is the name of a Secret Engine",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string",
              "default": ""
            }
          },
          "x-kubernetes-map-type": "atomic"
        }
      }
    }
  }
}