{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "awsroles.engine.kubevault.com",
    "creationTimestamp": null,
    "labels": {
      "app.kubernetes.io/name": "kubevault"
    }
  },
  "spec": {
    "group": "engine.kubevault.com",
    "names": {
      "plural": "awsroles",
      "singular": "awsrole",
      "kind": "AWSRole",
      "listKind": "AWSRoleList",
      "categories": [
        "vault",
        "appscode",
        "all"
      ]
    },
    "scope": "Namespaced",
    "versions": [
      {
        "name": "v1alpha1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "AWSRoleSpec contains connection information, AWS role info, etc\nMore info: https://www.vaultproject.io/api/secret/aws/index.html#parameters-3",
                "type": "object",
                "required": [
                  "credentialType",
                  "secretEngineRef"
                ],
                "properties": {
                  "credentialType": {
                    "description": "Specifies the type of credential to be used when retrieving credentials from the role",
                    "type": "string",
                    "enum": [
                      "iam_user",
                      "assumed_role",
                      "federation_token"
                    ]
                  },
                  "defaultSTSTTL": {
                    "description": "The default TTL for STS credentials. When a TTL is not specified when STS credentials are requested,\nand a default TTL is specified on the role, then this default TTL will be used.\nValid only when credential_type is one of assumed_role or federation_token",
                    "type": "string"
                  },
                  "maxSTSTTL": {
                    "description": "The max allowed TTL for STS credentials (credentials TTL are capped to max_sts_ttl).\nValid only when credential_type is one of assumed_role or federation_token",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Specifies the IAM policy in JSON format.",
                    "type": "object",
                    "x-kubernetes-preserve-unknown-fields": true,
                    "x-kubernetes-embedded-resource": true
                  },
                  "policyARNs": {
                    "description": "Specifies the ARNs of the AWS managed policies to be attached to IAM users when they are requested.\nValid only when credential_type is iam_user. When credential_type is iam_user,\nat least one of policy_arns or policy_document must be specified.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "policyDocument": {
                    "description": "The IAM policy document for the role. The behavior depends on the credential type.\nWith iam_user, the policy document will be attached to the IAM user generated and\naugment the permissions the IAM user has. With assumed_role and federation_token,\nthe policy document will act as a filter on what the credentials can do.",
                    "type": "string"
                  },
                  "roleARNs": {
                    "description": "Specifies the ARNs of the AWS roles this Vault role is allowed to assume.\nRequired when credential_type is assumed_role and prohibited otherwise",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "secretEngineRef": {
                    "description": "SecretEngineRef is the name of a Secret Engine",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string",
                        "default": ""
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  }
                }
              },
              "status": {
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "Represents the latest available observations of a MySQLRole current state.",
                    "type": "array",
                    "items": {
                      "description": "Condition defines an observation of a object operational state.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "Last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A human-readable message indicating details about the transition.\nThis field may be empty.",
                          "type": "string"
                        },
                        "observedGeneration": {
                          "description": "If set, this represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "reason": {
                          "description": "The reason for the condition's last transition in CamelCase.\nThe specific API may choose whether this field is considered a guaranteed API.\nThis field may not be empty.",
                          "type": "string"
                        },
                        "severity": {
                          "description": "Severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of the condition, one of True, False, Unknown.",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary util\ncan be useful (see .node.status.util), the ability to deconflict is important.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "observedGeneration": {
                    "description": "ObservedGeneration is the most recent generation observed for this MySQLRole. It corresponds to the\nMySQLRole's generation, which is updated on mutation by the API Server.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "phase": {
                    "type": "string"
                  },
                  "policyRef": {
                    "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "Status",
            "type": "string",
            "jsonPath": ".status.phase"
          },
          {
            "name": "Age",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}