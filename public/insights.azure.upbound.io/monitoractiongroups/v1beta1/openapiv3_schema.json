{
  "$schema": "http://json-schema.org/schema#",
  "description": "MonitorActionGroup is the Schema for the MonitorActionGroups API. Manages an Action Group within Azure Monitor",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "insights.azure.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "MonitorActionGroup"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "MonitorActionGroupSpec defines the desired state of MonitorActionGroup",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "armRoleReceiver": {
              "description": "One or more arm_role_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the ARM role receiver.",
                    "type": "string"
                  },
                  "roleId": {
                    "description": "The arm role id.",
                    "type": "string"
                  },
                  "useCommonAlertSchema": {
                    "description": "Enables or disables the common alert schema.",
                    "type": "boolean"
                  }
                }
              }
            },
            "automationRunbookReceiver": {
              "description": "One or more automation_runbook_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "automationAccountId": {
                    "description": "The automation account ID which holds this runbook and authenticates to Azure resources.",
                    "type": "string"
                  },
                  "isGlobalRunbook": {
                    "description": "Indicates whether this instance is global runbook.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name of the automation runbook receiver.",
                    "type": "string"
                  },
                  "runbookName": {
                    "description": "The name for this runbook.",
                    "type": "string"
                  },
                  "serviceUri": {
                    "description": "The URI where webhooks should be sent.",
                    "type": "string"
                  },
                  "useCommonAlertSchema": {
                    "description": "Enables or disables the common alert schema.",
                    "type": "boolean"
                  },
                  "webhookResourceId": {
                    "description": "The resource id for webhook linked to this runbook.",
                    "type": "string"
                  }
                }
              }
            },
            "azureAppPushReceiver": {
              "description": "One or more azure_app_push_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "emailAddress": {
                    "description": "The email address of the user signed into the mobile app who will receive push notifications from this receiver.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the Azure app push receiver.",
                    "type": "string"
                  }
                }
              }
            },
            "azureFunctionReceiver": {
              "description": "One or more azure_function_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "functionAppResourceId": {
                    "description": "The Azure resource ID of the function app.",
                    "type": "string"
                  },
                  "functionName": {
                    "description": "The function name in the function app.",
                    "type": "string"
                  },
                  "httpTriggerUrl": {
                    "description": "The HTTP trigger url where HTTP request sent to.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the Azure Function receiver.",
                    "type": "string"
                  },
                  "useCommonAlertSchema": {
                    "description": "Enables or disables the common alert schema.",
                    "type": "boolean"
                  }
                }
              }
            },
            "emailReceiver": {
              "description": "One or more email_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "emailAddress": {
                    "description": "The email address of this receiver.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the email receiver. Names must be unique (case-insensitive) across all receivers within an action group.",
                    "type": "string"
                  },
                  "useCommonAlertSchema": {
                    "description": "Enables or disables the common alert schema.",
                    "type": "boolean"
                  }
                }
              }
            },
            "enabled": {
              "description": "Whether this action group is enabled. If an action group is not enabled, then none of its receivers will receive communications. Defaults to true.",
              "type": "boolean"
            },
            "eventHubReceiver": {
              "description": "One or more event_hub_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "eventHubId": {
                    "description": "The resource ID of the respective Event Hub.",
                    "type": "string"
                  },
                  "eventHubName": {
                    "description": "The name of the specific Event Hub queue.",
                    "type": "string"
                  },
                  "eventHubNamespace": {
                    "description": "The namespace name of the Event Hub.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the EventHub Receiver, must be unique within action group.",
                    "type": "string"
                  },
                  "subscriptionId": {
                    "description": "The ID for the subscription containing this Event Hub. Default to the subscription ID of the Action Group.",
                    "type": "string"
                  },
                  "tenantId": {
                    "description": "The Tenant ID for the subscription containing this Event Hub.",
                    "type": "string"
                  },
                  "useCommonAlertSchema": {
                    "description": "Indicates whether to use common alert schema.",
                    "type": "boolean"
                  }
                }
              }
            },
            "itsmReceiver": {
              "description": "One or more itsm_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "connectionId": {
                    "description": "The unique connection identifier of the ITSM connection.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the ITSM receiver.",
                    "type": "string"
                  },
                  "region": {
                    "description": "The region of the workspace.",
                    "type": "string"
                  },
                  "ticketConfiguration": {
                    "description": "A JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.",
                    "type": "string"
                  },
                  "workspaceId": {
                    "description": "The Azure Log Analytics workspace ID where this connection is defined. Format is \u003csubscription id\u003e|\u003cworkspace id\u003e, for example 00000000-0000-0000-0000-000000000000|00000000-0000-0000-0000-000000000000.",
                    "type": "string"
                  }
                }
              }
            },
            "location": {
              "description": "The Azure Region where the Action Group should exist. Changing this forces a new Action Group to be created. Defaults to global.",
              "type": "string"
            },
            "logicAppReceiver": {
              "description": "One or more logic_app_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "callbackUrl": {
                    "description": "The callback url where HTTP request sent to.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the logic app receiver.",
                    "type": "string"
                  },
                  "resourceId": {
                    "description": "The Azure resource ID of the logic app.",
                    "type": "string"
                  },
                  "useCommonAlertSchema": {
                    "description": "Enables or disables the common alert schema.",
                    "type": "boolean"
                  }
                }
              }
            },
            "resourceGroupName": {
              "description": "The name of the resource group in which to create the Action Group instance. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "shortName": {
              "description": "The short name of the action group. This will be used in SMS messages.",
              "type": "string"
            },
            "smsReceiver": {
              "description": "One or more sms_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "countryCode": {
                    "description": "The country code of the SMS receiver.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the SMS receiver. Names must be unique (case-insensitive) across all receivers within an action group.",
                    "type": "string"
                  },
                  "phoneNumber": {
                    "description": "The phone number of the SMS receiver.",
                    "type": "string"
                  }
                }
              }
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "voiceReceiver": {
              "description": "One or more voice_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "countryCode": {
                    "description": "The country code of the voice receiver.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the voice receiver.",
                    "type": "string"
                  },
                  "phoneNumber": {
                    "description": "The phone number of the voice receiver.",
                    "type": "string"
                  }
                }
              }
            },
            "webhookReceiver": {
              "description": "One or more webhook_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "aadAuth": {
                    "description": "The aad_auth block as defined below",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "identifierUri": {
                          "description": "The identifier URI for AAD auth.",
                          "type": "string"
                        },
                        "objectId": {
                          "description": "The webhook application object Id for AAD auth.",
                          "type": "string"
                        },
                        "tenantId": {
                          "description": "The tenant id for AAD auth.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "name": {
                    "description": "The name of the webhook receiver. Names must be unique (case-insensitive) across all receivers within an action group.",
                    "type": "string"
                  },
                  "serviceUri": {
                    "description": "The URI where webhooks should be sent.",
                    "type": "string"
                  },
                  "useCommonAlertSchema": {
                    "description": "Enables or disables the common alert schema.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "armRoleReceiver": {
              "description": "One or more arm_role_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the ARM role receiver.",
                    "type": "string"
                  },
                  "roleId": {
                    "description": "The arm role id.",
                    "type": "string"
                  },
                  "useCommonAlertSchema": {
                    "description": "Enables or disables the common alert schema.",
                    "type": "boolean"
                  }
                }
              }
            },
            "automationRunbookReceiver": {
              "description": "One or more automation_runbook_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "automationAccountId": {
                    "description": "The automation account ID which holds this runbook and authenticates to Azure resources.",
                    "type": "string"
                  },
                  "isGlobalRunbook": {
                    "description": "Indicates whether this instance is global runbook.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name of the automation runbook receiver.",
                    "type": "string"
                  },
                  "runbookName": {
                    "description": "The name for this runbook.",
                    "type": "string"
                  },
                  "serviceUri": {
                    "description": "The URI where webhooks should be sent.",
                    "type": "string"
                  },
                  "useCommonAlertSchema": {
                    "description": "Enables or disables the common alert schema.",
                    "type": "boolean"
                  },
                  "webhookResourceId": {
                    "description": "The resource id for webhook linked to this runbook.",
                    "type": "string"
                  }
                }
              }
            },
            "azureAppPushReceiver": {
              "description": "One or more azure_app_push_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "emailAddress": {
                    "description": "The email address of the user signed into the mobile app who will receive push notifications from this receiver.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the Azure app push receiver.",
                    "type": "string"
                  }
                }
              }
            },
            "azureFunctionReceiver": {
              "description": "One or more azure_function_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "functionAppResourceId": {
                    "description": "The Azure resource ID of the function app.",
                    "type": "string"
                  },
                  "functionName": {
                    "description": "The function name in the function app.",
                    "type": "string"
                  },
                  "httpTriggerUrl": {
                    "description": "The HTTP trigger url where HTTP request sent to.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the Azure Function receiver.",
                    "type": "string"
                  },
                  "useCommonAlertSchema": {
                    "description": "Enables or disables the common alert schema.",
                    "type": "boolean"
                  }
                }
              }
            },
            "emailReceiver": {
              "description": "One or more email_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "emailAddress": {
                    "description": "The email address of this receiver.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the email receiver. Names must be unique (case-insensitive) across all receivers within an action group.",
                    "type": "string"
                  },
                  "useCommonAlertSchema": {
                    "description": "Enables or disables the common alert schema.",
                    "type": "boolean"
                  }
                }
              }
            },
            "enabled": {
              "description": "Whether this action group is enabled. If an action group is not enabled, then none of its receivers will receive communications. Defaults to true.",
              "type": "boolean"
            },
            "eventHubReceiver": {
              "description": "One or more event_hub_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "eventHubId": {
                    "description": "The resource ID of the respective Event Hub.",
                    "type": "string"
                  },
                  "eventHubName": {
                    "description": "The name of the specific Event Hub queue.",
                    "type": "string"
                  },
                  "eventHubNamespace": {
                    "description": "The namespace name of the Event Hub.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the EventHub Receiver, must be unique within action group.",
                    "type": "string"
                  },
                  "subscriptionId": {
                    "description": "The ID for the subscription containing this Event Hub. Default to the subscription ID of the Action Group.",
                    "type": "string"
                  },
                  "tenantId": {
                    "description": "The Tenant ID for the subscription containing this Event Hub.",
                    "type": "string"
                  },
                  "useCommonAlertSchema": {
                    "description": "Indicates whether to use common alert schema.",
                    "type": "boolean"
                  }
                }
              }
            },
            "itsmReceiver": {
              "description": "One or more itsm_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "connectionId": {
                    "description": "The unique connection identifier of the ITSM connection.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the ITSM receiver.",
                    "type": "string"
                  },
                  "region": {
                    "description": "The region of the workspace.",
                    "type": "string"
                  },
                  "ticketConfiguration": {
                    "description": "A JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.",
                    "type": "string"
                  },
                  "workspaceId": {
                    "description": "The Azure Log Analytics workspace ID where this connection is defined. Format is \u003csubscription id\u003e|\u003cworkspace id\u003e, for example 00000000-0000-0000-0000-000000000000|00000000-0000-0000-0000-000000000000.",
                    "type": "string"
                  }
                }
              }
            },
            "location": {
              "description": "The Azure Region where the Action Group should exist. Changing this forces a new Action Group to be created. Defaults to global.",
              "type": "string"
            },
            "logicAppReceiver": {
              "description": "One or more logic_app_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "callbackUrl": {
                    "description": "The callback url where HTTP request sent to.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the logic app receiver.",
                    "type": "string"
                  },
                  "resourceId": {
                    "description": "The Azure resource ID of the logic app.",
                    "type": "string"
                  },
                  "useCommonAlertSchema": {
                    "description": "Enables or disables the common alert schema.",
                    "type": "boolean"
                  }
                }
              }
            },
            "shortName": {
              "description": "The short name of the action group. This will be used in SMS messages.",
              "type": "string"
            },
            "smsReceiver": {
              "description": "One or more sms_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "countryCode": {
                    "description": "The country code of the SMS receiver.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the SMS receiver. Names must be unique (case-insensitive) across all receivers within an action group.",
                    "type": "string"
                  },
                  "phoneNumber": {
                    "description": "The phone number of the SMS receiver.",
                    "type": "string"
                  }
                }
              }
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "voiceReceiver": {
              "description": "One or more voice_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "countryCode": {
                    "description": "The country code of the voice receiver.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the voice receiver.",
                    "type": "string"
                  },
                  "phoneNumber": {
                    "description": "The phone number of the voice receiver.",
                    "type": "string"
                  }
                }
              }
            },
            "webhookReceiver": {
              "description": "One or more webhook_receiver blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "aadAuth": {
                    "description": "The aad_auth block as defined below",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "identifierUri": {
                          "description": "The identifier URI for AAD auth.",
                          "type": "string"
                        },
                        "objectId": {
                          "description": "The webhook application object Id for AAD auth.",
                          "type": "string"
                        },
                        "tenantId": {
                          "description": "The tenant id for AAD auth.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "name": {
                    "description": "The name of the webhook receiver. Names must be unique (case-insensitive) across all receivers within an action group.",
                    "type": "string"
                  },
                  "serviceUri": {
                    "description": "The URI where webhooks should be sent.",
                    "type": "string"
                  },
                  "useCommonAlertSchema": {
                    "description": "Enables or disables the common alert schema.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.shortName) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.shortName))",
          "message": "spec.forProvider.shortName is a required parameter"
        }
      ]
    }
  }
}