{
  "$schema": "http://json-schema.org/schema#",
  "description": "MonitorMetricAlert is the Schema for the MonitorMetricAlerts API. Manages a Metric Alert within Azure Monitor",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "insights.azure.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "MonitorMetricAlert"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "MonitorMetricAlertSpec defines the desired state of MonitorMetricAlert",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "action": {
              "description": "One or more action blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "actionGroupId": {
                    "description": "The ID of the Action Group can be sourced from the",
                    "type": "string"
                  },
                  "actionGroupIdRef": {
                    "description": "Reference to a MonitorActionGroup to populate actionGroupId.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "actionGroupIdSelector": {
                    "description": "Selector for a MonitorActionGroup to populate actionGroupId.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "webhookProperties": {
                    "description": "The map of custom string properties to include with the post operation. These data are appended to the webhook payload.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "applicationInsightsWebTestLocationAvailabilityCriteria": {
              "description": "A application_insights_web_test_location_availability_criteria block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "componentId": {
                    "description": "The ID of the Application Insights Resource.",
                    "type": "string"
                  },
                  "failedLocationCount": {
                    "description": "The number of failed locations.",
                    "type": "number"
                  },
                  "webTestId": {
                    "description": "The ID of the Application Insights Web Test.",
                    "type": "string"
                  }
                }
              }
            },
            "autoMitigate": {
              "description": "Should the alerts in this Metric Alert be auto resolved? Defaults to true.",
              "type": "boolean"
            },
            "criteria": {
              "description": "One or more (static) criteria blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "aggregation": {
                    "description": "The statistic that runs over the metric values. Possible values are Average, Count, Minimum, Maximum and Total.",
                    "type": "string"
                  },
                  "dimension": {
                    "description": "One or more dimension blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "The name of the Metric Alert. Changing this forces a new resource to be created.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "The criteria operator. Possible values are LessThan, GreaterThan and GreaterOrLessThan.",
                          "type": "string"
                        },
                        "values": {
                          "description": "The list of dimension values.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "metricName": {
                    "description": "One of the metric names to be monitored.",
                    "type": "string"
                  },
                  "metricNamespace": {
                    "description": "One of the metric namespaces to be monitored.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "The criteria operator. Possible values are Equals, GreaterThan, GreaterThanOrEqual, LessThan and LessThanOrEqual.",
                    "type": "string"
                  },
                  "skipMetricValidation": {
                    "description": "Skip the metric validation to allow creating an alert rule on a custom metric that isn't yet emitted? Defaults to false.",
                    "type": "boolean"
                  },
                  "threshold": {
                    "description": "The criteria threshold value that activates the alert.",
                    "type": "number"
                  }
                }
              }
            },
            "description": {
              "description": "The description of this Metric Alert.",
              "type": "string"
            },
            "dynamicCriteria": {
              "description": "A dynamic_criteria block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "aggregation": {
                    "description": "The statistic that runs over the metric values. Possible values are Average, Count, Minimum, Maximum and Total.",
                    "type": "string"
                  },
                  "alertSensitivity": {
                    "description": "The extent of deviation required to trigger an alert. Possible values are Low, Medium and High.",
                    "type": "string"
                  },
                  "dimension": {
                    "description": "One or more dimension blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "The name of the Metric Alert. Changing this forces a new resource to be created.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "The criteria operator. Possible values are LessThan, GreaterThan and GreaterOrLessThan.",
                          "type": "string"
                        },
                        "values": {
                          "description": "The list of dimension values.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "evaluationFailureCount": {
                    "description": "The number of violations to trigger an alert. Should be smaller or equal to evaluation_total_count. Defaults to 4.",
                    "type": "number"
                  },
                  "evaluationTotalCount": {
                    "description": "The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (window_size) and the selected number of aggregated points. Defaults to 4.",
                    "type": "number"
                  },
                  "ignoreDataBefore": {
                    "description": "The ISO8601 date from which to start learning the metric historical data and calculate the dynamic thresholds.",
                    "type": "string"
                  },
                  "metricName": {
                    "description": "One of the metric names to be monitored.",
                    "type": "string"
                  },
                  "metricNamespace": {
                    "description": "One of the metric namespaces to be monitored.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "The criteria operator. Possible values are LessThan, GreaterThan and GreaterOrLessThan.",
                    "type": "string"
                  },
                  "skipMetricValidation": {
                    "description": "Skip the metric validation to allow creating an alert rule on a custom metric that isn't yet emitted?",
                    "type": "boolean"
                  }
                }
              }
            },
            "enabled": {
              "description": "Should this Metric Alert be enabled? Defaults to true.",
              "type": "boolean"
            },
            "frequency": {
              "description": "The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are PT1M, PT5M, PT15M, PT30M and PT1H. Defaults to PT1M.",
              "type": "string"
            },
            "resourceGroupName": {
              "description": "The name of the resource group in which to create the Metric Alert instance. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "scopes": {
              "description": "A set of strings of resource IDs at which the metric criteria should be applied.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "scopesRefs": {
              "description": "References to Account in storage to populate scopes.",
              "type": "array",
              "items": {
                "description": "A Reference to a named object.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "type": "object",
                    "properties": {
                      "resolution": {
                        "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                        "type": "string",
                        "default": "Required",
                        "enum": [
                          "Required",
                          "Optional"
                        ]
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                        "type": "string",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "scopesSelector": {
              "description": "Selector for a list of Account in storage to populate scopes.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "severity": {
              "description": "The severity of this Metric Alert. Possible values are 0, 1, 2, 3 and 4. Defaults to 3.",
              "type": "number"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "targetResourceLocation": {
              "description": "The location of the target resource. The location of the target pluginsdk. Required when using subscription, resource group scope or multiple scopes.",
              "type": "string"
            },
            "targetResourceType": {
              "description": "The resource type (e.g. Microsoft.Compute/virtualMachines) of the target resource. The resource type (e.g. Microsoft.Compute/virtualMachines) of the target pluginsdk. Required when using subscription, resource group scope or multiple scopes.",
              "type": "string"
            },
            "windowSize": {
              "description": "The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than frequency. Possible values are PT1M, PT5M, PT15M, PT30M, PT1H, PT6H, PT12H and P1D. Defaults to PT5M.",
              "type": "string"
            }
          }
        },
        "initProvider": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "action": {
              "description": "One or more action blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "webhookProperties": {
                    "description": "The map of custom string properties to include with the post operation. These data are appended to the webhook payload.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "applicationInsightsWebTestLocationAvailabilityCriteria": {
              "description": "A application_insights_web_test_location_availability_criteria block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "componentId": {
                    "description": "The ID of the Application Insights Resource.",
                    "type": "string"
                  },
                  "failedLocationCount": {
                    "description": "The number of failed locations.",
                    "type": "number"
                  },
                  "webTestId": {
                    "description": "The ID of the Application Insights Web Test.",
                    "type": "string"
                  }
                }
              }
            },
            "autoMitigate": {
              "description": "Should the alerts in this Metric Alert be auto resolved? Defaults to true.",
              "type": "boolean"
            },
            "criteria": {
              "description": "One or more (static) criteria blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "aggregation": {
                    "description": "The statistic that runs over the metric values. Possible values are Average, Count, Minimum, Maximum and Total.",
                    "type": "string"
                  },
                  "dimension": {
                    "description": "One or more dimension blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "The name of the Metric Alert. Changing this forces a new resource to be created.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "The criteria operator. Possible values are LessThan, GreaterThan and GreaterOrLessThan.",
                          "type": "string"
                        },
                        "values": {
                          "description": "The list of dimension values.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "metricName": {
                    "description": "One of the metric names to be monitored.",
                    "type": "string"
                  },
                  "metricNamespace": {
                    "description": "One of the metric namespaces to be monitored.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "The criteria operator. Possible values are Equals, GreaterThan, GreaterThanOrEqual, LessThan and LessThanOrEqual.",
                    "type": "string"
                  },
                  "skipMetricValidation": {
                    "description": "Skip the metric validation to allow creating an alert rule on a custom metric that isn't yet emitted? Defaults to false.",
                    "type": "boolean"
                  },
                  "threshold": {
                    "description": "The criteria threshold value that activates the alert.",
                    "type": "number"
                  }
                }
              }
            },
            "description": {
              "description": "The description of this Metric Alert.",
              "type": "string"
            },
            "dynamicCriteria": {
              "description": "A dynamic_criteria block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "aggregation": {
                    "description": "The statistic that runs over the metric values. Possible values are Average, Count, Minimum, Maximum and Total.",
                    "type": "string"
                  },
                  "alertSensitivity": {
                    "description": "The extent of deviation required to trigger an alert. Possible values are Low, Medium and High.",
                    "type": "string"
                  },
                  "dimension": {
                    "description": "One or more dimension blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "The name of the Metric Alert. Changing this forces a new resource to be created.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "The criteria operator. Possible values are LessThan, GreaterThan and GreaterOrLessThan.",
                          "type": "string"
                        },
                        "values": {
                          "description": "The list of dimension values.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "evaluationFailureCount": {
                    "description": "The number of violations to trigger an alert. Should be smaller or equal to evaluation_total_count. Defaults to 4.",
                    "type": "number"
                  },
                  "evaluationTotalCount": {
                    "description": "The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (window_size) and the selected number of aggregated points. Defaults to 4.",
                    "type": "number"
                  },
                  "ignoreDataBefore": {
                    "description": "The ISO8601 date from which to start learning the metric historical data and calculate the dynamic thresholds.",
                    "type": "string"
                  },
                  "metricName": {
                    "description": "One of the metric names to be monitored.",
                    "type": "string"
                  },
                  "metricNamespace": {
                    "description": "One of the metric namespaces to be monitored.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "The criteria operator. Possible values are LessThan, GreaterThan and GreaterOrLessThan.",
                    "type": "string"
                  },
                  "skipMetricValidation": {
                    "description": "Skip the metric validation to allow creating an alert rule on a custom metric that isn't yet emitted?",
                    "type": "boolean"
                  }
                }
              }
            },
            "enabled": {
              "description": "Should this Metric Alert be enabled? Defaults to true.",
              "type": "boolean"
            },
            "frequency": {
              "description": "The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are PT1M, PT5M, PT15M, PT30M and PT1H. Defaults to PT1M.",
              "type": "string"
            },
            "severity": {
              "description": "The severity of this Metric Alert. Possible values are 0, 1, 2, 3 and 4. Defaults to 3.",
              "type": "number"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "targetResourceLocation": {
              "description": "The location of the target resource. The location of the target pluginsdk. Required when using subscription, resource group scope or multiple scopes.",
              "type": "string"
            },
            "targetResourceType": {
              "description": "The resource type (e.g. Microsoft.Compute/virtualMachines) of the target resource. The resource type (e.g. Microsoft.Compute/virtualMachines) of the target pluginsdk. Required when using subscription, resource group scope or multiple scopes.",
              "type": "string"
            },
            "windowSize": {
              "description": "The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than frequency. Possible values are PT1M, PT5M, PT15M, PT30M, PT1H, PT6H, PT12H and P1D. Defaults to PT5M.",
              "type": "string"
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      }
    }
  }
}