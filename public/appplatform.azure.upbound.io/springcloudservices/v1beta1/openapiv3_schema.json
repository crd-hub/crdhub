{
  "$schema": "http://json-schema.org/schema#",
  "description": "SpringCloudService is the Schema for the SpringCloudServices API. Manages an Azure Spring Cloud Service.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "appplatform.azure.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "SpringCloudService"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "SpringCloudServiceSpec defines the desired state of SpringCloudService",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "buildAgentPoolSize": {
              "description": "Specifies the size for this Spring Cloud Service's default build agent pool. Possible values are S1, S2, S3, S4 and S5. This field is applicable only for Spring Cloud Service with enterprise tier.",
              "type": "string"
            },
            "configServerGitSetting": {
              "description": "A config_server_git_setting block as defined below. This field is applicable only for Spring Cloud Service with basic and standard tier.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "httpBasicAuth": {
                    "description": "A http_basic_auth block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "passwordSecretRef"
                      ],
                      "properties": {
                        "passwordSecretRef": {
                          "description": "The password used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.",
                          "type": "object",
                          "required": [
                            "key",
                            "name",
                            "namespace"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the secret.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace of the secret.",
                              "type": "string"
                            }
                          }
                        },
                        "username": {
                          "description": "The username that's used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "label": {
                    "description": "The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.",
                    "type": "string"
                  },
                  "repository": {
                    "description": "One or more repository blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "httpBasicAuth": {
                          "description": "A http_basic_auth block as defined below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "passwordSecretRef"
                            ],
                            "properties": {
                              "passwordSecretRef": {
                                "description": "The password used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.",
                                "type": "object",
                                "required": [
                                  "key",
                                  "name",
                                  "namespace"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the secret.",
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "description": "Namespace of the secret.",
                                    "type": "string"
                                  }
                                }
                              },
                              "username": {
                                "description": "The username that's used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "label": {
                          "description": "The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.",
                          "type": "string"
                        },
                        "name": {
                          "description": "A name to identify on the Git repository, required only if repos exists.",
                          "type": "string"
                        },
                        "pattern": {
                          "description": "An array of strings used to match an application name. For each pattern, use the {application}/{profile} format with wildcards.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "searchPaths": {
                          "description": "An array of strings used to search subdirectories of the Git repository.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "sshAuth": {
                          "description": "A ssh_auth block as defined below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "privateKeySecretRef"
                            ],
                            "properties": {
                              "hostKeyAlgorithm": {
                                "description": "The host key algorithm, should be ssh-dss, ssh-rsa, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, or ecdsa-sha2-nistp521. Required only if host-key exists.",
                                "type": "string"
                              },
                              "hostKeySecretRef": {
                                "description": "The host key of the Git repository server, should not include the algorithm prefix as covered by host-key-algorithm.",
                                "type": "object",
                                "required": [
                                  "key",
                                  "name",
                                  "namespace"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the secret.",
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "description": "Namespace of the secret.",
                                    "type": "string"
                                  }
                                }
                              },
                              "privateKeySecretRef": {
                                "description": "The SSH private key to access the Git repository, required when the URI starts with git@ or ssh://.",
                                "type": "object",
                                "required": [
                                  "key",
                                  "name",
                                  "namespace"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the secret.",
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "description": "Namespace of the secret.",
                                    "type": "string"
                                  }
                                }
                              },
                              "strictHostKeyCheckingEnabled": {
                                "description": "Indicates whether the Config Server instance will fail to start if the host_key does not match. Defaults to true.",
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "uri": {
                          "description": "The URI of the Git repository that's used as the Config Server back end should be started with http://, https://, git@, or ssh://.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "searchPaths": {
                    "description": "An array of strings used to search subdirectories of the Git repository.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "sshAuth": {
                    "description": "A ssh_auth block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "privateKeySecretRef"
                      ],
                      "properties": {
                        "hostKeyAlgorithm": {
                          "description": "The host key algorithm, should be ssh-dss, ssh-rsa, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, or ecdsa-sha2-nistp521. Required only if host-key exists.",
                          "type": "string"
                        },
                        "hostKeySecretRef": {
                          "description": "The host key of the Git repository server, should not include the algorithm prefix as covered by host-key-algorithm.",
                          "type": "object",
                          "required": [
                            "key",
                            "name",
                            "namespace"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the secret.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace of the secret.",
                              "type": "string"
                            }
                          }
                        },
                        "privateKeySecretRef": {
                          "description": "The SSH private key to access the Git repository, required when the URI starts with git@ or ssh://.",
                          "type": "object",
                          "required": [
                            "key",
                            "name",
                            "namespace"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the secret.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace of the secret.",
                              "type": "string"
                            }
                          }
                        },
                        "strictHostKeyCheckingEnabled": {
                          "description": "Indicates whether the Config Server instance will fail to start if the host_key does not match. Defaults to true.",
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "uri": {
                    "description": "The URI of the default Git repository used as the Config Server back end, should be started with http://, https://, git@, or ssh://.",
                    "type": "string"
                  }
                }
              }
            },
            "location": {
              "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "logStreamPublicEndpointEnabled": {
              "description": "Should the log stream in vnet injection instance could be accessed from Internet?",
              "type": "boolean"
            },
            "network": {
              "description": "A network block as defined below. Changing this forces a new resource to be created.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "appNetworkResourceGroup": {
                    "description": "Specifies the Name of the resource group containing network resources of Azure Spring Cloud Apps. Changing this forces a new resource to be created.",
                    "type": "string"
                  },
                  "appSubnetId": {
                    "description": "Specifies the ID of the Subnet which should host the Spring Boot Applications deployed in this Spring Cloud Service. Changing this forces a new resource to be created.",
                    "type": "string"
                  },
                  "appSubnetIdRef": {
                    "description": "Reference to a Subnet in network to populate appSubnetId.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "appSubnetIdSelector": {
                    "description": "Selector for a Subnet in network to populate appSubnetId.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "cidrRanges": {
                    "description": "A list of (at least 3) CIDR ranges (at least /16) which are used to host the Spring Cloud infrastructure, which must not overlap with any existing CIDR ranges in the Subnet. Changing this forces a new resource to be created.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "readTimeoutSeconds": {
                    "description": "Ingress read time out in seconds.",
                    "type": "number"
                  },
                  "serviceRuntimeNetworkResourceGroup": {
                    "description": "Specifies the Name of the resource group containing network resources of Azure Spring Cloud Service Runtime. Changing this forces a new resource to be created.",
                    "type": "string"
                  },
                  "serviceRuntimeSubnetId": {
                    "description": "Specifies the ID of the Subnet where the Service Runtime components of the Spring Cloud Service will exist. Changing this forces a new resource to be created.",
                    "type": "string"
                  },
                  "serviceRuntimeSubnetIdRef": {
                    "description": "Reference to a Subnet in network to populate serviceRuntimeSubnetId.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "serviceRuntimeSubnetIdSelector": {
                    "description": "Selector for a Subnet in network to populate serviceRuntimeSubnetId.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "resourceGroupName": {
              "description": "Specifies The name of the resource group in which to create the Spring Cloud Service. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "serviceRegistryEnabled": {
              "description": "Whether enable the default Service Registry. This field is applicable only for Spring Cloud Service with enterprise tier.",
              "type": "boolean"
            },
            "skuName": {
              "description": "Specifies the SKU Name for this Spring Cloud Service. Possible values are B0, S0 and E0. Defaults to S0. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "trace": {
              "description": "A trace block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "connectionString": {
                    "description": "The connection string used for Application Insights.",
                    "type": "string"
                  },
                  "connectionStringRef": {
                    "description": "Reference to a ApplicationInsights in insights to populate connectionString.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "connectionStringSelector": {
                    "description": "Selector for a ApplicationInsights in insights to populate connectionString.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "sampleRate": {
                    "description": "The sampling rate of Application Insights Agent. Must be between 0.0 and 100.0. Defaults to 10.0.",
                    "type": "number"
                  }
                }
              }
            },
            "zoneRedundant": {
              "description": "Whether zone redundancy is enabled for this Spring Cloud Service. Defaults to false.",
              "type": "boolean"
            }
          }
        },
        "initProvider": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "buildAgentPoolSize": {
              "description": "Specifies the size for this Spring Cloud Service's default build agent pool. Possible values are S1, S2, S3, S4 and S5. This field is applicable only for Spring Cloud Service with enterprise tier.",
              "type": "string"
            },
            "configServerGitSetting": {
              "description": "A config_server_git_setting block as defined below. This field is applicable only for Spring Cloud Service with basic and standard tier.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "httpBasicAuth": {
                    "description": "A http_basic_auth block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "description": "The username that's used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "label": {
                    "description": "The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.",
                    "type": "string"
                  },
                  "repository": {
                    "description": "One or more repository blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "httpBasicAuth": {
                          "description": "A http_basic_auth block as defined below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "username": {
                                "description": "The username that's used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "label": {
                          "description": "The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.",
                          "type": "string"
                        },
                        "name": {
                          "description": "A name to identify on the Git repository, required only if repos exists.",
                          "type": "string"
                        },
                        "pattern": {
                          "description": "An array of strings used to match an application name. For each pattern, use the {application}/{profile} format with wildcards.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "searchPaths": {
                          "description": "An array of strings used to search subdirectories of the Git repository.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "sshAuth": {
                          "description": "A ssh_auth block as defined below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "hostKeyAlgorithm": {
                                "description": "The host key algorithm, should be ssh-dss, ssh-rsa, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, or ecdsa-sha2-nistp521. Required only if host-key exists.",
                                "type": "string"
                              },
                              "strictHostKeyCheckingEnabled": {
                                "description": "Indicates whether the Config Server instance will fail to start if the host_key does not match. Defaults to true.",
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "uri": {
                          "description": "The URI of the Git repository that's used as the Config Server back end should be started with http://, https://, git@, or ssh://.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "searchPaths": {
                    "description": "An array of strings used to search subdirectories of the Git repository.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "sshAuth": {
                    "description": "A ssh_auth block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "hostKeyAlgorithm": {
                          "description": "The host key algorithm, should be ssh-dss, ssh-rsa, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, or ecdsa-sha2-nistp521. Required only if host-key exists.",
                          "type": "string"
                        },
                        "strictHostKeyCheckingEnabled": {
                          "description": "Indicates whether the Config Server instance will fail to start if the host_key does not match. Defaults to true.",
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "uri": {
                    "description": "The URI of the default Git repository used as the Config Server back end, should be started with http://, https://, git@, or ssh://.",
                    "type": "string"
                  }
                }
              }
            },
            "location": {
              "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "logStreamPublicEndpointEnabled": {
              "description": "Should the log stream in vnet injection instance could be accessed from Internet?",
              "type": "boolean"
            },
            "network": {
              "description": "A network block as defined below. Changing this forces a new resource to be created.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "appNetworkResourceGroup": {
                    "description": "Specifies the Name of the resource group containing network resources of Azure Spring Cloud Apps. Changing this forces a new resource to be created.",
                    "type": "string"
                  },
                  "cidrRanges": {
                    "description": "A list of (at least 3) CIDR ranges (at least /16) which are used to host the Spring Cloud infrastructure, which must not overlap with any existing CIDR ranges in the Subnet. Changing this forces a new resource to be created.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "readTimeoutSeconds": {
                    "description": "Ingress read time out in seconds.",
                    "type": "number"
                  },
                  "serviceRuntimeNetworkResourceGroup": {
                    "description": "Specifies the Name of the resource group containing network resources of Azure Spring Cloud Service Runtime. Changing this forces a new resource to be created.",
                    "type": "string"
                  }
                }
              }
            },
            "serviceRegistryEnabled": {
              "description": "Whether enable the default Service Registry. This field is applicable only for Spring Cloud Service with enterprise tier.",
              "type": "boolean"
            },
            "skuName": {
              "description": "Specifies the SKU Name for this Spring Cloud Service. Possible values are B0, S0 and E0. Defaults to S0. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "trace": {
              "description": "A trace block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "sampleRate": {
                    "description": "The sampling rate of Application Insights Agent. Must be between 0.0 and 100.0. Defaults to 10.0.",
                    "type": "number"
                  }
                }
              }
            },
            "zoneRedundant": {
              "description": "Whether zone redundancy is enabled for this Spring Cloud Service. Defaults to false.",
              "type": "boolean"
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.location))",
          "message": "spec.forProvider.location is a required parameter"
        }
      ]
    }
  }
}