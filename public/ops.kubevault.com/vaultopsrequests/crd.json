{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "vaultopsrequests.ops.kubevault.com",
    "creationTimestamp": null,
    "labels": {
      "app.kubernetes.io/name": "kubevault"
    }
  },
  "spec": {
    "group": "ops.kubevault.com",
    "names": {
      "plural": "vaultopsrequests",
      "singular": "vaultopsrequest",
      "shortNames": [
        "vsops"
      ],
      "kind": "VaultOpsRequest",
      "listKind": "VaultOpsRequestList",
      "categories": [
        "security",
        "kubevault",
        "appscode"
      ]
    },
    "scope": "Namespaced",
    "versions": [
      {
        "name": "v1alpha1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "VaultOpsRequestSpec is the spec for VaultOpsRequest",
                "type": "object",
                "required": [
                  "type",
                  "vaultRef"
                ],
                "properties": {
                  "restart": {
                    "description": "Specifies information necessary for restarting VaultServer",
                    "type": "object"
                  },
                  "timeout": {
                    "description": "Timeout for each step of the ops request in second. If a step doesn't finish within the specified timeout, the ops request will result in failure.",
                    "type": "string"
                  },
                  "tls": {
                    "description": "Specifies information necessary for configuring TLS",
                    "type": "object",
                    "properties": {
                      "certificates": {
                        "description": "Certificate provides server and/or client certificate options used by application pods.\nThese options are passed to a cert-manager Certificate object.\nxref: https://github.com/jetstack/cert-manager/blob/v0.16.0/pkg/apis/certmanager/v1beta1/types_certificate.go#L82-L162",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "alias"
                          ],
                          "properties": {
                            "alias": {
                              "description": "Alias represents the identifier of the certificate.",
                              "type": "string"
                            },
                            "dnsNames": {
                              "description": "DNSNames is a list of subject alt names to be used on the Certificate.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "duration": {
                              "description": "Certificate default Duration",
                              "type": "string"
                            },
                            "emailAddresses": {
                              "description": "EmailAddresses is a list of email subjectAltNames to be set on the Certificate.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "ipAddresses": {
                              "description": "IPAddresses is a list of IP addresses to be used on the Certificate",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "issuerRef": {
                              "description": "IssuerRef is a reference to a Certificate Issuer.",
                              "type": "object",
                              "required": [
                                "kind",
                                "name"
                              ],
                              "properties": {
                                "apiGroup": {
                                  "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.",
                                  "type": "string"
                                },
                                "kind": {
                                  "description": "Kind is the type of resource being referenced",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name is the name of resource being referenced",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "privateKey": {
                              "description": "Options to control private keys used for the Certificate.",
                              "type": "object",
                              "properties": {
                                "encoding": {
                                  "description": "The private key cryptography standards (PKCS) encoding for this\ncertificate's private key to be encoded in.\nIf provided, allowed values are \"pkcs1\" and \"pkcs8\" standing for PKCS#1\nand PKCS#8, respectively.\nDefaults to PKCS#1 if not specified.\nSee here for the difference between the formats: https://stackoverflow.com/a/48960291",
                                  "type": "string",
                                  "enum": [
                                    "PKCS1",
                                    "PKCS8"
                                  ]
                                }
                              }
                            },
                            "renewBefore": {
                              "description": "Certificate renew before expiration duration\n\nDeprecated use `ReconfigureTLS` type OpsRequest instead.",
                              "type": "string"
                            },
                            "secretName": {
                              "description": "Specifies the k8s secret name that holds the certificates.\nDefault to \u003cresource-name\u003e-\u003ccert-alias\u003e-cert.",
                              "type": "string"
                            },
                            "subject": {
                              "description": "Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).",
                              "type": "object",
                              "properties": {
                                "countries": {
                                  "description": "Countries to be used on the CertificateSpec.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "localities": {
                                  "description": "Cities to be used on the CertificateSpec.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "organizationalUnits": {
                                  "description": "Organizational Units to be used on the CertificateSpec.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "organizations": {
                                  "description": "Organizations to be used on the Certificate.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "postalCodes": {
                                  "description": "Postal codes to be used on the CertificateSpec.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "provinces": {
                                  "description": "State/Provinces to be used on the CertificateSpec.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "serialNumber": {
                                  "description": "Serial number to be used on the CertificateSpec.",
                                  "type": "string"
                                },
                                "streetAddresses": {
                                  "description": "Street addresses to be used on the CertificateSpec.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "uris": {
                              "description": "URIs is a list of URI subjectAltNames to be set on the Certificate.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "issuerRef": {
                        "description": "IssuerRef is a reference to a Certificate Issuer.",
                        "type": "object",
                        "required": [
                          "kind",
                          "name"
                        ],
                        "properties": {
                          "apiGroup": {
                            "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.",
                            "type": "string"
                          },
                          "kind": {
                            "description": "Kind is the type of resource being referenced",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name is the name of resource being referenced",
                            "type": "string"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "remove": {
                        "description": "Remove tells operator to remove TLS configuration",
                        "type": "boolean"
                      },
                      "rotateCertificates": {
                        "description": "RotateCertificates tells operator to initiate certificate rotation",
                        "type": "boolean"
                      }
                    }
                  },
                  "type": {
                    "description": "Specifies the ops request type: ReconfigureTLS, Upgrade, etc.",
                    "type": "string",
                    "enum": [
                      "ReconfigureTLS",
                      "Restart"
                    ]
                  },
                  "vaultRef": {
                    "description": "Specifies the Vault reference",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string",
                        "default": ""
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  }
                }
              },
              "status": {
                "description": "VaultOpsRequestStatus is the status for VaultOpsRequest",
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "Conditions applied to the request, such as approval or denial.",
                    "type": "array",
                    "items": {
                      "description": "Condition defines an observation of a object operational state.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "Last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A human-readable message indicating details about the transition.\nThis field may be empty.",
                          "type": "string"
                        },
                        "observedGeneration": {
                          "description": "If set, this represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "reason": {
                          "description": "The reason for the condition's last transition in CamelCase.\nThe specific API may choose whether this field is considered a guaranteed API.\nThis field may not be empty.",
                          "type": "string"
                        },
                        "severity": {
                          "description": "Severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of the condition, one of True, False, Unknown.",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary util\ncan be useful (see .node.status.util), the ability to deconflict is important.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "observedGeneration": {
                    "description": "observedGeneration is the most recent generation observed for this resource. It corresponds to the\nresource's generation, which is updated on mutation by the API Server.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "phase": {
                    "description": "Specifies the current phase of the ops request",
                    "type": "string",
                    "enum": [
                      "Pending",
                      "Progressing",
                      "Successful",
                      "WaitingForApproval",
                      "Failed",
                      "Approved",
                      "Denied"
                    ]
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "Type",
            "type": "string",
            "jsonPath": ".spec.type"
          },
          {
            "name": "Status",
            "type": "string",
            "jsonPath": ".status.phase"
          },
          {
            "name": "Age",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}