{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "accesslevelconditions.accesscontextmanager.gcp.upbound.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.13.0"
    }
  },
  "spec": {
    "group": "accesscontextmanager.gcp.upbound.io",
    "names": {
      "plural": "accesslevelconditions",
      "singular": "accesslevelcondition",
      "kind": "AccessLevelCondition",
      "listKind": "AccessLevelConditionList",
      "categories": [
        "crossplane",
        "managed",
        "gcp"
      ]
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "AccessLevelCondition is the Schema for the AccessLevelConditions API. Allows configuring a single access level condition to be appended to an access level's conditions.",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "AccessLevelConditionSpec defines the desired state of AccessLevelCondition",
                "type": "object",
                "required": [
                  "forProvider"
                ],
                "properties": {
                  "deletionPolicy": {
                    "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
                    "type": "string",
                    "default": "Delete",
                    "enum": [
                      "Orphan",
                      "Delete"
                    ]
                  },
                  "forProvider": {
                    "type": "object",
                    "properties": {
                      "accessLevel": {
                        "description": "The name of the Access Level to add this condition to.",
                        "type": "string"
                      },
                      "accessLevelRef": {
                        "description": "Reference to a AccessLevel in accesscontextmanager to populate accessLevel.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "accessLevelSelector": {
                        "description": "Selector for a AccessLevel in accesscontextmanager to populate accessLevel.",
                        "type": "object",
                        "properties": {
                          "matchControllerRef": {
                            "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                            "type": "boolean"
                          },
                          "matchLabels": {
                            "description": "MatchLabels ensures an object with matching labels is selected.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "policy": {
                            "description": "Policies for selection.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "devicePolicy": {
                        "description": "Device specific restrictions, all restrictions must hold for the Condition to be true. If not specified, all devices are allowed. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "allowedDeviceManagementLevels": {
                              "description": "A list of allowed device management levels. An empty list allows all management levels. Each value may be one of: MANAGEMENT_UNSPECIFIED, NONE, BASIC, COMPLETE.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "allowedEncryptionStatuses": {
                              "description": "A list of allowed encryptions statuses. An empty list allows all statuses. Each value may be one of: ENCRYPTION_UNSPECIFIED, ENCRYPTION_UNSUPPORTED, UNENCRYPTED, ENCRYPTED.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "osConstraints": {
                              "description": "A list of allowed OS versions. An empty list allows all types and all versions. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "minimumVersion": {
                                    "description": "The minimum allowed OS version. If not set, any version of this OS satisfies the constraint. Format: \"major.minor.patch\" such as \"10.5.301\", \"9.2.1\".",
                                    "type": "string"
                                  },
                                  "osType": {
                                    "description": "The operating system type of the device. Possible values are: OS_UNSPECIFIED, DESKTOP_MAC, DESKTOP_WINDOWS, DESKTOP_LINUX, DESKTOP_CHROME_OS, ANDROID, IOS.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "requireAdminApproval": {
                              "description": "Whether the device needs to be approved by the customer admin.",
                              "type": "boolean"
                            },
                            "requireCorpOwned": {
                              "description": "Whether the device needs to be corp owned.",
                              "type": "boolean"
                            },
                            "requireScreenLock": {
                              "description": "Whether or not screenlock is required for the DevicePolicy to be true. Defaults to false.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "ipSubnetworks": {
                        "description": "A list of CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a CIDR IP address block, the specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered malformed. For example, \"192.0.2.0/24\" is accepted but \"192.0.2.1/24\" is not. Similarly, for IPv6, \"2001:db8::/32\" is accepted whereas \"2001:db8::1/32\" is not. The originating IP of a request must be in one of the listed subnets in order for this Condition to be true. If empty, all IP addresses are allowed.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "members": {
                        "description": "An allowed list of members (users, service accounts). Using groups is not supported yet. The signed-in user originating the request must be a part of one of the provided members. If not specified, a request may come from any user (logged in/not logged in, not present in any groups, etc.). Formats: user:{emailid}, serviceAccount:{emailid}",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "negate": {
                        "description": "Whether to negate the Condition. If true, the Condition becomes a NAND over its non-empty fields, each field must be false for the Condition overall to be satisfied. Defaults to false.",
                        "type": "boolean"
                      },
                      "regions": {
                        "description": "The request must originate from one of the provided countries/regions. Format: A valid ISO 3166-1 alpha-2 code.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "requiredAccessLevels": {
                        "description": "A list of other access levels defined in the same Policy, referenced by resource name. Referencing an AccessLevel which does not exist is an error. All access levels listed must be granted for the Condition to be true. Format: accessPolicies/{policy_id}/accessLevels/{short_name}",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "initProvider": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
                    "type": "object",
                    "properties": {
                      "devicePolicy": {
                        "description": "Device specific restrictions, all restrictions must hold for the Condition to be true. If not specified, all devices are allowed. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "allowedDeviceManagementLevels": {
                              "description": "A list of allowed device management levels. An empty list allows all management levels. Each value may be one of: MANAGEMENT_UNSPECIFIED, NONE, BASIC, COMPLETE.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "allowedEncryptionStatuses": {
                              "description": "A list of allowed encryptions statuses. An empty list allows all statuses. Each value may be one of: ENCRYPTION_UNSPECIFIED, ENCRYPTION_UNSUPPORTED, UNENCRYPTED, ENCRYPTED.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "osConstraints": {
                              "description": "A list of allowed OS versions. An empty list allows all types and all versions. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "minimumVersion": {
                                    "description": "The minimum allowed OS version. If not set, any version of this OS satisfies the constraint. Format: \"major.minor.patch\" such as \"10.5.301\", \"9.2.1\".",
                                    "type": "string"
                                  },
                                  "osType": {
                                    "description": "The operating system type of the device. Possible values are: OS_UNSPECIFIED, DESKTOP_MAC, DESKTOP_WINDOWS, DESKTOP_LINUX, DESKTOP_CHROME_OS, ANDROID, IOS.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "requireAdminApproval": {
                              "description": "Whether the device needs to be approved by the customer admin.",
                              "type": "boolean"
                            },
                            "requireCorpOwned": {
                              "description": "Whether the device needs to be corp owned.",
                              "type": "boolean"
                            },
                            "requireScreenLock": {
                              "description": "Whether or not screenlock is required for the DevicePolicy to be true. Defaults to false.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "ipSubnetworks": {
                        "description": "A list of CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a CIDR IP address block, the specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered malformed. For example, \"192.0.2.0/24\" is accepted but \"192.0.2.1/24\" is not. Similarly, for IPv6, \"2001:db8::/32\" is accepted whereas \"2001:db8::1/32\" is not. The originating IP of a request must be in one of the listed subnets in order for this Condition to be true. If empty, all IP addresses are allowed.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "members": {
                        "description": "An allowed list of members (users, service accounts). Using groups is not supported yet. The signed-in user originating the request must be a part of one of the provided members. If not specified, a request may come from any user (logged in/not logged in, not present in any groups, etc.). Formats: user:{emailid}, serviceAccount:{emailid}",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "negate": {
                        "description": "Whether to negate the Condition. If true, the Condition becomes a NAND over its non-empty fields, each field must be false for the Condition overall to be satisfied. Defaults to false.",
                        "type": "boolean"
                      },
                      "regions": {
                        "description": "The request must originate from one of the provided countries/regions. Format: A valid ISO 3166-1 alpha-2 code.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "requiredAccessLevels": {
                        "description": "A list of other access levels defined in the same Policy, referenced by resource name. Referencing an AccessLevel which does not exist is an error. All access levels listed must be granted for the Condition to be true. Format: accessPolicies/{policy_id}/accessLevels/{short_name}",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "managementPolicies": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
                    "type": "array",
                    "default": [
                      "*"
                    ],
                    "items": {
                      "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
                      "type": "string",
                      "enum": [
                        "Observe",
                        "Create",
                        "Update",
                        "Delete",
                        "LateInitialize",
                        "*"
                      ]
                    }
                  },
                  "providerConfigRef": {
                    "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
                    "type": "object",
                    "default": {
                      "name": "default"
                    },
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "publishConnectionDetailsTo": {
                    "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "configRef": {
                        "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
                        "type": "object",
                        "default": {
                          "name": "default"
                        },
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "Metadata is the metadata for connection secret.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "type": {
                            "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name of the connection secret.",
                        "type": "string"
                      }
                    }
                  },
                  "writeConnectionSecretToRef": {
                    "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
                    "type": "object",
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "status": {
                "description": "AccessLevelConditionStatus defines the observed state of AccessLevelCondition.",
                "type": "object",
                "properties": {
                  "atProvider": {
                    "type": "object",
                    "properties": {
                      "accessLevel": {
                        "description": "The name of the Access Level to add this condition to.",
                        "type": "string"
                      },
                      "devicePolicy": {
                        "description": "Device specific restrictions, all restrictions must hold for the Condition to be true. If not specified, all devices are allowed. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "allowedDeviceManagementLevels": {
                              "description": "A list of allowed device management levels. An empty list allows all management levels. Each value may be one of: MANAGEMENT_UNSPECIFIED, NONE, BASIC, COMPLETE.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "allowedEncryptionStatuses": {
                              "description": "A list of allowed encryptions statuses. An empty list allows all statuses. Each value may be one of: ENCRYPTION_UNSPECIFIED, ENCRYPTION_UNSUPPORTED, UNENCRYPTED, ENCRYPTED.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "osConstraints": {
                              "description": "A list of allowed OS versions. An empty list allows all types and all versions. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "minimumVersion": {
                                    "description": "The minimum allowed OS version. If not set, any version of this OS satisfies the constraint. Format: \"major.minor.patch\" such as \"10.5.301\", \"9.2.1\".",
                                    "type": "string"
                                  },
                                  "osType": {
                                    "description": "The operating system type of the device. Possible values are: OS_UNSPECIFIED, DESKTOP_MAC, DESKTOP_WINDOWS, DESKTOP_LINUX, DESKTOP_CHROME_OS, ANDROID, IOS.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "requireAdminApproval": {
                              "description": "Whether the device needs to be approved by the customer admin.",
                              "type": "boolean"
                            },
                            "requireCorpOwned": {
                              "description": "Whether the device needs to be corp owned.",
                              "type": "boolean"
                            },
                            "requireScreenLock": {
                              "description": "Whether or not screenlock is required for the DevicePolicy to be true. Defaults to false.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "id": {
                        "description": "an identifier for the resource with format {{access_level}}",
                        "type": "string"
                      },
                      "ipSubnetworks": {
                        "description": "A list of CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a CIDR IP address block, the specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered malformed. For example, \"192.0.2.0/24\" is accepted but \"192.0.2.1/24\" is not. Similarly, for IPv6, \"2001:db8::/32\" is accepted whereas \"2001:db8::1/32\" is not. The originating IP of a request must be in one of the listed subnets in order for this Condition to be true. If empty, all IP addresses are allowed.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "members": {
                        "description": "An allowed list of members (users, service accounts). Using groups is not supported yet. The signed-in user originating the request must be a part of one of the provided members. If not specified, a request may come from any user (logged in/not logged in, not present in any groups, etc.). Formats: user:{emailid}, serviceAccount:{emailid}",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "negate": {
                        "description": "Whether to negate the Condition. If true, the Condition becomes a NAND over its non-empty fields, each field must be false for the Condition overall to be satisfied. Defaults to false.",
                        "type": "boolean"
                      },
                      "regions": {
                        "description": "The request must originate from one of the provided countries/regions. Format: A valid ISO 3166-1 alpha-2 code.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "requiredAccessLevels": {
                        "description": "A list of other access levels defined in the same Policy, referenced by resource name. Referencing an AccessLevel which does not exist is an error. All access levels listed must be granted for the Condition to be true. Format: accessPolicies/{policy_id}/accessLevels/{short_name}",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "conditions": {
                    "description": "Conditions of the resource.",
                    "type": "array",
                    "items": {
                      "description": "A Condition that may apply to a resource.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "A Reason for this condition's last transition from one status to another.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of this condition; is it currently True, False, or Unknown?",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "READY",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
          },
          {
            "name": "SYNCED",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Synced')].status"
          },
          {
            "name": "EXTERNAL-NAME",
            "type": "string",
            "jsonPath": ".metadata.annotations.crossplane\\.io/external-name"
          },
          {
            "name": "AGE",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}