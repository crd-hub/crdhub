{
  "$schema": "http://json-schema.org/schema#",
  "description": "LBListener is the Schema for the LBListeners API. Provides a Load Balancer Listener resource.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "elbv2.aws.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "LBListener"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "LBListenerSpec defines the desired state of LBListener",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "alpnPolicy": {
              "description": "Name of the Application-Layer Protocol Negotiation (ALPN) policy. Can be set if protocol is TLS. Valid values are HTTP1Only, HTTP2Only, HTTP2Optional, HTTP2Preferred, and None.",
              "type": "string"
            },
            "certificateArn": {
              "description": "ARN of the default SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. For adding additional SSL certificates, see the aws_lb_listener_certificate resource.",
              "type": "string"
            },
            "defaultAction": {
              "description": "Configuration block for default actions. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "authenticateCognito": {
                    "description": "Configuration block for using Amazon Cognito to authenticate users. Specify only when type is authenticate-cognito. Detailed below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "authenticationRequestExtraParams": {
                          "description": "Query parameters to include in the redirect request to the authorization endpoint. Max: 10. Detailed below.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "onUnauthenticatedRequest": {
                          "description": "Behavior if the user is not authenticated. Valid values are deny, allow and authenticate.",
                          "type": "string"
                        },
                        "scope": {
                          "description": "Set of user claims to be requested from the IdP.",
                          "type": "string"
                        },
                        "sessionCookieName": {
                          "description": "Name of the cookie used to maintain session information.",
                          "type": "string"
                        },
                        "sessionTimeout": {
                          "description": "Maximum duration of the authentication session, in seconds.",
                          "type": "number"
                        },
                        "userPoolArn": {
                          "description": "ARN of the Cognito user pool.",
                          "type": "string"
                        },
                        "userPoolClientId": {
                          "description": "ID of the Cognito user pool client.",
                          "type": "string"
                        },
                        "userPoolDomain": {
                          "description": "Domain prefix or fully-qualified domain name of the Cognito user pool.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "authenticateOidc": {
                    "description": "Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when type is authenticate-oidc. Detailed below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "clientSecretSecretRef"
                      ],
                      "properties": {
                        "authenticationRequestExtraParams": {
                          "description": "Query parameters to include in the redirect request to the authorization endpoint. Max: 10.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "authorizationEndpoint": {
                          "description": "Authorization endpoint of the IdP.",
                          "type": "string"
                        },
                        "clientId": {
                          "description": "OAuth 2.0 client identifier.",
                          "type": "string"
                        },
                        "clientSecretSecretRef": {
                          "description": "OAuth 2.0 client secret.",
                          "type": "object",
                          "required": [
                            "key",
                            "name",
                            "namespace"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the secret.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace of the secret.",
                              "type": "string"
                            }
                          }
                        },
                        "issuer": {
                          "description": "OIDC issuer identifier of the IdP.",
                          "type": "string"
                        },
                        "onUnauthenticatedRequest": {
                          "description": "Behavior if the user is not authenticated. Valid values: deny, allow and authenticate",
                          "type": "string"
                        },
                        "scope": {
                          "description": "Set of user claims to be requested from the IdP.",
                          "type": "string"
                        },
                        "sessionCookieName": {
                          "description": "Name of the cookie used to maintain session information.",
                          "type": "string"
                        },
                        "sessionTimeout": {
                          "description": "Maximum duration of the authentication session, in seconds.",
                          "type": "number"
                        },
                        "tokenEndpoint": {
                          "description": "Token endpoint of the IdP.",
                          "type": "string"
                        },
                        "userInfoEndpoint": {
                          "description": "User info endpoint of the IdP.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "fixedResponse": {
                    "description": "Information for creating an action that returns a custom HTTP response. Required if type is fixed-response.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "contentType": {
                          "description": "Content type. Valid values are text/plain, text/css, text/html, application/javascript and application/json.",
                          "type": "string"
                        },
                        "messageBody": {
                          "description": "Message body.",
                          "type": "string"
                        },
                        "statusCode": {
                          "description": "HTTP response code. Valid values are 2XX, 4XX, or 5XX.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "forward": {
                    "description": "Configuration block for creating an action that distributes requests among one or more target groups. Specify only if type is forward. If you specify both forward block and target_group_arn attribute, you can specify only one target group using forward and it must be the same target group specified in target_group_arn. Detailed below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "stickiness": {
                          "description": "Configuration block for target group stickiness for the rule. Detailed below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "duration": {
                                "description": "Time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).",
                                "type": "number"
                              },
                              "enabled": {
                                "description": "Whether target group stickiness is enabled. Default is false.",
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "targetGroup": {
                          "description": "Set of 1-5 target group blocks. Detailed below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "arn": {
                                "description": "ARN of the target group.",
                                "type": "string"
                              },
                              "arnRef": {
                                "description": "Reference to a LBTargetGroup to populate arn.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name of the referenced object.",
                                    "type": "string"
                                  },
                                  "policy": {
                                    "description": "Policies for referencing.",
                                    "type": "object",
                                    "properties": {
                                      "resolution": {
                                        "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                        "type": "string",
                                        "default": "Required",
                                        "enum": [
                                          "Required",
                                          "Optional"
                                        ]
                                      },
                                      "resolve": {
                                        "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                        "type": "string",
                                        "enum": [
                                          "Always",
                                          "IfNotPresent"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "arnSelector": {
                                "description": "Selector for a LBTargetGroup to populate arn.",
                                "type": "object",
                                "properties": {
                                  "matchControllerRef": {
                                    "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                    "type": "boolean"
                                  },
                                  "matchLabels": {
                                    "description": "MatchLabels ensures an object with matching labels is selected.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "policy": {
                                    "description": "Policies for selection.",
                                    "type": "object",
                                    "properties": {
                                      "resolution": {
                                        "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                        "type": "string",
                                        "default": "Required",
                                        "enum": [
                                          "Required",
                                          "Optional"
                                        ]
                                      },
                                      "resolve": {
                                        "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                        "type": "string",
                                        "enum": [
                                          "Always",
                                          "IfNotPresent"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "weight": {
                                "description": "Weight. The range is 0 to 999.",
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "order": {
                    "description": "Order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first. Valid values are between 1 and 50000.",
                    "type": "number"
                  },
                  "redirect": {
                    "description": "Configuration block for creating a redirect action. Required if type is redirect. Detailed below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "host": {
                          "description": "Hostname. This component is not percent-encoded. The hostname can contain #{host}. Defaults to #{host}.",
                          "type": "string"
                        },
                        "path": {
                          "description": "Absolute path, starting with the leading \"/\". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to /#{path}.",
                          "type": "string"
                        },
                        "port": {
                          "description": "Port. Specify a value from 1 to 65535 or #{port}. Defaults to #{port}.",
                          "type": "string"
                        },
                        "protocol": {
                          "description": "Protocol. Valid values are HTTP, HTTPS, or #{protocol}. Defaults to #{protocol}.",
                          "type": "string"
                        },
                        "query": {
                          "description": "Query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading \"?\". Defaults to #{query}.",
                          "type": "string"
                        },
                        "statusCode": {
                          "description": "HTTP redirect code. The redirect is either permanent (HTTP_301) or temporary (HTTP_302).",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "targetGroupArn": {
                    "description": "ARN of the Target Group to which to route traffic. Specify only if type is forward and you want to route to a single target group. To route to one or more target groups, use a forward block instead.",
                    "type": "string"
                  },
                  "targetGroupArnRef": {
                    "description": "Reference to a LBTargetGroup to populate targetGroupArn.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "targetGroupArnSelector": {
                    "description": "Selector for a LBTargetGroup to populate targetGroupArn.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "type": {
                    "description": "Type of routing action. Valid values are forward, redirect, fixed-response, authenticate-cognito and authenticate-oidc.",
                    "type": "string"
                  }
                }
              }
            },
            "loadBalancerArn": {
              "description": "ARN of the load balancer.",
              "type": "string"
            },
            "loadBalancerArnRef": {
              "description": "Reference to a LB to populate loadBalancerArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "loadBalancerArnSelector": {
              "description": "Selector for a LB to populate loadBalancerArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "port": {
              "description": "Port on which the load balancer is listening. Not valid for Gateway Load Balancers.",
              "type": "number"
            },
            "protocol": {
              "description": "Protocol for connections from clients to the load balancer. For Application Load Balancers, valid values are HTTP and HTTPS, with a default of HTTP. For Network Load Balancers, valid values are TCP, TLS, UDP, and TCP_UDP. Not valid to use UDP or TCP_UDP if dual-stack mode is enabled. Not valid for Gateway Load Balancers.",
              "type": "string"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "sslPolicy": {
              "description": "Name of the SSL Policy for the listener. Required if protocol is HTTPS or TLS.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "alpnPolicy": {
              "description": "Name of the Application-Layer Protocol Negotiation (ALPN) policy. Can be set if protocol is TLS. Valid values are HTTP1Only, HTTP2Only, HTTP2Optional, HTTP2Preferred, and None.",
              "type": "string"
            },
            "certificateArn": {
              "description": "ARN of the default SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. For adding additional SSL certificates, see the aws_lb_listener_certificate resource.",
              "type": "string"
            },
            "defaultAction": {
              "description": "Configuration block for default actions. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "authenticateCognito": {
                    "description": "Configuration block for using Amazon Cognito to authenticate users. Specify only when type is authenticate-cognito. Detailed below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "authenticationRequestExtraParams": {
                          "description": "Query parameters to include in the redirect request to the authorization endpoint. Max: 10. Detailed below.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "onUnauthenticatedRequest": {
                          "description": "Behavior if the user is not authenticated. Valid values are deny, allow and authenticate.",
                          "type": "string"
                        },
                        "scope": {
                          "description": "Set of user claims to be requested from the IdP.",
                          "type": "string"
                        },
                        "sessionCookieName": {
                          "description": "Name of the cookie used to maintain session information.",
                          "type": "string"
                        },
                        "sessionTimeout": {
                          "description": "Maximum duration of the authentication session, in seconds.",
                          "type": "number"
                        },
                        "userPoolArn": {
                          "description": "ARN of the Cognito user pool.",
                          "type": "string"
                        },
                        "userPoolClientId": {
                          "description": "ID of the Cognito user pool client.",
                          "type": "string"
                        },
                        "userPoolDomain": {
                          "description": "Domain prefix or fully-qualified domain name of the Cognito user pool.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "authenticateOidc": {
                    "description": "Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when type is authenticate-oidc. Detailed below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "authenticationRequestExtraParams": {
                          "description": "Query parameters to include in the redirect request to the authorization endpoint. Max: 10.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "authorizationEndpoint": {
                          "description": "Authorization endpoint of the IdP.",
                          "type": "string"
                        },
                        "clientId": {
                          "description": "OAuth 2.0 client identifier.",
                          "type": "string"
                        },
                        "issuer": {
                          "description": "OIDC issuer identifier of the IdP.",
                          "type": "string"
                        },
                        "onUnauthenticatedRequest": {
                          "description": "Behavior if the user is not authenticated. Valid values: deny, allow and authenticate",
                          "type": "string"
                        },
                        "scope": {
                          "description": "Set of user claims to be requested from the IdP.",
                          "type": "string"
                        },
                        "sessionCookieName": {
                          "description": "Name of the cookie used to maintain session information.",
                          "type": "string"
                        },
                        "sessionTimeout": {
                          "description": "Maximum duration of the authentication session, in seconds.",
                          "type": "number"
                        },
                        "tokenEndpoint": {
                          "description": "Token endpoint of the IdP.",
                          "type": "string"
                        },
                        "userInfoEndpoint": {
                          "description": "User info endpoint of the IdP.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "fixedResponse": {
                    "description": "Information for creating an action that returns a custom HTTP response. Required if type is fixed-response.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "contentType": {
                          "description": "Content type. Valid values are text/plain, text/css, text/html, application/javascript and application/json.",
                          "type": "string"
                        },
                        "messageBody": {
                          "description": "Message body.",
                          "type": "string"
                        },
                        "statusCode": {
                          "description": "HTTP response code. Valid values are 2XX, 4XX, or 5XX.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "forward": {
                    "description": "Configuration block for creating an action that distributes requests among one or more target groups. Specify only if type is forward. If you specify both forward block and target_group_arn attribute, you can specify only one target group using forward and it must be the same target group specified in target_group_arn. Detailed below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "stickiness": {
                          "description": "Configuration block for target group stickiness for the rule. Detailed below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "duration": {
                                "description": "Time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).",
                                "type": "number"
                              },
                              "enabled": {
                                "description": "Whether target group stickiness is enabled. Default is false.",
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "targetGroup": {
                          "description": "Set of 1-5 target group blocks. Detailed below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "weight": {
                                "description": "Weight. The range is 0 to 999.",
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "order": {
                    "description": "Order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first. Valid values are between 1 and 50000.",
                    "type": "number"
                  },
                  "redirect": {
                    "description": "Configuration block for creating a redirect action. Required if type is redirect. Detailed below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "host": {
                          "description": "Hostname. This component is not percent-encoded. The hostname can contain #{host}. Defaults to #{host}.",
                          "type": "string"
                        },
                        "path": {
                          "description": "Absolute path, starting with the leading \"/\". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to /#{path}.",
                          "type": "string"
                        },
                        "port": {
                          "description": "Port. Specify a value from 1 to 65535 or #{port}. Defaults to #{port}.",
                          "type": "string"
                        },
                        "protocol": {
                          "description": "Protocol. Valid values are HTTP, HTTPS, or #{protocol}. Defaults to #{protocol}.",
                          "type": "string"
                        },
                        "query": {
                          "description": "Query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading \"?\". Defaults to #{query}.",
                          "type": "string"
                        },
                        "statusCode": {
                          "description": "HTTP redirect code. The redirect is either permanent (HTTP_301) or temporary (HTTP_302).",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "type": {
                    "description": "Type of routing action. Valid values are forward, redirect, fixed-response, authenticate-cognito and authenticate-oidc.",
                    "type": "string"
                  }
                }
              }
            },
            "port": {
              "description": "Port on which the load balancer is listening. Not valid for Gateway Load Balancers.",
              "type": "number"
            },
            "protocol": {
              "description": "Protocol for connections from clients to the load balancer. For Application Load Balancers, valid values are HTTP and HTTPS, with a default of HTTP. For Network Load Balancers, valid values are TCP, TLS, UDP, and TCP_UDP. Not valid to use UDP or TCP_UDP if dual-stack mode is enabled. Not valid for Gateway Load Balancers.",
              "type": "string"
            },
            "sslPolicy": {
              "description": "Name of the SSL Policy for the listener. Required if protocol is HTTPS or TLS.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.defaultAction) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.defaultAction))",
          "message": "spec.forProvider.defaultAction is a required parameter"
        }
      ]
    }
  }
}