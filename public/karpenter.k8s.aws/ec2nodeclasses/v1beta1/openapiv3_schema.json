{
  "$schema": "http://json-schema.org/schema#",
  "description": "EC2NodeClass is the Schema for the EC2NodeClass API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "karpenter.k8s.aws/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "EC2NodeClass"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "EC2NodeClassSpec is the top level specification for the AWS Karpenter Provider.\nThis will contain configuration necessary to launch instances in AWS.",
      "type": "object",
      "required": [
        "amiFamily",
        "securityGroupSelectorTerms",
        "subnetSelectorTerms"
      ],
      "properties": {
        "amiFamily": {
          "description": "AMIFamily is the AMI family that instances use.",
          "type": "string",
          "enum": [
            "AL2",
            "AL2023",
            "Bottlerocket",
            "Ubuntu",
            "Custom",
            "Windows2019",
            "Windows2022"
          ]
        },
        "amiSelectorTerms": {
          "description": "AMISelectorTerms is a list of or ami selector terms. The terms are ORed.",
          "type": "array",
          "maxItems": 30,
          "items": {
            "description": "AMISelectorTerm defines selection logic for an ami used by Karpenter to launch nodes.\nIf multiple fields are used for selection, the requirements are ANDed.",
            "type": "object",
            "properties": {
              "id": {
                "description": "ID is the ami id in EC2",
                "type": "string",
                "pattern": "ami-[0-9a-z]+"
              },
              "name": {
                "description": "Name is the ami name in EC2.\nThis value is the name field, which is different from the name tag.",
                "type": "string"
              },
              "owner": {
                "description": "Owner is the owner for the ami.\nYou can specify a combination of AWS account IDs, \"self\", \"amazon\", and \"aws-marketplace\"",
                "type": "string"
              },
              "tags": {
                "description": "Tags is a map of key/value tags used to select subnets\nSpecifying '*' for a value selects all values for a given tag key.",
                "type": "object",
                "maxProperties": 20,
                "additionalProperties": {
                  "type": "string"
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "self.all(k, k != '' \u0026\u0026 self[k] != '')",
                    "message": "empty tag keys or values aren't supported"
                  }
                ]
              }
            }
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.all(x, has(x.tags) || has(x.id) || has(x.name))",
              "message": "expected at least one, got none, ['tags', 'id', 'name']"
            },
            {
              "rule": "!self.all(x, has(x.id) \u0026\u0026 (has(x.tags) || has(x.name) || has(x.owner)))",
              "message": "'id' is mutually exclusive, cannot be set with a combination of other fields in amiSelectorTerms"
            }
          ]
        },
        "associatePublicIPAddress": {
          "description": "AssociatePublicIPAddress controls if public IP addresses are assigned to instances that are launched with the nodeclass.",
          "type": "boolean"
        },
        "blockDeviceMappings": {
          "description": "BlockDeviceMappings to be applied to provisioned nodes.",
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "properties": {
              "deviceName": {
                "description": "The device name (for example, /dev/sdh or xvdh).",
                "type": "string"
              },
              "ebs": {
                "description": "EBS contains parameters used to automatically set up EBS volumes when an instance is launched.",
                "type": "object",
                "properties": {
                  "deleteOnTermination": {
                    "description": "DeleteOnTermination indicates whether the EBS volume is deleted on instance termination.",
                    "type": "boolean"
                  },
                  "encrypted": {
                    "description": "Encrypted indicates whether the EBS volume is encrypted. Encrypted volumes can only\nbe attached to instances that support Amazon EBS encryption. If you are creating\na volume from a snapshot, you can't specify an encryption value.",
                    "type": "boolean"
                  },
                  "iops": {
                    "description": "IOPS is the number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes,\nthis represents the number of IOPS that are provisioned for the volume. For\ngp2 volumes, this represents the baseline performance of the volume and the\nrate at which the volume accumulates I/O credits for bursting.\n\n\nThe following are the supported values for each volume type:\n\n\n   * gp3: 3,000-16,000 IOPS\n\n\n   * io1: 100-64,000 IOPS\n\n\n   * io2: 100-64,000 IOPS\n\n\nFor io1 and io2 volumes, we guarantee 64,000 IOPS only for Instances built\non the Nitro System (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances).\nOther instance families guarantee performance up to 32,000 IOPS.\n\n\nThis parameter is supported for io1, io2, and gp3 volumes only. This parameter\nis not supported for gp2, st1, sc1, or standard volumes.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "kmsKeyID": {
                    "description": "KMSKeyID (ARN) of the symmetric Key Management Service (KMS) CMK used for encryption.",
                    "type": "string"
                  },
                  "snapshotID": {
                    "description": "SnapshotID is the ID of an EBS snapshot",
                    "type": "string"
                  },
                  "throughput": {
                    "description": "Throughput to provision for a gp3 volume, with a maximum of 1,000 MiB/s.\nValid Range: Minimum value of 125. Maximum value of 1000.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "volumeSize": {
                    "description": "VolumeSize in `Gi`, `G`, `Ti`, or `T`. You must specify either a snapshot ID or\na volume size. The following are the supported volumes sizes for each volume\ntype:\n\n\n   * gp2 and gp3: 1-16,384\n\n\n   * io1 and io2: 4-16,384\n\n\n   * st1 and sc1: 125-16,384\n\n\n   * standard: 1-1,024",
                    "type": "string",
                    "pattern": "^((?:[1-9][0-9]{0,3}|[1-4][0-9]{4}|[5][0-8][0-9]{3}|59000)Gi|(?:[1-9][0-9]{0,3}|[1-5][0-9]{4}|[6][0-3][0-9]{3}|64000)G|([1-9]||[1-5][0-7]|58)Ti|([1-9]||[1-5][0-9]|6[0-3]|64)T)$"
                  },
                  "volumeType": {
                    "description": "VolumeType of the block device.\nFor more information, see Amazon EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html)\nin the Amazon Elastic Compute Cloud User Guide.",
                    "type": "string",
                    "enum": [
                      "standard",
                      "io1",
                      "io2",
                      "gp2",
                      "sc1",
                      "st1",
                      "gp3"
                    ]
                  }
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "has(self.snapshotID) || has(self.volumeSize)",
                    "message": "snapshotID or volumeSize must be defined"
                  }
                ]
              },
              "rootVolume": {
                "description": "RootVolume is a flag indicating if this device is mounted as kubelet root dir. You can\nconfigure at most one root volume in BlockDeviceMappings.",
                "type": "boolean"
              }
            }
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.filter(x, has(x.rootVolume)?x.rootVolume==true:false).size() \u003c= 1",
              "message": "must have only one blockDeviceMappings with rootVolume"
            }
          ]
        },
        "context": {
          "description": "Context is a Reserved field in EC2 APIs\nhttps://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet.html",
          "type": "string"
        },
        "detailedMonitoring": {
          "description": "DetailedMonitoring controls if detailed monitoring is enabled for instances that are launched",
          "type": "boolean"
        },
        "instanceProfile": {
          "description": "InstanceProfile is the AWS entity that instances use.\nThis field is mutually exclusive from role.\nThe instance profile should already have a role assigned to it that Karpenter\n has PassRole permission on for instance launch using this instanceProfile to succeed.",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "rule": "self != ''",
              "message": "instanceProfile cannot be empty"
            }
          ]
        },
        "instanceStorePolicy": {
          "description": "InstanceStorePolicy specifies how to handle instance-store disks.",
          "type": "string",
          "enum": [
            "RAID0"
          ]
        },
        "metadataOptions": {
          "description": "MetadataOptions for the generated launch template of provisioned nodes.\n\n\nThis specifies the exposure of the Instance Metadata Service to\nprovisioned EC2 nodes. For more information,\nsee Instance Metadata and User Data\n(https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html)\nin the Amazon Elastic Compute Cloud User Guide.\n\n\nRefer to recommended, security best practices\n(https://aws.github.io/aws-eks-best-practices/security/docs/iam/#restrict-access-to-the-instance-profile-assigned-to-the-worker-node)\nfor limiting exposure of Instance Metadata and User Data to pods.\nIf omitted, defaults to httpEndpoint enabled, with httpProtocolIPv6\ndisabled, with httpPutResponseLimit of 2, and with httpTokens\nrequired.",
          "type": "object",
          "default": {
            "httpEndpoint": "enabled",
            "httpProtocolIPv6": "disabled",
            "httpPutResponseHopLimit": 2,
            "httpTokens": "required"
          },
          "properties": {
            "httpEndpoint": {
              "description": "HTTPEndpoint enables or disables the HTTP metadata endpoint on provisioned\nnodes. If metadata options is non-nil, but this parameter is not specified,\nthe default state is \"enabled\".\n\n\nIf you specify a value of \"disabled\", instance metadata will not be accessible\non the node.",
              "type": "string",
              "default": "enabled",
              "enum": [
                "enabled",
                "disabled"
              ]
            },
            "httpProtocolIPv6": {
              "description": "HTTPProtocolIPv6 enables or disables the IPv6 endpoint for the instance metadata\nservice on provisioned nodes. If metadata options is non-nil, but this parameter\nis not specified, the default state is \"disabled\".",
              "type": "string",
              "default": "disabled",
              "enum": [
                "enabled",
                "disabled"
              ]
            },
            "httpPutResponseHopLimit": {
              "description": "HTTPPutResponseHopLimit is the desired HTTP PUT response hop limit for\ninstance metadata requests. The larger the number, the further instance\nmetadata requests can travel. Possible values are integers from 1 to 64.\nIf metadata options is non-nil, but this parameter is not specified, the\ndefault value is 2.",
              "type": "integer",
              "format": "int64",
              "default": 2,
              "maximum": 64,
              "minimum": 1
            },
            "httpTokens": {
              "description": "HTTPTokens determines the state of token usage for instance metadata\nrequests. If metadata options is non-nil, but this parameter is not\nspecified, the default state is \"required\".\n\n\nIf the state is optional, one can choose to retrieve instance metadata with\nor without a signed token header on the request. If one retrieves the IAM\nrole credentials without a token, the version 1.0 role credentials are\nreturned. If one retrieves the IAM role credentials using a valid signed\ntoken, the version 2.0 role credentials are returned.\n\n\nIf the state is \"required\", one must send a signed token header with any\ninstance metadata retrieval requests. In this state, retrieving the IAM\nrole credentials always returns the version 2.0 credentials; the version\n1.0 credentials are not available.",
              "type": "string",
              "default": "required",
              "enum": [
                "required",
                "optional"
              ]
            }
          }
        },
        "role": {
          "description": "Role is the AWS identity that nodes use. This field is immutable.\nThis field is mutually exclusive from instanceProfile.\nMarking this field as immutable avoids concerns around terminating managed instance profiles from running instances.\nThis field may be made mutable in the future, assuming the correct garbage collection and drift handling is implemented\nfor the old instance profiles on an update.",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "rule": "self != ''",
              "message": "role cannot be empty"
            },
            {
              "rule": "self == oldSelf",
              "message": "immutable field changed"
            }
          ]
        },
        "securityGroupSelectorTerms": {
          "description": "SecurityGroupSelectorTerms is a list of or security group selector terms. The terms are ORed.",
          "type": "array",
          "maxItems": 30,
          "items": {
            "description": "SecurityGroupSelectorTerm defines selection logic for a security group used by Karpenter to launch nodes.\nIf multiple fields are used for selection, the requirements are ANDed.",
            "type": "object",
            "properties": {
              "id": {
                "description": "ID is the security group id in EC2",
                "type": "string",
                "pattern": "sg-[0-9a-z]+"
              },
              "name": {
                "description": "Name is the security group name in EC2.\nThis value is the name field, which is different from the name tag.",
                "type": "string"
              },
              "tags": {
                "description": "Tags is a map of key/value tags used to select subnets\nSpecifying '*' for a value selects all values for a given tag key.",
                "type": "object",
                "maxProperties": 20,
                "additionalProperties": {
                  "type": "string"
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "self.all(k, k != '' \u0026\u0026 self[k] != '')",
                    "message": "empty tag keys or values aren't supported"
                  }
                ]
              }
            }
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.size() != 0",
              "message": "securityGroupSelectorTerms cannot be empty"
            },
            {
              "rule": "self.all(x, has(x.tags) || has(x.id) || has(x.name))",
              "message": "expected at least one, got none, ['tags', 'id', 'name']"
            },
            {
              "rule": "!self.all(x, has(x.id) \u0026\u0026 (has(x.tags) || has(x.name)))",
              "message": "'id' is mutually exclusive, cannot be set with a combination of other fields in securityGroupSelectorTerms"
            },
            {
              "rule": "!self.all(x, has(x.name) \u0026\u0026 (has(x.tags) || has(x.id)))",
              "message": "'name' is mutually exclusive, cannot be set with a combination of other fields in securityGroupSelectorTerms"
            }
          ]
        },
        "subnetSelectorTerms": {
          "description": "SubnetSelectorTerms is a list of or subnet selector terms. The terms are ORed.",
          "type": "array",
          "maxItems": 30,
          "items": {
            "description": "SubnetSelectorTerm defines selection logic for a subnet used by Karpenter to launch nodes.\nIf multiple fields are used for selection, the requirements are ANDed.",
            "type": "object",
            "properties": {
              "id": {
                "description": "ID is the subnet id in EC2",
                "type": "string",
                "pattern": "subnet-[0-9a-z]+"
              },
              "tags": {
                "description": "Tags is a map of key/value tags used to select subnets\nSpecifying '*' for a value selects all values for a given tag key.",
                "type": "object",
                "maxProperties": 20,
                "additionalProperties": {
                  "type": "string"
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "self.all(k, k != '' \u0026\u0026 self[k] != '')",
                    "message": "empty tag keys or values aren't supported"
                  }
                ]
              }
            }
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.size() != 0",
              "message": "subnetSelectorTerms cannot be empty"
            },
            {
              "rule": "self.all(x, has(x.tags) || has(x.id))",
              "message": "expected at least one, got none, ['tags', 'id']"
            },
            {
              "rule": "!self.all(x, has(x.id) \u0026\u0026 has(x.tags))",
              "message": "'id' is mutually exclusive, cannot be set with a combination of other fields in subnetSelectorTerms"
            }
          ]
        },
        "tags": {
          "description": "Tags to be applied on ec2 resources like instances and launch templates.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.all(k, k != '')",
              "message": "empty tag keys aren't supported"
            },
            {
              "rule": "self.all(k, !k.startsWith('kubernetes.io/cluster') )",
              "message": "tag contains a restricted tag matching kubernetes.io/cluster/"
            },
            {
              "rule": "self.all(k, k != 'karpenter.sh/nodepool')",
              "message": "tag contains a restricted tag matching karpenter.sh/nodepool"
            },
            {
              "rule": "self.all(k, k !='karpenter.sh/managed-by')",
              "message": "tag contains a restricted tag matching karpenter.sh/managed-by"
            },
            {
              "rule": "self.all(k, k !='karpenter.sh/nodeclaim')",
              "message": "tag contains a restricted tag matching karpenter.sh/nodeclaim"
            },
            {
              "rule": "self.all(k, k !='karpenter.k8s.aws/ec2nodeclass')",
              "message": "tag contains a restricted tag matching karpenter.k8s.aws/ec2nodeclass"
            }
          ]
        },
        "userData": {
          "description": "UserData to be applied to the provisioned nodes.\nIt must be in the appropriate format based on the AMIFamily in use. Karpenter will merge certain fields into\nthis UserData to ensure nodes are being provisioned with the correct configuration.",
          "type": "string"
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "self.amiFamily == 'Custom' ? self.amiSelectorTerms.size() != 0 : true",
          "message": "amiSelectorTerms is required when amiFamily == 'Custom'"
        },
        {
          "rule": "(has(self.role) \u0026\u0026 !has(self.instanceProfile)) || (!has(self.role) \u0026\u0026 has(self.instanceProfile))",
          "message": "must specify exactly one of ['role', 'instanceProfile']"
        },
        {
          "rule": "(has(oldSelf.role) \u0026\u0026 has(self.role)) || (has(oldSelf.instanceProfile) \u0026\u0026 has(self.instanceProfile))",
          "message": "changing from 'instanceProfile' to 'role' is not supported. You must delete and recreate this node class if you want to change this."
        }
      ]
    }
  }
}