{
  "$schema": "http://json-schema.org/schema#",
  "description": "Cluster is the Schema for the clusters API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "cluster.x-k8s.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "Cluster"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. \n Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "ClusterSpec defines the desired state of Cluster.",
      "type": "object",
      "properties": {
        "clusterNetwork": {
          "description": "Cluster network configuration.",
          "type": "object",
          "properties": {
            "apiServerPort": {
              "description": "APIServerPort specifies the port the API Server should bind to.\nDefaults to 6443.",
              "type": "integer",
              "format": "int32"
            },
            "pods": {
              "description": "The network ranges from which Pod networks are allocated.",
              "type": "object",
              "required": [
                "cidrBlocks"
              ],
              "properties": {
                "cidrBlocks": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "serviceDomain": {
              "description": "Domain name for services.",
              "type": "string"
            },
            "services": {
              "description": "The network ranges from which service VIPs are allocated.",
              "type": "object",
              "required": [
                "cidrBlocks"
              ],
              "properties": {
                "cidrBlocks": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "controlPlaneEndpoint": {
          "description": "ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.",
          "type": "object",
          "required": [
            "host",
            "port"
          ],
          "properties": {
            "host": {
              "description": "The hostname on which the API server is serving.",
              "type": "string"
            },
            "port": {
              "description": "The port on which the API server is serving.",
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "controlPlaneRef": {
          "description": "ControlPlaneRef is an optional reference to a provider-specific resource that holds\nthe details for provisioning the Control Plane for a Cluster.",
          "type": "object",
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "fieldPath": {
              "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type": "string"
            },
            "name": {
              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": "string"
            },
            "resourceVersion": {
              "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "uid": {
              "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
              "type": "string"
            }
          },
          "x-kubernetes-map-type": "atomic"
        },
        "infrastructureRef": {
          "description": "InfrastructureRef is a reference to a provider-specific resource that holds the details\nfor provisioning infrastructure for a cluster in said provider.",
          "type": "object",
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "fieldPath": {
              "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type": "string"
            },
            "name": {
              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": "string"
            },
            "resourceVersion": {
              "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "uid": {
              "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
              "type": "string"
            }
          },
          "x-kubernetes-map-type": "atomic"
        },
        "paused": {
          "description": "Paused can be used to prevent controllers from processing the Cluster and all its associated objects.",
          "type": "boolean"
        },
        "topology": {
          "description": "This encapsulates the topology for the cluster.\nNOTE: It is required to enable the ClusterTopology\nfeature gate flag to activate managed topologies support;\nthis feature is highly experimental, and parts of it might still be not implemented.",
          "type": "object",
          "required": [
            "class",
            "version"
          ],
          "properties": {
            "class": {
              "description": "The name of the ClusterClass object to create the topology.",
              "type": "string"
            },
            "controlPlane": {
              "description": "ControlPlane describes the cluster control plane.",
              "type": "object",
              "properties": {
                "machineHealthCheck": {
                  "description": "MachineHealthCheck allows to enable, disable and override\nthe MachineHealthCheck configuration in the ClusterClass for this control plane.",
                  "type": "object",
                  "properties": {
                    "enable": {
                      "description": "Enable controls if a MachineHealthCheck should be created for the target machines.\n\n\nIf false: No MachineHealthCheck will be created.\n\n\nIf not set(default): A MachineHealthCheck will be created if it is defined here or\n in the associated ClusterClass. If no MachineHealthCheck is defined then none will be created.\n\n\nIf true: A MachineHealthCheck is guaranteed to be created. Cluster validation will\nblock if `enable` is true and no MachineHealthCheck definition is available.",
                      "type": "boolean"
                    },
                    "maxUnhealthy": {
                      "description": "Any further remediation is only allowed if at most \"MaxUnhealthy\" machines selected by\n\"selector\" are not healthy.",
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "x-kubernetes-int-or-string": true
                    },
                    "nodeStartupTimeout": {
                      "description": "NodeStartupTimeout allows to set the maximum time for MachineHealthCheck\nto consider a Machine unhealthy if a corresponding Node isn't associated\nthrough a `Spec.ProviderID` field.\n\n\nThe duration set in this field is compared to the greatest of:\n- Cluster's infrastructure and control plane ready condition timestamp (if and when available)\n- Machine's infrastructure ready condition timestamp (if and when available)\n- Machine's metadata creation timestamp\n\n\nDefaults to 10 minutes.\nIf you wish to disable this feature, set the value explicitly to 0.",
                      "type": "string"
                    },
                    "remediationTemplate": {
                      "description": "RemediationTemplate is a reference to a remediation template\nprovided by an infrastructure provider.\n\n\nThis field is completely optional, when filled, the MachineHealthCheck controller\ncreates a new object from the template referenced and hands off remediation of the machine to\na controller that lives outside of Cluster API.",
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "description": "API version of the referent.",
                          "type": "string"
                        },
                        "fieldPath": {
                          "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                          "type": "string"
                        },
                        "resourceVersion": {
                          "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                          "type": "string"
                        },
                        "uid": {
                          "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                          "type": "string"
                        }
                      },
                      "x-kubernetes-map-type": "atomic"
                    },
                    "unhealthyConditions": {
                      "description": "UnhealthyConditions contains a list of the conditions that determine\nwhether a node is considered unhealthy. The conditions are combined in a\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy.",
                      "type": "array",
                      "items": {
                        "description": "UnhealthyCondition represents a Node condition type and value with a timeout\nspecified as a duration.  When the named condition has been in the given\nstatus for at least the timeout value, a node is considered unhealthy.",
                        "type": "object",
                        "required": [
                          "status",
                          "timeout",
                          "type"
                        ],
                        "properties": {
                          "status": {
                            "type": "string",
                            "minLength": 1
                          },
                          "timeout": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    },
                    "unhealthyRange": {
                      "description": "Any further remediation is only allowed if the number of machines selected by \"selector\" as not healthy\nis within the range of \"UnhealthyRange\". Takes precedence over MaxUnhealthy.\nEg. \"[3-5]\" - This means that remediation will be allowed only when:\n(a) there are at least 3 unhealthy machines (and)\n(b) there are at most 5 unhealthy machines",
                      "type": "string",
                      "pattern": "^\\[[0-9]+-[0-9]+\\]$"
                    }
                  }
                },
                "metadata": {
                  "description": "Metadata is the metadata applied to the ControlPlane and the Machines of the ControlPlane\nif the ControlPlaneTemplate referenced by the ClusterClass is machine based. If not, it\nis applied only to the ControlPlane.\nAt runtime this metadata is merged with the corresponding metadata from the ClusterClass.",
                  "type": "object",
                  "properties": {
                    "annotations": {
                      "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "labels": {
                      "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "nodeDeletionTimeout": {
                  "description": "NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine\nhosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely.\nDefaults to 10 seconds.",
                  "type": "string"
                },
                "nodeDrainTimeout": {
                  "description": "NodeDrainTimeout is the total amount of time that the controller will spend on draining a node.\nThe default value is 0, meaning that the node can be drained without any time limitations.\nNOTE: NodeDrainTimeout is different from `kubectl drain --timeout`",
                  "type": "string"
                },
                "nodeVolumeDetachTimeout": {
                  "description": "NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes\nto be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.",
                  "type": "string"
                },
                "replicas": {
                  "description": "Replicas is the number of control plane nodes.\nIf the value is nil, the ControlPlane object is created without the number of Replicas\nand it's assumed that the control plane controller does not implement support for this field.\nWhen specified against a control plane provider that lacks support for this field, this value will be ignored.",
                  "type": "integer",
                  "format": "int32"
                },
                "variables": {
                  "description": "Variables can be used to customize the ControlPlane through patches.",
                  "type": "object",
                  "properties": {
                    "overrides": {
                      "description": "Overrides can be used to override Cluster level variables.",
                      "type": "array",
                      "items": {
                        "description": "ClusterVariable can be used to customize the Cluster through patches. Each ClusterVariable is associated with a\nVariable definition in the ClusterClass `status` variables.",
                        "type": "object",
                        "required": [
                          "name",
                          "value"
                        ],
                        "properties": {
                          "definitionFrom": {
                            "description": "DefinitionFrom specifies where the definition of this Variable is from. DefinitionFrom is `inline` when the\ndefinition is from the ClusterClass `.spec.variables` or the name of a patch defined in the ClusterClass\n`.spec.patches` where the patch is external and provides external variables.\nThis field is mandatory if the variable has `DefinitionsConflict: true` in ClusterClass `status.variables[]`",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the variable.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value of the variable.\nNote: the value will be validated against the schema of the corresponding ClusterClassVariable\nfrom the ClusterClass.\nNote: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a\nhard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools,\ni.e. it is not possible to have no type field.\nRef: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111",
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "rolloutAfter": {
              "description": "RolloutAfter performs a rollout of the entire cluster one component at a time,\ncontrol plane first and then machine deployments.\n\n\nDeprecated: This field has no function and is going to be removed in the next apiVersion.",
              "type": "string",
              "format": "date-time"
            },
            "variables": {
              "description": "Variables can be used to customize the Cluster through\npatches. They must comply to the corresponding\nVariableClasses defined in the ClusterClass.",
              "type": "array",
              "items": {
                "description": "ClusterVariable can be used to customize the Cluster through patches. Each ClusterVariable is associated with a\nVariable definition in the ClusterClass `status` variables.",
                "type": "object",
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "definitionFrom": {
                    "description": "DefinitionFrom specifies where the definition of this Variable is from. DefinitionFrom is `inline` when the\ndefinition is from the ClusterClass `.spec.variables` or the name of a patch defined in the ClusterClass\n`.spec.patches` where the patch is external and provides external variables.\nThis field is mandatory if the variable has `DefinitionsConflict: true` in ClusterClass `status.variables[]`",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the variable.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of the variable.\nNote: the value will be validated against the schema of the corresponding ClusterClassVariable\nfrom the ClusterClass.\nNote: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a\nhard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools,\ni.e. it is not possible to have no type field.\nRef: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111",
                    "x-kubernetes-preserve-unknown-fields": true
                  }
                }
              }
            },
            "version": {
              "description": "The Kubernetes version of the cluster.",
              "type": "string"
            },
            "workers": {
              "description": "Workers encapsulates the different constructs that form the worker nodes\nfor the cluster.",
              "type": "object",
              "properties": {
                "machineDeployments": {
                  "description": "MachineDeployments is a list of machine deployments in the cluster.",
                  "type": "array",
                  "items": {
                    "description": "MachineDeploymentTopology specifies the different parameters for a set of worker nodes in the topology.\nThis set of nodes is managed by a MachineDeployment object whose lifecycle is managed by the Cluster controller.",
                    "type": "object",
                    "required": [
                      "class",
                      "name"
                    ],
                    "properties": {
                      "class": {
                        "description": "Class is the name of the MachineDeploymentClass used to create the set of worker nodes.\nThis should match one of the deployment classes defined in the ClusterClass object\nmentioned in the `Cluster.Spec.Class` field.",
                        "type": "string"
                      },
                      "failureDomain": {
                        "description": "FailureDomain is the failure domain the machines will be created in.\nMust match a key in the FailureDomains map stored on the cluster object.",
                        "type": "string"
                      },
                      "machineHealthCheck": {
                        "description": "MachineHealthCheck allows to enable, disable and override\nthe MachineHealthCheck configuration in the ClusterClass for this MachineDeployment.",
                        "type": "object",
                        "properties": {
                          "enable": {
                            "description": "Enable controls if a MachineHealthCheck should be created for the target machines.\n\n\nIf false: No MachineHealthCheck will be created.\n\n\nIf not set(default): A MachineHealthCheck will be created if it is defined here or\n in the associated ClusterClass. If no MachineHealthCheck is defined then none will be created.\n\n\nIf true: A MachineHealthCheck is guaranteed to be created. Cluster validation will\nblock if `enable` is true and no MachineHealthCheck definition is available.",
                            "type": "boolean"
                          },
                          "maxUnhealthy": {
                            "description": "Any further remediation is only allowed if at most \"MaxUnhealthy\" machines selected by\n\"selector\" are not healthy.",
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          },
                          "nodeStartupTimeout": {
                            "description": "NodeStartupTimeout allows to set the maximum time for MachineHealthCheck\nto consider a Machine unhealthy if a corresponding Node isn't associated\nthrough a `Spec.ProviderID` field.\n\n\nThe duration set in this field is compared to the greatest of:\n- Cluster's infrastructure and control plane ready condition timestamp (if and when available)\n- Machine's infrastructure ready condition timestamp (if and when available)\n- Machine's metadata creation timestamp\n\n\nDefaults to 10 minutes.\nIf you wish to disable this feature, set the value explicitly to 0.",
                            "type": "string"
                          },
                          "remediationTemplate": {
                            "description": "RemediationTemplate is a reference to a remediation template\nprovided by an infrastructure provider.\n\n\nThis field is completely optional, when filled, the MachineHealthCheck controller\ncreates a new object from the template referenced and hands off remediation of the machine to\na controller that lives outside of Cluster API.",
                            "type": "object",
                            "properties": {
                              "apiVersion": {
                                "description": "API version of the referent.",
                                "type": "string"
                              },
                              "fieldPath": {
                                "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                                "type": "string"
                              },
                              "kind": {
                                "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                                "type": "string"
                              },
                              "resourceVersion": {
                                "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                                "type": "string"
                              },
                              "uid": {
                                "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "unhealthyConditions": {
                            "description": "UnhealthyConditions contains a list of the conditions that determine\nwhether a node is considered unhealthy. The conditions are combined in a\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy.",
                            "type": "array",
                            "items": {
                              "description": "UnhealthyCondition represents a Node condition type and value with a timeout\nspecified as a duration.  When the named condition has been in the given\nstatus for at least the timeout value, a node is considered unhealthy.",
                              "type": "object",
                              "required": [
                                "status",
                                "timeout",
                                "type"
                              ],
                              "properties": {
                                "status": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "timeout": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string",
                                  "minLength": 1
                                }
                              }
                            }
                          },
                          "unhealthyRange": {
                            "description": "Any further remediation is only allowed if the number of machines selected by \"selector\" as not healthy\nis within the range of \"UnhealthyRange\". Takes precedence over MaxUnhealthy.\nEg. \"[3-5]\" - This means that remediation will be allowed only when:\n(a) there are at least 3 unhealthy machines (and)\n(b) there are at most 5 unhealthy machines",
                            "type": "string",
                            "pattern": "^\\[[0-9]+-[0-9]+\\]$"
                          }
                        }
                      },
                      "metadata": {
                        "description": "Metadata is the metadata applied to the MachineDeployment and the machines of the MachineDeployment.\nAt runtime this metadata is merged with the corresponding metadata from the ClusterClass.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "minReadySeconds": {
                        "description": "Minimum number of seconds for which a newly created machine should\nbe ready.\nDefaults to 0 (machine will be considered available as soon as it\nis ready)",
                        "type": "integer",
                        "format": "int32"
                      },
                      "name": {
                        "description": "Name is the unique identifier for this MachineDeploymentTopology.\nThe value is used with other unique identifiers to create a MachineDeployment's Name\n(e.g. cluster's name, etc). In case the name is greater than the allowed maximum length,\nthe values are hashed together.",
                        "type": "string"
                      },
                      "nodeDeletionTimeout": {
                        "description": "NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine\nhosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely.\nDefaults to 10 seconds.",
                        "type": "string"
                      },
                      "nodeDrainTimeout": {
                        "description": "NodeDrainTimeout is the total amount of time that the controller will spend on draining a node.\nThe default value is 0, meaning that the node can be drained without any time limitations.\nNOTE: NodeDrainTimeout is different from `kubectl drain --timeout`",
                        "type": "string"
                      },
                      "nodeVolumeDetachTimeout": {
                        "description": "NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes\nto be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.",
                        "type": "string"
                      },
                      "replicas": {
                        "description": "Replicas is the number of worker nodes belonging to this set.\nIf the value is nil, the MachineDeployment is created without the number of Replicas (defaulting to 1)\nand it's assumed that an external entity (like cluster autoscaler) is responsible for the management\nof this value.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "strategy": {
                        "description": "The deployment strategy to use to replace existing machines with\nnew ones.",
                        "type": "object",
                        "properties": {
                          "rollingUpdate": {
                            "description": "Rolling update config params. Present only if\nMachineDeploymentStrategyType = RollingUpdate.",
                            "type": "object",
                            "properties": {
                              "deletePolicy": {
                                "description": "DeletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling.\nValid values are \"Random, \"Newest\", \"Oldest\"\nWhen no value is supplied, the default DeletePolicy of MachineSet is used",
                                "type": "string",
                                "enum": [
                                  "Random",
                                  "Newest",
                                  "Oldest"
                                ]
                              },
                              "maxSurge": {
                                "description": "The maximum number of machines that can be scheduled above the\ndesired number of machines.\nValue can be an absolute number (ex: 5) or a percentage of\ndesired machines (ex: 10%).\nThis can not be 0 if MaxUnavailable is 0.\nAbsolute number is calculated from percentage by rounding up.\nDefaults to 1.\nExample: when this is set to 30%, the new MachineSet can be scaled\nup immediately when the rolling update starts, such that the total\nnumber of old and new machines do not exceed 130% of desired\nmachines. Once old machines have been killed, new MachineSet can\nbe scaled up further, ensuring that total number of machines running\nat any time during the update is at most 130% of desired machines.",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              },
                              "maxUnavailable": {
                                "description": "The maximum number of machines that can be unavailable during the update.\nValue can be an absolute number (ex: 5) or a percentage of desired\nmachines (ex: 10%).\nAbsolute number is calculated from percentage by rounding down.\nThis can not be 0 if MaxSurge is 0.\nDefaults to 0.\nExample: when this is set to 30%, the old MachineSet can be scaled\ndown to 70% of desired machines immediately when the rolling update\nstarts. Once new machines are ready, old MachineSet can be scaled\ndown further, followed by scaling up the new MachineSet, ensuring\nthat the total number of machines available at all times\nduring the update is at least 70% of desired machines.",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          },
                          "type": {
                            "description": "Type of deployment. Allowed values are RollingUpdate and OnDelete.\nThe default is RollingUpdate.",
                            "type": "string",
                            "enum": [
                              "RollingUpdate",
                              "OnDelete"
                            ]
                          }
                        }
                      },
                      "variables": {
                        "description": "Variables can be used to customize the MachineDeployment through patches.",
                        "type": "object",
                        "properties": {
                          "overrides": {
                            "description": "Overrides can be used to override Cluster level variables.",
                            "type": "array",
                            "items": {
                              "description": "ClusterVariable can be used to customize the Cluster through patches. Each ClusterVariable is associated with a\nVariable definition in the ClusterClass `status` variables.",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "definitionFrom": {
                                  "description": "DefinitionFrom specifies where the definition of this Variable is from. DefinitionFrom is `inline` when the\ndefinition is from the ClusterClass `.spec.variables` or the name of a patch defined in the ClusterClass\n`.spec.patches` where the patch is external and provides external variables.\nThis field is mandatory if the variable has `DefinitionsConflict: true` in ClusterClass `status.variables[]`",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the variable.",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Value of the variable.\nNote: the value will be validated against the schema of the corresponding ClusterClassVariable\nfrom the ClusterClass.\nNote: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a\nhard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools,\ni.e. it is not possible to have no type field.\nRef: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111",
                                  "x-kubernetes-preserve-unknown-fields": true
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "machinePools": {
                  "description": "MachinePools is a list of machine pools in the cluster.",
                  "type": "array",
                  "items": {
                    "description": "MachinePoolTopology specifies the different parameters for a pool of worker nodes in the topology.\nThis pool of nodes is managed by a MachinePool object whose lifecycle is managed by the Cluster controller.",
                    "type": "object",
                    "required": [
                      "class",
                      "name"
                    ],
                    "properties": {
                      "class": {
                        "description": "Class is the name of the MachinePoolClass used to create the pool of worker nodes.\nThis should match one of the deployment classes defined in the ClusterClass object\nmentioned in the `Cluster.Spec.Class` field.",
                        "type": "string"
                      },
                      "failureDomains": {
                        "description": "FailureDomains is the list of failure domains the machine pool will be created in.\nMust match a key in the FailureDomains map stored on the cluster object.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "metadata": {
                        "description": "Metadata is the metadata applied to the MachinePool.\nAt runtime this metadata is merged with the corresponding metadata from the ClusterClass.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "minReadySeconds": {
                        "description": "Minimum number of seconds for which a newly created machine pool should\nbe ready.\nDefaults to 0 (machine will be considered available as soon as it\nis ready)",
                        "type": "integer",
                        "format": "int32"
                      },
                      "name": {
                        "description": "Name is the unique identifier for this MachinePoolTopology.\nThe value is used with other unique identifiers to create a MachinePool's Name\n(e.g. cluster's name, etc). In case the name is greater than the allowed maximum length,\nthe values are hashed together.",
                        "type": "string"
                      },
                      "nodeDeletionTimeout": {
                        "description": "NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the MachinePool\nhosts after the MachinePool is marked for deletion. A duration of 0 will retry deletion indefinitely.\nDefaults to 10 seconds.",
                        "type": "string"
                      },
                      "nodeDrainTimeout": {
                        "description": "NodeDrainTimeout is the total amount of time that the controller will spend on draining a node.\nThe default value is 0, meaning that the node can be drained without any time limitations.\nNOTE: NodeDrainTimeout is different from `kubectl drain --timeout`",
                        "type": "string"
                      },
                      "nodeVolumeDetachTimeout": {
                        "description": "NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes\nto be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.",
                        "type": "string"
                      },
                      "replicas": {
                        "description": "Replicas is the number of nodes belonging to this pool.\nIf the value is nil, the MachinePool is created without the number of Replicas (defaulting to 1)\nand it's assumed that an external entity (like cluster autoscaler) is responsible for the management\nof this value.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "variables": {
                        "description": "Variables can be used to customize the MachinePool through patches.",
                        "type": "object",
                        "properties": {
                          "overrides": {
                            "description": "Overrides can be used to override Cluster level variables.",
                            "type": "array",
                            "items": {
                              "description": "ClusterVariable can be used to customize the Cluster through patches. Each ClusterVariable is associated with a\nVariable definition in the ClusterClass `status` variables.",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "definitionFrom": {
                                  "description": "DefinitionFrom specifies where the definition of this Variable is from. DefinitionFrom is `inline` when the\ndefinition is from the ClusterClass `.spec.variables` or the name of a patch defined in the ClusterClass\n`.spec.patches` where the patch is external and provides external variables.\nThis field is mandatory if the variable has `DefinitionsConflict: true` in ClusterClass `status.variables[]`",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the variable.",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Value of the variable.\nNote: the value will be validated against the schema of the corresponding ClusterClassVariable\nfrom the ClusterClass.\nNote: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a\nhard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools,\ni.e. it is not possible to have no type field.\nRef: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111",
                                  "x-kubernetes-preserve-unknown-fields": true
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}