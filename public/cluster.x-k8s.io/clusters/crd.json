{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "clusters.cluster.x-k8s.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.17.2"
    }
  },
  "spec": {
    "group": "cluster.x-k8s.io",
    "names": {
      "plural": "clusters",
      "singular": "cluster",
      "shortNames": [
        "cl"
      ],
      "kind": "Cluster",
      "listKind": "ClusterList",
      "categories": [
        "cluster-api"
      ]
    },
    "scope": "Namespaced",
    "versions": [
      {
        "name": "v1alpha3",
        "served": false,
        "storage": false,
        "deprecated": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "Cluster is the Schema for the clusters API.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "spec is the desired state of Cluster.",
                "type": "object",
                "properties": {
                  "clusterNetwork": {
                    "description": "clusterNetwork is the cluster network configuration.",
                    "type": "object",
                    "properties": {
                      "apiServerPort": {
                        "description": "apiServerPort specifies the port the API Server should bind to.\nDefaults to 6443.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "pods": {
                        "description": "pods is the network ranges from which Pod networks are allocated.",
                        "type": "object",
                        "required": [
                          "cidrBlocks"
                        ],
                        "properties": {
                          "cidrBlocks": {
                            "description": "cidrBlocks is a list of CIDR blocks.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "serviceDomain": {
                        "description": "serviceDomain is the domain name for services.",
                        "type": "string"
                      },
                      "services": {
                        "description": "services is the network ranges from which service VIPs are allocated.",
                        "type": "object",
                        "required": [
                          "cidrBlocks"
                        ],
                        "properties": {
                          "cidrBlocks": {
                            "description": "cidrBlocks is a list of CIDR blocks.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "controlPlaneEndpoint": {
                    "description": "controlPlaneEndpoint represents the endpoint used to communicate with the control plane.",
                    "type": "object",
                    "required": [
                      "host",
                      "port"
                    ],
                    "properties": {
                      "host": {
                        "description": "host is the hostname on which the API server is serving.",
                        "type": "string"
                      },
                      "port": {
                        "description": "port is the port on which the API server is serving.",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "controlPlaneRef": {
                    "description": "controlPlaneRef is an optional reference to a provider-specific resource that holds\nthe details for provisioning the Control Plane for a Cluster.",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "fieldPath": {
                        "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                        "type": "string"
                      },
                      "resourceVersion": {
                        "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "infrastructureRef": {
                    "description": "infrastructureRef is a reference to a provider-specific resource that holds the details\nfor provisioning infrastructure for a cluster in said provider.",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "fieldPath": {
                        "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                        "type": "string"
                      },
                      "resourceVersion": {
                        "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "paused": {
                    "description": "paused can be used to prevent controllers from processing the Cluster and all its associated objects.",
                    "type": "boolean"
                  }
                }
              },
              "status": {
                "description": "status is the observed state of Cluster.",
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "conditions defines current service state of the cluster.",
                    "type": "array",
                    "items": {
                      "description": "Condition defines an observation of a Cluster API resource operational state.",
                      "type": "object",
                      "required": [
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "message is a human readable message indicating details about the transition.\nThis field may be empty.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "reason is the reason for the condition's last transition in CamelCase.\nThe specific API may choose whether or not this field is considered a guaranteed API.\nThis field may not be empty.",
                          "type": "string"
                        },
                        "severity": {
                          "description": "severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                          "type": "string"
                        },
                        "status": {
                          "description": "status of the condition, one of True, False, Unknown.",
                          "type": "string"
                        },
                        "type": {
                          "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions\ncan be useful (see .node.status.conditions), the ability to deconflict is important.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "controlPlaneInitialized": {
                    "description": "controlPlaneInitialized defines if the control plane has been initialized.",
                    "type": "boolean"
                  },
                  "controlPlaneReady": {
                    "description": "controlPlaneReady defines if the control plane is ready.",
                    "type": "boolean"
                  },
                  "failureDomains": {
                    "description": "failureDomains is a slice of failure domain objects synced from the infrastructure provider.",
                    "type": "object",
                    "additionalProperties": {
                      "description": "FailureDomainSpec is the Schema for Cluster API failure domains.\nIt allows controllers to understand how many failure domains a cluster can optionally span across.",
                      "type": "object",
                      "properties": {
                        "attributes": {
                          "description": "attributes is a free form map of attributes an infrastructure provider might use or require.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "controlPlane": {
                          "description": "controlPlane determines if this failure domain is suitable for use by control plane machines.",
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "failureMessage": {
                    "description": "failureMessage indicates that there is a fatal problem reconciling the\nstate, and will be set to a descriptive error message.",
                    "type": "string"
                  },
                  "failureReason": {
                    "description": "failureReason indicates that there is a fatal problem reconciling the\nstate, and will be set to a token value suitable for\nprogrammatic interpretation.",
                    "type": "string"
                  },
                  "infrastructureReady": {
                    "description": "infrastructureReady is the state of the infrastructure provider.",
                    "type": "boolean"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration is the latest generation observed by the controller.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "phase": {
                    "description": "phase represents the current phase of cluster actuation.\nE.g. Pending, Running, Terminating, Failed etc.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "Phase",
            "type": "string",
            "description": "Cluster status such as Pending/Provisioning/Provisioned/Deleting/Failed",
            "jsonPath": ".status.phase"
          }
        ]
      },
      {
        "name": "v1alpha4",
        "served": false,
        "storage": false,
        "deprecated": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "Cluster is the Schema for the clusters API.\n\nDeprecated: This type will be removed in one of the next releases.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "spec is the desired state of Cluster.",
                "type": "object",
                "properties": {
                  "clusterNetwork": {
                    "description": "clusterNetwork is the cluster network configuration.",
                    "type": "object",
                    "properties": {
                      "apiServerPort": {
                        "description": "apiServerPort specifies the port the API Server should bind to.\nDefaults to 6443.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "pods": {
                        "description": "pods is the network ranges from which Pod networks are allocated.",
                        "type": "object",
                        "required": [
                          "cidrBlocks"
                        ],
                        "properties": {
                          "cidrBlocks": {
                            "description": "cidrBlocks is a list of CIDR blocks.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "serviceDomain": {
                        "description": "serviceDomain is the domain name for services.",
                        "type": "string"
                      },
                      "services": {
                        "description": "services is the network ranges from which service VIPs are allocated.",
                        "type": "object",
                        "required": [
                          "cidrBlocks"
                        ],
                        "properties": {
                          "cidrBlocks": {
                            "description": "cidrBlocks is a list of CIDR blocks.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "controlPlaneEndpoint": {
                    "description": "controlPlaneEndpoint represents the endpoint used to communicate with the control plane.",
                    "type": "object",
                    "required": [
                      "host",
                      "port"
                    ],
                    "properties": {
                      "host": {
                        "description": "host is the hostname on which the API server is serving.",
                        "type": "string"
                      },
                      "port": {
                        "description": "port is the port on which the API server is serving.",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "controlPlaneRef": {
                    "description": "controlPlaneRef is an optional reference to a provider-specific resource that holds\nthe details for provisioning the Control Plane for a Cluster.",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "fieldPath": {
                        "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                        "type": "string"
                      },
                      "resourceVersion": {
                        "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "infrastructureRef": {
                    "description": "infrastructureRef is a reference to a provider-specific resource that holds the details\nfor provisioning infrastructure for a cluster in said provider.",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "fieldPath": {
                        "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                        "type": "string"
                      },
                      "resourceVersion": {
                        "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "paused": {
                    "description": "paused can be used to prevent controllers from processing the Cluster and all its associated objects.",
                    "type": "boolean"
                  },
                  "topology": {
                    "description": "topology encapsulates the topology for the cluster.\nNOTE: It is required to enable the ClusterTopology\nfeature gate flag to activate managed topologies support;\nthis feature is highly experimental, and parts of it might still be not implemented.",
                    "type": "object",
                    "required": [
                      "class",
                      "version"
                    ],
                    "properties": {
                      "class": {
                        "description": "class is the name of the ClusterClass object to create the topology.",
                        "type": "string"
                      },
                      "controlPlane": {
                        "description": "controlPlane describes the cluster control plane.",
                        "type": "object",
                        "properties": {
                          "metadata": {
                            "description": "metadata is the metadata applied to the machines of the ControlPlane.\nAt runtime this metadata is merged with the corresponding metadata from the ClusterClass.\n\nThis field is supported if and only if the control plane provider template\nreferenced in the ClusterClass is Machine based.",
                            "type": "object",
                            "properties": {
                              "annotations": {
                                "description": "annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "labels": {
                                "description": "labels is a map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "replicas": {
                            "description": "replicas is the number of control plane nodes.\nIf the value is nil, the ControlPlane object is created without the number of Replicas\nand it's assumed that the control plane controller does not implement support for this field.\nWhen specified against a control plane provider that lacks support for this field, this value will be ignored.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      },
                      "rolloutAfter": {
                        "description": "rolloutAfter performs a rollout of the entire cluster one component at a time,\ncontrol plane first and then machine deployments.",
                        "type": "string",
                        "format": "date-time"
                      },
                      "version": {
                        "description": "version is the Kubernetes version of the cluster.",
                        "type": "string"
                      },
                      "workers": {
                        "description": "workers encapsulates the different constructs that form the worker nodes\nfor the cluster.",
                        "type": "object",
                        "properties": {
                          "machineDeployments": {
                            "description": "machineDeployments is a list of machine deployments in the cluster.",
                            "type": "array",
                            "items": {
                              "description": "MachineDeploymentTopology specifies the different parameters for a set of worker nodes in the topology.\nThis set of nodes is managed by a MachineDeployment object whose lifecycle is managed by the Cluster controller.",
                              "type": "object",
                              "required": [
                                "class",
                                "name"
                              ],
                              "properties": {
                                "class": {
                                  "description": "class is the name of the MachineDeploymentClass used to create the set of worker nodes.\nThis should match one of the deployment classes defined in the ClusterClass object\nmentioned in the `Cluster.Spec.Class` field.",
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "metadata is the metadata applied to the machines of the MachineDeployment.\nAt runtime this metadata is merged with the corresponding metadata from the ClusterClass.",
                                  "type": "object",
                                  "properties": {
                                    "annotations": {
                                      "description": "annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    },
                                    "labels": {
                                      "description": "labels is a map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "name": {
                                  "description": "name is the unique identifier for this MachineDeploymentTopology.\nThe value is used with other unique identifiers to create a MachineDeployment's Name\n(e.g. cluster's name, etc). In case the name is greater than the allowed maximum length,\nthe values are hashed together.",
                                  "type": "string"
                                },
                                "replicas": {
                                  "description": "replicas is the number of worker nodes belonging to this set.\nIf the value is nil, the MachineDeployment is created without the number of Replicas (defaulting to zero)\nand it's assumed that an external entity (like cluster autoscaler) is responsible for the management\nof this value.",
                                  "type": "integer",
                                  "format": "int32"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "status": {
                "description": "status is the observed state of Cluster.",
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "conditions defines current service state of the cluster.",
                    "type": "array",
                    "items": {
                      "description": "Condition defines an observation of a Cluster API resource operational state.",
                      "type": "object",
                      "required": [
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "message is a human readable message indicating details about the transition.\nThis field may be empty.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "reason is the reason for the condition's last transition in CamelCase.\nThe specific API may choose whether or not this field is considered a guaranteed API.\nThis field may not be empty.",
                          "type": "string"
                        },
                        "severity": {
                          "description": "severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                          "type": "string"
                        },
                        "status": {
                          "description": "status of the condition, one of True, False, Unknown.",
                          "type": "string"
                        },
                        "type": {
                          "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions\ncan be useful (see .node.status.conditions), the ability to deconflict is important.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "controlPlaneReady": {
                    "description": "controlPlaneReady defines if the control plane is ready.",
                    "type": "boolean"
                  },
                  "failureDomains": {
                    "description": "failureDomains is a slice of failure domain objects synced from the infrastructure provider.",
                    "type": "object",
                    "additionalProperties": {
                      "description": "FailureDomainSpec is the Schema for Cluster API failure domains.\nIt allows controllers to understand how many failure domains a cluster can optionally span across.",
                      "type": "object",
                      "properties": {
                        "attributes": {
                          "description": "attributes is a free form map of attributes an infrastructure provider might use or require.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "controlPlane": {
                          "description": "controlPlane determines if this failure domain is suitable for use by control plane machines.",
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "failureMessage": {
                    "description": "failureMessage indicates that there is a fatal problem reconciling the\nstate, and will be set to a descriptive error message.",
                    "type": "string"
                  },
                  "failureReason": {
                    "description": "failureReason indicates that there is a fatal problem reconciling the\nstate, and will be set to a token value suitable for\nprogrammatic interpretation.",
                    "type": "string"
                  },
                  "infrastructureReady": {
                    "description": "infrastructureReady is the state of the infrastructure provider.",
                    "type": "boolean"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration is the latest generation observed by the controller.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "phase": {
                    "description": "phase represents the current phase of cluster actuation.\nE.g. Pending, Running, Terminating, Failed etc.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "Age",
            "type": "date",
            "description": "Time duration since creation of Cluster",
            "jsonPath": ".metadata.creationTimestamp"
          },
          {
            "name": "Phase",
            "type": "string",
            "description": "Cluster status such as Pending/Provisioning/Provisioned/Deleting/Failed",
            "jsonPath": ".status.phase"
          }
        ]
      },
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "Cluster is the Schema for the clusters API.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "spec is the desired state of Cluster.",
                "type": "object",
                "properties": {
                  "availabilityGates": {
                    "description": "availabilityGates specifies additional conditions to include when evaluating Cluster Available condition.\n\nIf this field is not defined and the Cluster implements a managed topology, availabilityGates\nfrom the corresponding ClusterClass will be used, if any.\n\nNOTE: this field is considered only for computing v1beta2 conditions.",
                    "type": "array",
                    "maxItems": 32,
                    "items": {
                      "description": "ClusterAvailabilityGate contains the type of a Cluster condition to be used as availability gate.",
                      "type": "object",
                      "required": [
                        "conditionType"
                      ],
                      "properties": {
                        "conditionType": {
                          "description": "conditionType refers to a condition with matching type in the Cluster's condition list.\nIf the conditions doesn't exist, it will be treated as unknown.\nNote: Both Cluster API conditions or conditions added by 3rd party controllers can be used as availability gates.",
                          "type": "string",
                          "maxLength": 316,
                          "minLength": 1,
                          "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                        },
                        "polarity": {
                          "description": "polarity of the conditionType specified in this availabilityGate.\nValid values are Positive, Negative and omitted.\nWhen omitted, the default behaviour will be Positive.\nA positive polarity means that the condition should report a true status under normal conditions.\nA negative polarity means that the condition should report a false status under normal conditions.",
                          "type": "string",
                          "enum": [
                            "Positive",
                            "Negative"
                          ]
                        }
                      }
                    },
                    "x-kubernetes-list-map-keys": [
                      "conditionType"
                    ],
                    "x-kubernetes-list-type": "map"
                  },
                  "clusterNetwork": {
                    "description": "clusterNetwork represents the cluster network configuration.",
                    "type": "object",
                    "properties": {
                      "apiServerPort": {
                        "description": "apiServerPort specifies the port the API Server should bind to.\nDefaults to 6443.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "pods": {
                        "description": "pods is the network ranges from which Pod networks are allocated.",
                        "type": "object",
                        "required": [
                          "cidrBlocks"
                        ],
                        "properties": {
                          "cidrBlocks": {
                            "description": "cidrBlocks is a list of CIDR blocks.",
                            "type": "array",
                            "maxItems": 100,
                            "items": {
                              "type": "string",
                              "maxLength": 43,
                              "minLength": 1
                            }
                          }
                        }
                      },
                      "serviceDomain": {
                        "description": "serviceDomain is the domain name for services.",
                        "type": "string",
                        "maxLength": 253,
                        "minLength": 1
                      },
                      "services": {
                        "description": "services is the network ranges from which service VIPs are allocated.",
                        "type": "object",
                        "required": [
                          "cidrBlocks"
                        ],
                        "properties": {
                          "cidrBlocks": {
                            "description": "cidrBlocks is a list of CIDR blocks.",
                            "type": "array",
                            "maxItems": 100,
                            "items": {
                              "type": "string",
                              "maxLength": 43,
                              "minLength": 1
                            }
                          }
                        }
                      }
                    }
                  },
                  "controlPlaneEndpoint": {
                    "description": "controlPlaneEndpoint represents the endpoint used to communicate with the control plane.",
                    "type": "object",
                    "required": [
                      "host",
                      "port"
                    ],
                    "properties": {
                      "host": {
                        "description": "host is the hostname on which the API server is serving.",
                        "type": "string",
                        "maxLength": 512
                      },
                      "port": {
                        "description": "port is the port on which the API server is serving.",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "controlPlaneRef": {
                    "description": "controlPlaneRef is an optional reference to a provider-specific resource that holds\nthe details for provisioning the Control Plane for a Cluster.",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "fieldPath": {
                        "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                        "type": "string"
                      },
                      "resourceVersion": {
                        "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "infrastructureRef": {
                    "description": "infrastructureRef is a reference to a provider-specific resource that holds the details\nfor provisioning infrastructure for a cluster in said provider.",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "fieldPath": {
                        "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                        "type": "string"
                      },
                      "resourceVersion": {
                        "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "paused": {
                    "description": "paused can be used to prevent controllers from processing the Cluster and all its associated objects.",
                    "type": "boolean"
                  },
                  "topology": {
                    "description": "topology encapsulates the topology for the cluster.\nNOTE: It is required to enable the ClusterTopology\nfeature gate flag to activate managed topologies support;\nthis feature is highly experimental, and parts of it might still be not implemented.",
                    "type": "object",
                    "required": [
                      "class",
                      "version"
                    ],
                    "properties": {
                      "class": {
                        "description": "class is the name of the ClusterClass object to create the topology.",
                        "type": "string",
                        "maxLength": 253,
                        "minLength": 1
                      },
                      "classNamespace": {
                        "description": "classNamespace is the namespace of the ClusterClass object to create the topology.\nIf the namespace is empty or not set, it is defaulted to the namespace of the cluster object.\nValue must follow the DNS1123Subdomain syntax.",
                        "type": "string",
                        "maxLength": 253,
                        "minLength": 1,
                        "pattern": "^[a-z0-9](?:[-a-z0-9]*[a-z0-9])?(?:\\.[a-z0-9](?:[-a-z0-9]*[a-z0-9])?)*$"
                      },
                      "controlPlane": {
                        "description": "controlPlane describes the cluster control plane.",
                        "type": "object",
                        "properties": {
                          "machineHealthCheck": {
                            "description": "machineHealthCheck allows to enable, disable and override\nthe MachineHealthCheck configuration in the ClusterClass for this control plane.",
                            "type": "object",
                            "properties": {
                              "enable": {
                                "description": "enable controls if a MachineHealthCheck should be created for the target machines.\n\nIf false: No MachineHealthCheck will be created.\n\nIf not set(default): A MachineHealthCheck will be created if it is defined here or\n in the associated ClusterClass. If no MachineHealthCheck is defined then none will be created.\n\nIf true: A MachineHealthCheck is guaranteed to be created. Cluster validation will\nblock if `enable` is true and no MachineHealthCheck definition is available.",
                                "type": "boolean"
                              },
                              "maxUnhealthy": {
                                "description": "maxUnhealthy specifies the maximum number of unhealthy machines allowed.\nAny further remediation is only allowed if at most \"maxUnhealthy\" machines selected by\n\"selector\" are not healthy.",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              },
                              "nodeStartupTimeout": {
                                "description": "nodeStartupTimeout allows to set the maximum time for MachineHealthCheck\nto consider a Machine unhealthy if a corresponding Node isn't associated\nthrough a `Spec.ProviderID` field.\n\nThe duration set in this field is compared to the greatest of:\n- Cluster's infrastructure ready condition timestamp (if and when available)\n- Control Plane's initialized condition timestamp (if and when available)\n- Machine's infrastructure ready condition timestamp (if and when available)\n- Machine's metadata creation timestamp\n\nDefaults to 10 minutes.\nIf you wish to disable this feature, set the value explicitly to 0.",
                                "type": "string"
                              },
                              "remediationTemplate": {
                                "description": "remediationTemplate is a reference to a remediation template\nprovided by an infrastructure provider.\n\nThis field is completely optional, when filled, the MachineHealthCheck controller\ncreates a new object from the template referenced and hands off remediation of the machine to\na controller that lives outside of Cluster API.",
                                "type": "object",
                                "properties": {
                                  "apiVersion": {
                                    "description": "API version of the referent.",
                                    "type": "string"
                                  },
                                  "fieldPath": {
                                    "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.",
                                    "type": "string"
                                  },
                                  "kind": {
                                    "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                                    "type": "string"
                                  },
                                  "resourceVersion": {
                                    "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                                    "type": "string"
                                  },
                                  "uid": {
                                    "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                                    "type": "string"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "unhealthyConditions": {
                                "description": "unhealthyConditions contains a list of the conditions that determine\nwhether a node is considered unhealthy. The conditions are combined in a\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy.",
                                "type": "array",
                                "maxItems": 100,
                                "items": {
                                  "description": "UnhealthyCondition represents a Node condition type and value with a timeout\nspecified as a duration.  When the named condition has been in the given\nstatus for at least the timeout value, a node is considered unhealthy.",
                                  "type": "object",
                                  "required": [
                                    "status",
                                    "timeout",
                                    "type"
                                  ],
                                  "properties": {
                                    "status": {
                                      "description": "status of the condition, one of True, False, Unknown.",
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "timeout": {
                                      "description": "timeout is the duration that a node must be in a given status for,\nafter which the node is considered unhealthy.\nFor example, with a value of \"1h\", the node must match the status\nfor at least 1 hour before being considered unhealthy.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "type of Node condition",
                                      "type": "string",
                                      "minLength": 1
                                    }
                                  }
                                }
                              },
                              "unhealthyRange": {
                                "description": "unhealthyRange specifies the range of unhealthy machines allowed.\nAny further remediation is only allowed if the number of machines selected by \"selector\" as not healthy\nis within the range of \"unhealthyRange\". Takes precedence over maxUnhealthy.\nEg. \"[3-5]\" - This means that remediation will be allowed only when:\n(a) there are at least 3 unhealthy machines (and)\n(b) there are at most 5 unhealthy machines",
                                "type": "string",
                                "maxLength": 32,
                                "minLength": 1,
                                "pattern": "^\\[[0-9]+-[0-9]+\\]$"
                              }
                            }
                          },
                          "metadata": {
                            "description": "metadata is the metadata applied to the ControlPlane and the Machines of the ControlPlane\nif the ControlPlaneTemplate referenced by the ClusterClass is machine based. If not, it\nis applied only to the ControlPlane.\nAt runtime this metadata is merged with the corresponding metadata from the ClusterClass.",
                            "type": "object",
                            "properties": {
                              "annotations": {
                                "description": "annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "labels": {
                                "description": "labels is a map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "nodeDeletionTimeout": {
                            "description": "nodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine\nhosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely.\nDefaults to 10 seconds.",
                            "type": "string"
                          },
                          "nodeDrainTimeout": {
                            "description": "nodeDrainTimeout is the total amount of time that the controller will spend on draining a node.\nThe default value is 0, meaning that the node can be drained without any time limitations.\nNOTE: NodeDrainTimeout is different from `kubectl drain --timeout`",
                            "type": "string"
                          },
                          "nodeVolumeDetachTimeout": {
                            "description": "nodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes\nto be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.",
                            "type": "string"
                          },
                          "readinessGates": {
                            "description": "readinessGates specifies additional conditions to include when evaluating Machine Ready condition.\n\nThis field can be used e.g. to instruct the machine controller to include in the computation for Machine's ready\ncomputation a condition, managed by an external controllers, reporting the status of special software/hardware installed on the Machine.\n\nIf this field is not defined, readinessGates from the corresponding ControlPlaneClass will be used, if any.\n\nNOTE: This field is considered only for computing v1beta2 conditions.\nNOTE: Specific control plane provider implementations might automatically extend the list of readinessGates;\ne.g. the kubeadm control provider adds ReadinessGates for the APIServerPodHealthy, SchedulerPodHealthy conditions, etc.",
                            "type": "array",
                            "maxItems": 32,
                            "items": {
                              "description": "MachineReadinessGate contains the type of a Machine condition to be used as a readiness gate.",
                              "type": "object",
                              "required": [
                                "conditionType"
                              ],
                              "properties": {
                                "conditionType": {
                                  "description": "conditionType refers to a condition with matching type in the Machine's condition list.\nIf the conditions doesn't exist, it will be treated as unknown.\nNote: Both Cluster API conditions or conditions added by 3rd party controllers can be used as readiness gates.",
                                  "type": "string",
                                  "maxLength": 316,
                                  "minLength": 1,
                                  "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                                },
                                "polarity": {
                                  "description": "polarity of the conditionType specified in this readinessGate.\nValid values are Positive, Negative and omitted.\nWhen omitted, the default behaviour will be Positive.\nA positive polarity means that the condition should report a true status under normal conditions.\nA negative polarity means that the condition should report a false status under normal conditions.",
                                  "type": "string",
                                  "enum": [
                                    "Positive",
                                    "Negative"
                                  ]
                                }
                              }
                            },
                            "x-kubernetes-list-map-keys": [
                              "conditionType"
                            ],
                            "x-kubernetes-list-type": "map"
                          },
                          "replicas": {
                            "description": "replicas is the number of control plane nodes.\nIf the value is nil, the ControlPlane object is created without the number of Replicas\nand it's assumed that the control plane controller does not implement support for this field.\nWhen specified against a control plane provider that lacks support for this field, this value will be ignored.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "variables": {
                            "description": "variables can be used to customize the ControlPlane through patches.",
                            "type": "object",
                            "properties": {
                              "overrides": {
                                "description": "overrides can be used to override Cluster level variables.",
                                "type": "array",
                                "maxItems": 1000,
                                "items": {
                                  "description": "ClusterVariable can be used to customize the Cluster through patches. Each ClusterVariable is associated with a\nVariable definition in the ClusterClass `status` variables.",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "definitionFrom": {
                                      "description": "definitionFrom specifies where the definition of this Variable is from.\n\nDeprecated: This field is deprecated, must not be set anymore and is going to be removed in the next apiVersion.",
                                      "type": "string",
                                      "maxLength": 256
                                    },
                                    "name": {
                                      "description": "name of the variable.",
                                      "type": "string",
                                      "maxLength": 256,
                                      "minLength": 1
                                    },
                                    "value": {
                                      "description": "value of the variable.\nNote: the value will be validated against the schema of the corresponding ClusterClassVariable\nfrom the ClusterClass.\nNote: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a\nhard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools,\ni.e. it is not possible to have no type field.\nRef: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111",
                                      "x-kubernetes-preserve-unknown-fields": true
                                    }
                                  }
                                },
                                "x-kubernetes-list-map-keys": [
                                  "name"
                                ],
                                "x-kubernetes-list-type": "map"
                              }
                            }
                          }
                        }
                      },
                      "rolloutAfter": {
                        "description": "rolloutAfter performs a rollout of the entire cluster one component at a time,\ncontrol plane first and then machine deployments.\n\nDeprecated: This field has no function and is going to be removed in the next apiVersion.",
                        "type": "string",
                        "format": "date-time"
                      },
                      "variables": {
                        "description": "variables can be used to customize the Cluster through\npatches. They must comply to the corresponding\nVariableClasses defined in the ClusterClass.",
                        "type": "array",
                        "maxItems": 1000,
                        "items": {
                          "description": "ClusterVariable can be used to customize the Cluster through patches. Each ClusterVariable is associated with a\nVariable definition in the ClusterClass `status` variables.",
                          "type": "object",
                          "required": [
                            "name",
                            "value"
                          ],
                          "properties": {
                            "definitionFrom": {
                              "description": "definitionFrom specifies where the definition of this Variable is from.\n\nDeprecated: This field is deprecated, must not be set anymore and is going to be removed in the next apiVersion.",
                              "type": "string",
                              "maxLength": 256
                            },
                            "name": {
                              "description": "name of the variable.",
                              "type": "string",
                              "maxLength": 256,
                              "minLength": 1
                            },
                            "value": {
                              "description": "value of the variable.\nNote: the value will be validated against the schema of the corresponding ClusterClassVariable\nfrom the ClusterClass.\nNote: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a\nhard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools,\ni.e. it is not possible to have no type field.\nRef: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111",
                              "x-kubernetes-preserve-unknown-fields": true
                            }
                          }
                        },
                        "x-kubernetes-list-map-keys": [
                          "name"
                        ],
                        "x-kubernetes-list-type": "map"
                      },
                      "version": {
                        "description": "version is the Kubernetes version of the cluster.",
                        "type": "string",
                        "maxLength": 256,
                        "minLength": 1
                      },
                      "workers": {
                        "description": "workers encapsulates the different constructs that form the worker nodes\nfor the cluster.",
                        "type": "object",
                        "properties": {
                          "machineDeployments": {
                            "description": "machineDeployments is a list of machine deployments in the cluster.",
                            "type": "array",
                            "maxItems": 2000,
                            "items": {
                              "description": "MachineDeploymentTopology specifies the different parameters for a set of worker nodes in the topology.\nThis set of nodes is managed by a MachineDeployment object whose lifecycle is managed by the Cluster controller.",
                              "type": "object",
                              "required": [
                                "class",
                                "name"
                              ],
                              "properties": {
                                "class": {
                                  "description": "class is the name of the MachineDeploymentClass used to create the set of worker nodes.\nThis should match one of the deployment classes defined in the ClusterClass object\nmentioned in the `Cluster.Spec.Class` field.",
                                  "type": "string",
                                  "maxLength": 256,
                                  "minLength": 1
                                },
                                "failureDomain": {
                                  "description": "failureDomain is the failure domain the machines will be created in.\nMust match a key in the FailureDomains map stored on the cluster object.",
                                  "type": "string",
                                  "maxLength": 256,
                                  "minLength": 1
                                },
                                "machineHealthCheck": {
                                  "description": "machineHealthCheck allows to enable, disable and override\nthe MachineHealthCheck configuration in the ClusterClass for this MachineDeployment.",
                                  "type": "object",
                                  "properties": {
                                    "enable": {
                                      "description": "enable controls if a MachineHealthCheck should be created for the target machines.\n\nIf false: No MachineHealthCheck will be created.\n\nIf not set(default): A MachineHealthCheck will be created if it is defined here or\n in the associated ClusterClass. If no MachineHealthCheck is defined then none will be created.\n\nIf true: A MachineHealthCheck is guaranteed to be created. Cluster validation will\nblock if `enable` is true and no MachineHealthCheck definition is available.",
                                      "type": "boolean"
                                    },
                                    "maxUnhealthy": {
                                      "description": "maxUnhealthy specifies the maximum number of unhealthy machines allowed.\nAny further remediation is only allowed if at most \"maxUnhealthy\" machines selected by\n\"selector\" are not healthy.",
                                      "anyOf": [
                                        {
                                          "type": "integer"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "x-kubernetes-int-or-string": true
                                    },
                                    "nodeStartupTimeout": {
                                      "description": "nodeStartupTimeout allows to set the maximum time for MachineHealthCheck\nto consider a Machine unhealthy if a corresponding Node isn't associated\nthrough a `Spec.ProviderID` field.\n\nThe duration set in this field is compared to the greatest of:\n- Cluster's infrastructure ready condition timestamp (if and when available)\n- Control Plane's initialized condition timestamp (if and when available)\n- Machine's infrastructure ready condition timestamp (if and when available)\n- Machine's metadata creation timestamp\n\nDefaults to 10 minutes.\nIf you wish to disable this feature, set the value explicitly to 0.",
                                      "type": "string"
                                    },
                                    "remediationTemplate": {
                                      "description": "remediationTemplate is a reference to a remediation template\nprovided by an infrastructure provider.\n\nThis field is completely optional, when filled, the MachineHealthCheck controller\ncreates a new object from the template referenced and hands off remediation of the machine to\na controller that lives outside of Cluster API.",
                                      "type": "object",
                                      "properties": {
                                        "apiVersion": {
                                          "description": "API version of the referent.",
                                          "type": "string"
                                        },
                                        "fieldPath": {
                                          "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.",
                                          "type": "string"
                                        },
                                        "kind": {
                                          "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                          "type": "string"
                                        },
                                        "namespace": {
                                          "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                                          "type": "string"
                                        },
                                        "resourceVersion": {
                                          "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                                          "type": "string"
                                        },
                                        "uid": {
                                          "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                                          "type": "string"
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "unhealthyConditions": {
                                      "description": "unhealthyConditions contains a list of the conditions that determine\nwhether a node is considered unhealthy. The conditions are combined in a\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy.",
                                      "type": "array",
                                      "maxItems": 100,
                                      "items": {
                                        "description": "UnhealthyCondition represents a Node condition type and value with a timeout\nspecified as a duration.  When the named condition has been in the given\nstatus for at least the timeout value, a node is considered unhealthy.",
                                        "type": "object",
                                        "required": [
                                          "status",
                                          "timeout",
                                          "type"
                                        ],
                                        "properties": {
                                          "status": {
                                            "description": "status of the condition, one of True, False, Unknown.",
                                            "type": "string",
                                            "minLength": 1
                                          },
                                          "timeout": {
                                            "description": "timeout is the duration that a node must be in a given status for,\nafter which the node is considered unhealthy.\nFor example, with a value of \"1h\", the node must match the status\nfor at least 1 hour before being considered unhealthy.",
                                            "type": "string"
                                          },
                                          "type": {
                                            "description": "type of Node condition",
                                            "type": "string",
                                            "minLength": 1
                                          }
                                        }
                                      }
                                    },
                                    "unhealthyRange": {
                                      "description": "unhealthyRange specifies the range of unhealthy machines allowed.\nAny further remediation is only allowed if the number of machines selected by \"selector\" as not healthy\nis within the range of \"unhealthyRange\". Takes precedence over maxUnhealthy.\nEg. \"[3-5]\" - This means that remediation will be allowed only when:\n(a) there are at least 3 unhealthy machines (and)\n(b) there are at most 5 unhealthy machines",
                                      "type": "string",
                                      "maxLength": 32,
                                      "minLength": 1,
                                      "pattern": "^\\[[0-9]+-[0-9]+\\]$"
                                    }
                                  }
                                },
                                "metadata": {
                                  "description": "metadata is the metadata applied to the MachineDeployment and the machines of the MachineDeployment.\nAt runtime this metadata is merged with the corresponding metadata from the ClusterClass.",
                                  "type": "object",
                                  "properties": {
                                    "annotations": {
                                      "description": "annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    },
                                    "labels": {
                                      "description": "labels is a map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "minReadySeconds": {
                                  "description": "minReadySeconds is the minimum number of seconds for which a newly created machine should\nbe ready.\nDefaults to 0 (machine will be considered available as soon as it\nis ready)",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "name": {
                                  "description": "name is the unique identifier for this MachineDeploymentTopology.\nThe value is used with other unique identifiers to create a MachineDeployment's Name\n(e.g. cluster's name, etc). In case the name is greater than the allowed maximum length,\nthe values are hashed together.",
                                  "type": "string",
                                  "maxLength": 63,
                                  "minLength": 1
                                },
                                "nodeDeletionTimeout": {
                                  "description": "nodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine\nhosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely.\nDefaults to 10 seconds.",
                                  "type": "string"
                                },
                                "nodeDrainTimeout": {
                                  "description": "nodeDrainTimeout is the total amount of time that the controller will spend on draining a node.\nThe default value is 0, meaning that the node can be drained without any time limitations.\nNOTE: NodeDrainTimeout is different from `kubectl drain --timeout`",
                                  "type": "string"
                                },
                                "nodeVolumeDetachTimeout": {
                                  "description": "nodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes\nto be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.",
                                  "type": "string"
                                },
                                "readinessGates": {
                                  "description": "readinessGates specifies additional conditions to include when evaluating Machine Ready condition.\n\nThis field can be used e.g. to instruct the machine controller to include in the computation for Machine's ready\ncomputation a condition, managed by an external controllers, reporting the status of special software/hardware installed on the Machine.\n\nIf this field is not defined, readinessGates from the corresponding MachineDeploymentClass will be used, if any.\n\nNOTE: This field is considered only for computing v1beta2 conditions.",
                                  "type": "array",
                                  "maxItems": 32,
                                  "items": {
                                    "description": "MachineReadinessGate contains the type of a Machine condition to be used as a readiness gate.",
                                    "type": "object",
                                    "required": [
                                      "conditionType"
                                    ],
                                    "properties": {
                                      "conditionType": {
                                        "description": "conditionType refers to a condition with matching type in the Machine's condition list.\nIf the conditions doesn't exist, it will be treated as unknown.\nNote: Both Cluster API conditions or conditions added by 3rd party controllers can be used as readiness gates.",
                                        "type": "string",
                                        "maxLength": 316,
                                        "minLength": 1,
                                        "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                                      },
                                      "polarity": {
                                        "description": "polarity of the conditionType specified in this readinessGate.\nValid values are Positive, Negative and omitted.\nWhen omitted, the default behaviour will be Positive.\nA positive polarity means that the condition should report a true status under normal conditions.\nA negative polarity means that the condition should report a false status under normal conditions.",
                                        "type": "string",
                                        "enum": [
                                          "Positive",
                                          "Negative"
                                        ]
                                      }
                                    }
                                  },
                                  "x-kubernetes-list-map-keys": [
                                    "conditionType"
                                  ],
                                  "x-kubernetes-list-type": "map"
                                },
                                "replicas": {
                                  "description": "replicas is the number of worker nodes belonging to this set.\nIf the value is nil, the MachineDeployment is created without the number of Replicas (defaulting to 1)\nand it's assumed that an external entity (like cluster autoscaler) is responsible for the management\nof this value.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "strategy": {
                                  "description": "strategy is the deployment strategy to use to replace existing machines with\nnew ones.",
                                  "type": "object",
                                  "properties": {
                                    "remediation": {
                                      "description": "remediation controls the strategy of remediating unhealthy machines\nand how remediating operations should occur during the lifecycle of the dependant MachineSets.",
                                      "type": "object",
                                      "properties": {
                                        "maxInFlight": {
                                          "description": "maxInFlight determines how many in flight remediations should happen at the same time.\n\nRemediation only happens on the MachineSet with the most current revision, while\nolder MachineSets (usually present during rollout operations) aren't allowed to remediate.\n\nNote: In general (independent of remediations), unhealthy machines are always\nprioritized during scale down operations over healthy ones.\n\nMaxInFlight can be set to a fixed number or a percentage.\nExample: when this is set to 20%, the MachineSet controller deletes at most 20% of\nthe desired replicas.\n\nIf not set, remediation is limited to all machines (bounded by replicas)\nunder the active MachineSet's management.",
                                          "anyOf": [
                                            {
                                              "type": "integer"
                                            },
                                            {
                                              "type": "string"
                                            }
                                          ],
                                          "x-kubernetes-int-or-string": true
                                        }
                                      }
                                    },
                                    "rollingUpdate": {
                                      "description": "rollingUpdate is the rolling update config params. Present only if\nMachineDeploymentStrategyType = RollingUpdate.",
                                      "type": "object",
                                      "properties": {
                                        "deletePolicy": {
                                          "description": "deletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling.\nValid values are \"Random, \"Newest\", \"Oldest\"\nWhen no value is supplied, the default DeletePolicy of MachineSet is used",
                                          "type": "string",
                                          "enum": [
                                            "Random",
                                            "Newest",
                                            "Oldest"
                                          ]
                                        },
                                        "maxSurge": {
                                          "description": "maxSurge is the maximum number of machines that can be scheduled above the\ndesired number of machines.\nValue can be an absolute number (ex: 5) or a percentage of\ndesired machines (ex: 10%).\nThis can not be 0 if MaxUnavailable is 0.\nAbsolute number is calculated from percentage by rounding up.\nDefaults to 1.\nExample: when this is set to 30%, the new MachineSet can be scaled\nup immediately when the rolling update starts, such that the total\nnumber of old and new machines do not exceed 130% of desired\nmachines. Once old machines have been killed, new MachineSet can\nbe scaled up further, ensuring that total number of machines running\nat any time during the update is at most 130% of desired machines.",
                                          "anyOf": [
                                            {
                                              "type": "integer"
                                            },
                                            {
                                              "type": "string"
                                            }
                                          ],
                                          "x-kubernetes-int-or-string": true
                                        },
                                        "maxUnavailable": {
                                          "description": "maxUnavailable is the maximum number of machines that can be unavailable during the update.\nValue can be an absolute number (ex: 5) or a percentage of desired\nmachines (ex: 10%).\nAbsolute number is calculated from percentage by rounding down.\nThis can not be 0 if MaxSurge is 0.\nDefaults to 0.\nExample: when this is set to 30%, the old MachineSet can be scaled\ndown to 70% of desired machines immediately when the rolling update\nstarts. Once new machines are ready, old MachineSet can be scaled\ndown further, followed by scaling up the new MachineSet, ensuring\nthat the total number of machines available at all times\nduring the update is at least 70% of desired machines.",
                                          "anyOf": [
                                            {
                                              "type": "integer"
                                            },
                                            {
                                              "type": "string"
                                            }
                                          ],
                                          "x-kubernetes-int-or-string": true
                                        }
                                      }
                                    },
                                    "type": {
                                      "description": "type of deployment. Allowed values are RollingUpdate and OnDelete.\nThe default is RollingUpdate.",
                                      "type": "string",
                                      "enum": [
                                        "RollingUpdate",
                                        "OnDelete"
                                      ]
                                    }
                                  }
                                },
                                "variables": {
                                  "description": "variables can be used to customize the MachineDeployment through patches.",
                                  "type": "object",
                                  "properties": {
                                    "overrides": {
                                      "description": "overrides can be used to override Cluster level variables.",
                                      "type": "array",
                                      "maxItems": 1000,
                                      "items": {
                                        "description": "ClusterVariable can be used to customize the Cluster through patches. Each ClusterVariable is associated with a\nVariable definition in the ClusterClass `status` variables.",
                                        "type": "object",
                                        "required": [
                                          "name",
                                          "value"
                                        ],
                                        "properties": {
                                          "definitionFrom": {
                                            "description": "definitionFrom specifies where the definition of this Variable is from.\n\nDeprecated: This field is deprecated, must not be set anymore and is going to be removed in the next apiVersion.",
                                            "type": "string",
                                            "maxLength": 256
                                          },
                                          "name": {
                                            "description": "name of the variable.",
                                            "type": "string",
                                            "maxLength": 256,
                                            "minLength": 1
                                          },
                                          "value": {
                                            "description": "value of the variable.\nNote: the value will be validated against the schema of the corresponding ClusterClassVariable\nfrom the ClusterClass.\nNote: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a\nhard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools,\ni.e. it is not possible to have no type field.\nRef: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111",
                                            "x-kubernetes-preserve-unknown-fields": true
                                          }
                                        }
                                      },
                                      "x-kubernetes-list-map-keys": [
                                        "name"
                                      ],
                                      "x-kubernetes-list-type": "map"
                                    }
                                  }
                                }
                              }
                            },
                            "x-kubernetes-list-map-keys": [
                              "name"
                            ],
                            "x-kubernetes-list-type": "map"
                          },
                          "machinePools": {
                            "description": "machinePools is a list of machine pools in the cluster.",
                            "type": "array",
                            "maxItems": 2000,
                            "items": {
                              "description": "MachinePoolTopology specifies the different parameters for a pool of worker nodes in the topology.\nThis pool of nodes is managed by a MachinePool object whose lifecycle is managed by the Cluster controller.",
                              "type": "object",
                              "required": [
                                "class",
                                "name"
                              ],
                              "properties": {
                                "class": {
                                  "description": "class is the name of the MachinePoolClass used to create the pool of worker nodes.\nThis should match one of the deployment classes defined in the ClusterClass object\nmentioned in the `Cluster.Spec.Class` field.",
                                  "type": "string",
                                  "maxLength": 256,
                                  "minLength": 1
                                },
                                "failureDomains": {
                                  "description": "failureDomains is the list of failure domains the machine pool will be created in.\nMust match a key in the FailureDomains map stored on the cluster object.",
                                  "type": "array",
                                  "maxItems": 100,
                                  "items": {
                                    "type": "string",
                                    "maxLength": 256,
                                    "minLength": 1
                                  }
                                },
                                "metadata": {
                                  "description": "metadata is the metadata applied to the MachinePool.\nAt runtime this metadata is merged with the corresponding metadata from the ClusterClass.",
                                  "type": "object",
                                  "properties": {
                                    "annotations": {
                                      "description": "annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    },
                                    "labels": {
                                      "description": "labels is a map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "minReadySeconds": {
                                  "description": "minReadySeconds is the minimum number of seconds for which a newly created machine pool should\nbe ready.\nDefaults to 0 (machine will be considered available as soon as it\nis ready)",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "name": {
                                  "description": "name is the unique identifier for this MachinePoolTopology.\nThe value is used with other unique identifiers to create a MachinePool's Name\n(e.g. cluster's name, etc). In case the name is greater than the allowed maximum length,\nthe values are hashed together.",
                                  "type": "string",
                                  "maxLength": 63,
                                  "minLength": 1
                                },
                                "nodeDeletionTimeout": {
                                  "description": "nodeDeletionTimeout defines how long the controller will attempt to delete the Node that the MachinePool\nhosts after the MachinePool is marked for deletion. A duration of 0 will retry deletion indefinitely.\nDefaults to 10 seconds.",
                                  "type": "string"
                                },
                                "nodeDrainTimeout": {
                                  "description": "nodeDrainTimeout is the total amount of time that the controller will spend on draining a node.\nThe default value is 0, meaning that the node can be drained without any time limitations.\nNOTE: NodeDrainTimeout is different from `kubectl drain --timeout`",
                                  "type": "string"
                                },
                                "nodeVolumeDetachTimeout": {
                                  "description": "nodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes\nto be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.",
                                  "type": "string"
                                },
                                "replicas": {
                                  "description": "replicas is the number of nodes belonging to this pool.\nIf the value is nil, the MachinePool is created without the number of Replicas (defaulting to 1)\nand it's assumed that an external entity (like cluster autoscaler) is responsible for the management\nof this value.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "variables": {
                                  "description": "variables can be used to customize the MachinePool through patches.",
                                  "type": "object",
                                  "properties": {
                                    "overrides": {
                                      "description": "overrides can be used to override Cluster level variables.",
                                      "type": "array",
                                      "maxItems": 1000,
                                      "items": {
                                        "description": "ClusterVariable can be used to customize the Cluster through patches. Each ClusterVariable is associated with a\nVariable definition in the ClusterClass `status` variables.",
                                        "type": "object",
                                        "required": [
                                          "name",
                                          "value"
                                        ],
                                        "properties": {
                                          "definitionFrom": {
                                            "description": "definitionFrom specifies where the definition of this Variable is from.\n\nDeprecated: This field is deprecated, must not be set anymore and is going to be removed in the next apiVersion.",
                                            "type": "string",
                                            "maxLength": 256
                                          },
                                          "name": {
                                            "description": "name of the variable.",
                                            "type": "string",
                                            "maxLength": 256,
                                            "minLength": 1
                                          },
                                          "value": {
                                            "description": "value of the variable.\nNote: the value will be validated against the schema of the corresponding ClusterClassVariable\nfrom the ClusterClass.\nNote: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a\nhard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools,\ni.e. it is not possible to have no type field.\nRef: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111",
                                            "x-kubernetes-preserve-unknown-fields": true
                                          }
                                        }
                                      },
                                      "x-kubernetes-list-map-keys": [
                                        "name"
                                      ],
                                      "x-kubernetes-list-type": "map"
                                    }
                                  }
                                }
                              }
                            },
                            "x-kubernetes-list-map-keys": [
                              "name"
                            ],
                            "x-kubernetes-list-type": "map"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "status": {
                "description": "status is the observed state of Cluster.",
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "conditions defines current service state of the cluster.",
                    "type": "array",
                    "items": {
                      "description": "Condition defines an observation of a Cluster API resource operational state.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "message is a human readable message indicating details about the transition.\nThis field may be empty.",
                          "type": "string",
                          "maxLength": 10240,
                          "minLength": 1
                        },
                        "reason": {
                          "description": "reason is the reason for the condition's last transition in CamelCase.\nThe specific API may choose whether or not this field is considered a guaranteed API.\nThis field may be empty.",
                          "type": "string",
                          "maxLength": 256,
                          "minLength": 1
                        },
                        "severity": {
                          "description": "severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                          "type": "string",
                          "maxLength": 32
                        },
                        "status": {
                          "description": "status of the condition, one of True, False, Unknown.",
                          "type": "string"
                        },
                        "type": {
                          "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions\ncan be useful (see .node.status.conditions), the ability to deconflict is important.",
                          "type": "string",
                          "maxLength": 256,
                          "minLength": 1
                        }
                      }
                    }
                  },
                  "controlPlaneReady": {
                    "description": "controlPlaneReady denotes if the control plane became ready during initial provisioning\nto receive requests.\nNOTE: this field is part of the Cluster API contract and it is used to orchestrate provisioning.\nThe value of this field is never updated after provisioning is completed. Please use conditions\nto check the operational state of the control plane.",
                    "type": "boolean"
                  },
                  "failureDomains": {
                    "description": "failureDomains is a slice of failure domain objects synced from the infrastructure provider.",
                    "type": "object",
                    "additionalProperties": {
                      "description": "FailureDomainSpec is the Schema for Cluster API failure domains.\nIt allows controllers to understand how many failure domains a cluster can optionally span across.",
                      "type": "object",
                      "properties": {
                        "attributes": {
                          "description": "attributes is a free form map of attributes an infrastructure provider might use or require.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "controlPlane": {
                          "description": "controlPlane determines if this failure domain is suitable for use by control plane machines.",
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "failureMessage": {
                    "description": "failureMessage indicates that there is a fatal problem reconciling the\nstate, and will be set to a descriptive error message.\n\nDeprecated: This field is deprecated and is going to be removed in the next apiVersion. Please see https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240916-improve-status-in-CAPI-resources.md for more details.",
                    "type": "string",
                    "maxLength": 10240,
                    "minLength": 1
                  },
                  "failureReason": {
                    "description": "failureReason indicates that there is a fatal problem reconciling the\nstate, and will be set to a token value suitable for\nprogrammatic interpretation.\n\nDeprecated: This field is deprecated and is going to be removed in the next apiVersion. Please see https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240916-improve-status-in-CAPI-resources.md for more details.",
                    "type": "string"
                  },
                  "infrastructureReady": {
                    "description": "infrastructureReady is the state of the infrastructure provider.",
                    "type": "boolean"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration is the latest generation observed by the controller.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "phase": {
                    "description": "phase represents the current phase of cluster actuation.",
                    "type": "string",
                    "enum": [
                      "Pending",
                      "Provisioning",
                      "Provisioned",
                      "Deleting",
                      "Failed",
                      "Unknown"
                    ]
                  },
                  "v1beta2": {
                    "description": "v1beta2 groups all the fields that will be added or modified in Cluster's status with the V1Beta2 version.",
                    "type": "object",
                    "properties": {
                      "conditions": {
                        "description": "conditions represents the observations of a Cluster's current state.\nKnown condition types are Available, InfrastructureReady, ControlPlaneInitialized, ControlPlaneAvailable, WorkersAvailable, MachinesReady\nMachinesUpToDate, RemoteConnectionProbe, ScalingUp, ScalingDown, Remediating, Deleting, Paused.\nAdditionally, a TopologyReconciled condition will be added in case the Cluster is referencing a ClusterClass / defining a managed Topology.",
                        "type": "array",
                        "maxItems": 32,
                        "items": {
                          "description": "Condition contains details for one aspect of the current state of this API Resource.",
                          "type": "object",
                          "required": [
                            "lastTransitionTime",
                            "message",
                            "reason",
                            "status",
                            "type"
                          ],
                          "properties": {
                            "lastTransitionTime": {
                              "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                              "type": "string",
                              "format": "date-time"
                            },
                            "message": {
                              "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                              "type": "string",
                              "maxLength": 32768
                            },
                            "observedGeneration": {
                              "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                              "type": "integer",
                              "format": "int64",
                              "minimum": 0
                            },
                            "reason": {
                              "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                              "type": "string",
                              "maxLength": 1024,
                              "minLength": 1,
                              "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                            },
                            "status": {
                              "description": "status of the condition, one of True, False, Unknown.",
                              "type": "string",
                              "enum": [
                                "True",
                                "False",
                                "Unknown"
                              ]
                            },
                            "type": {
                              "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                              "type": "string",
                              "maxLength": 316,
                              "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                            }
                          }
                        },
                        "x-kubernetes-list-map-keys": [
                          "type"
                        ],
                        "x-kubernetes-list-type": "map"
                      },
                      "controlPlane": {
                        "description": "controlPlane groups all the observations about Cluster's ControlPlane current state.",
                        "type": "object",
                        "properties": {
                          "availableReplicas": {
                            "description": "availableReplicas is the total number of available control plane machines in this cluster. A machine is considered available when Machine's Available condition is true.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "desiredReplicas": {
                            "description": "desiredReplicas is the total number of desired control plane machines in this cluster.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "readyReplicas": {
                            "description": "readyReplicas is the total number of ready control plane machines in this cluster. A machine is considered ready when Machine's Ready condition is true.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "replicas": {
                            "description": "replicas is the total number of control plane machines in this cluster.\nNOTE: replicas also includes machines still being provisioned or being deleted.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "upToDateReplicas": {
                            "description": "upToDateReplicas is the number of up-to-date control plane machines in this cluster. A machine is considered up-to-date when Machine's UpToDate condition is true.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      },
                      "workers": {
                        "description": "workers groups all the observations about Cluster's Workers current state.",
                        "type": "object",
                        "properties": {
                          "availableReplicas": {
                            "description": "availableReplicas is the total number of available worker machines in this cluster. A machine is considered available when Machine's Available condition is true.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "desiredReplicas": {
                            "description": "desiredReplicas is the total number of desired worker machines in this cluster.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "readyReplicas": {
                            "description": "readyReplicas is the total number of ready worker machines in this cluster. A machine is considered ready when Machine's Ready condition is true.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "replicas": {
                            "description": "replicas is the total number of worker machines in this cluster.\nNOTE: replicas also includes machines still being provisioned or being deleted.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "upToDateReplicas": {
                            "description": "upToDateReplicas is the number of up-to-date worker machines in this cluster. A machine is considered up-to-date when Machine's UpToDate condition is true.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "ClusterClass",
            "type": "string",
            "description": "ClusterClass of this Cluster, empty if the Cluster is not using a ClusterClass",
            "jsonPath": ".spec.topology.class"
          },
          {
            "name": "Phase",
            "type": "string",
            "description": "Cluster status such as Pending/Provisioning/Provisioned/Deleting/Failed",
            "jsonPath": ".status.phase"
          },
          {
            "name": "Age",
            "type": "date",
            "description": "Time duration since creation of Cluster",
            "jsonPath": ".metadata.creationTimestamp"
          },
          {
            "name": "Version",
            "type": "string",
            "description": "Kubernetes version associated with this Cluster",
            "jsonPath": ".spec.topology.version"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}