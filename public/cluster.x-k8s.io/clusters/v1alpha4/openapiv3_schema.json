{
  "$schema": "http://json-schema.org/schema#",
  "description": "Cluster is the Schema for the clusters API.\n\n\nDeprecated: This type will be removed in one of the next releases.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "cluster.x-k8s.io/v1alpha4"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "Cluster"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. \n Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "ClusterSpec defines the desired state of Cluster.",
      "type": "object",
      "properties": {
        "clusterNetwork": {
          "description": "Cluster network configuration.",
          "type": "object",
          "properties": {
            "apiServerPort": {
              "description": "APIServerPort specifies the port the API Server should bind to.\nDefaults to 6443.",
              "type": "integer",
              "format": "int32"
            },
            "pods": {
              "description": "The network ranges from which Pod networks are allocated.",
              "type": "object",
              "required": [
                "cidrBlocks"
              ],
              "properties": {
                "cidrBlocks": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "serviceDomain": {
              "description": "Domain name for services.",
              "type": "string"
            },
            "services": {
              "description": "The network ranges from which service VIPs are allocated.",
              "type": "object",
              "required": [
                "cidrBlocks"
              ],
              "properties": {
                "cidrBlocks": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "controlPlaneEndpoint": {
          "description": "ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.",
          "type": "object",
          "required": [
            "host",
            "port"
          ],
          "properties": {
            "host": {
              "description": "The hostname on which the API server is serving.",
              "type": "string"
            },
            "port": {
              "description": "The port on which the API server is serving.",
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "controlPlaneRef": {
          "description": "ControlPlaneRef is an optional reference to a provider-specific resource that holds\nthe details for provisioning the Control Plane for a Cluster.",
          "type": "object",
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "fieldPath": {
              "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type": "string"
            },
            "name": {
              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": "string"
            },
            "resourceVersion": {
              "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "uid": {
              "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
              "type": "string"
            }
          },
          "x-kubernetes-map-type": "atomic"
        },
        "infrastructureRef": {
          "description": "InfrastructureRef is a reference to a provider-specific resource that holds the details\nfor provisioning infrastructure for a cluster in said provider.",
          "type": "object",
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "fieldPath": {
              "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type": "string"
            },
            "name": {
              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": "string"
            },
            "resourceVersion": {
              "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "uid": {
              "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
              "type": "string"
            }
          },
          "x-kubernetes-map-type": "atomic"
        },
        "paused": {
          "description": "Paused can be used to prevent controllers from processing the Cluster and all its associated objects.",
          "type": "boolean"
        },
        "topology": {
          "description": "This encapsulates the topology for the cluster.\nNOTE: It is required to enable the ClusterTopology\nfeature gate flag to activate managed topologies support;\nthis feature is highly experimental, and parts of it might still be not implemented.",
          "type": "object",
          "required": [
            "class",
            "version"
          ],
          "properties": {
            "class": {
              "description": "The name of the ClusterClass object to create the topology.",
              "type": "string"
            },
            "controlPlane": {
              "description": "ControlPlane describes the cluster control plane.",
              "type": "object",
              "properties": {
                "metadata": {
                  "description": "Metadata is the metadata applied to the machines of the ControlPlane.\nAt runtime this metadata is merged with the corresponding metadata from the ClusterClass.\n\n\nThis field is supported if and only if the control plane provider template\nreferenced in the ClusterClass is Machine based.",
                  "type": "object",
                  "properties": {
                    "annotations": {
                      "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "labels": {
                      "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "replicas": {
                  "description": "Replicas is the number of control plane nodes.\nIf the value is nil, the ControlPlane object is created without the number of Replicas\nand it's assumed that the control plane controller does not implement support for this field.\nWhen specified against a control plane provider that lacks support for this field, this value will be ignored.",
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "rolloutAfter": {
              "description": "RolloutAfter performs a rollout of the entire cluster one component at a time,\ncontrol plane first and then machine deployments.",
              "type": "string",
              "format": "date-time"
            },
            "version": {
              "description": "The Kubernetes version of the cluster.",
              "type": "string"
            },
            "workers": {
              "description": "Workers encapsulates the different constructs that form the worker nodes\nfor the cluster.",
              "type": "object",
              "properties": {
                "machineDeployments": {
                  "description": "MachineDeployments is a list of machine deployments in the cluster.",
                  "type": "array",
                  "items": {
                    "description": "MachineDeploymentTopology specifies the different parameters for a set of worker nodes in the topology.\nThis set of nodes is managed by a MachineDeployment object whose lifecycle is managed by the Cluster controller.",
                    "type": "object",
                    "required": [
                      "class",
                      "name"
                    ],
                    "properties": {
                      "class": {
                        "description": "Class is the name of the MachineDeploymentClass used to create the set of worker nodes.\nThis should match one of the deployment classes defined in the ClusterClass object\nmentioned in the `Cluster.Spec.Class` field.",
                        "type": "string"
                      },
                      "metadata": {
                        "description": "Metadata is the metadata applied to the machines of the MachineDeployment.\nAt runtime this metadata is merged with the corresponding metadata from the ClusterClass.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the unique identifier for this MachineDeploymentTopology.\nThe value is used with other unique identifiers to create a MachineDeployment's Name\n(e.g. cluster's name, etc). In case the name is greater than the allowed maximum length,\nthe values are hashed together.",
                        "type": "string"
                      },
                      "replicas": {
                        "description": "Replicas is the number of worker nodes belonging to this set.\nIf the value is nil, the MachineDeployment is created without the number of Replicas (defaulting to zero)\nand it's assumed that an external entity (like cluster autoscaler) is responsible for the management\nof this value.",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}