{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "machinehealthchecks.cluster.x-k8s.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.15.0"
    }
  },
  "spec": {
    "group": "cluster.x-k8s.io",
    "names": {
      "plural": "machinehealthchecks",
      "singular": "machinehealthcheck",
      "shortNames": [
        "mhc",
        "mhcs"
      ],
      "kind": "MachineHealthCheck",
      "listKind": "MachineHealthCheckList",
      "categories": [
        "cluster-api"
      ]
    },
    "scope": "Namespaced",
    "versions": [
      {
        "name": "v1alpha3",
        "served": false,
        "storage": false,
        "deprecated": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "MachineHealthCheck is the Schema for the machinehealthchecks API.\n\n\nDeprecated: This type will be removed in one of the next releases.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "Specification of machine health check policy",
                "type": "object",
                "required": [
                  "clusterName",
                  "selector",
                  "unhealthyConditions"
                ],
                "properties": {
                  "clusterName": {
                    "description": "ClusterName is the name of the Cluster this object belongs to.",
                    "type": "string",
                    "minLength": 1
                  },
                  "maxUnhealthy": {
                    "description": "Any further remediation is only allowed if at most \"MaxUnhealthy\" machines selected by\n\"selector\" are not healthy.",
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "x-kubernetes-int-or-string": true
                  },
                  "nodeStartupTimeout": {
                    "description": "Machines older than this duration without a node will be considered to have\nfailed and will be remediated.",
                    "type": "string"
                  },
                  "remediationTemplate": {
                    "description": "RemediationTemplate is a reference to a remediation template\nprovided by an infrastructure provider.\n\n\nThis field is completely optional, when filled, the MachineHealthCheck controller\ncreates a new object from the template referenced and hands off remediation of the machine to\na controller that lives outside of Cluster API.",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "fieldPath": {
                        "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                        "type": "string"
                      },
                      "resourceVersion": {
                        "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "selector": {
                    "description": "Label selector to match machines whose health will be exercised",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "x-kubernetes-list-type": "atomic"
                            }
                          }
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "unhealthyConditions": {
                    "description": "UnhealthyConditions contains a list of the conditions that determine\nwhether a node is considered unhealthy.  The conditions are combined in a\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy.",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "description": "UnhealthyCondition represents a Node condition type and value with a timeout\nspecified as a duration.  When the named condition has been in the given\nstatus for at least the timeout value, a node is considered unhealthy.",
                      "type": "object",
                      "required": [
                        "status",
                        "timeout",
                        "type"
                      ],
                      "properties": {
                        "status": {
                          "type": "string",
                          "minLength": 1
                        },
                        "timeout": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    }
                  }
                }
              },
              "status": {
                "description": "Most recently observed status of MachineHealthCheck resource",
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "Conditions defines current service state of the MachineHealthCheck.",
                    "type": "array",
                    "items": {
                      "description": "Condition defines an observation of a Cluster API resource operational state.",
                      "type": "object",
                      "required": [
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "Last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A human readable message indicating details about the transition.\nThis field may be empty.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "The reason for the condition's last transition in CamelCase.\nThe specific API may choose whether or not this field is considered a guaranteed API.\nThis field may not be empty.",
                          "type": "string"
                        },
                        "severity": {
                          "description": "Severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of the condition, one of True, False, Unknown.",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions\ncan be useful (see .node.status.conditions), the ability to deconflict is important.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "currentHealthy": {
                    "description": "total number of healthy machines counted by this machine health check",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  },
                  "expectedMachines": {
                    "description": "total number of machines counted by this machine health check",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  },
                  "observedGeneration": {
                    "description": "ObservedGeneration is the latest generation observed by the controller.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "remediationsAllowed": {
                    "description": "RemediationsAllowed is the number of further remediations allowed by this machine health check before\nmaxUnhealthy short circuiting will be applied",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  },
                  "targets": {
                    "description": "Targets shows the current list of machines the machine health check is watching",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "MaxUnhealthy",
            "type": "string",
            "description": "Maximum number of unhealthy machines allowed",
            "jsonPath": ".spec.maxUnhealthy"
          },
          {
            "name": "ExpectedMachines",
            "type": "integer",
            "description": "Number of machines currently monitored",
            "jsonPath": ".status.expectedMachines"
          },
          {
            "name": "CurrentHealthy",
            "type": "integer",
            "description": "Current observed healthy machines",
            "jsonPath": ".status.currentHealthy"
          }
        ]
      },
      {
        "name": "v1alpha4",
        "served": false,
        "storage": false,
        "deprecated": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "MachineHealthCheck is the Schema for the machinehealthchecks API.\n\n\nDeprecated: This type will be removed in one of the next releases.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "Specification of machine health check policy",
                "type": "object",
                "required": [
                  "clusterName",
                  "selector",
                  "unhealthyConditions"
                ],
                "properties": {
                  "clusterName": {
                    "description": "ClusterName is the name of the Cluster this object belongs to.",
                    "type": "string",
                    "minLength": 1
                  },
                  "maxUnhealthy": {
                    "description": "Any further remediation is only allowed if at most \"MaxUnhealthy\" machines selected by\n\"selector\" are not healthy.",
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "x-kubernetes-int-or-string": true
                  },
                  "nodeStartupTimeout": {
                    "description": "Machines older than this duration without a node will be considered to have\nfailed and will be remediated.\nIf not set, this value is defaulted to 10 minutes.\nIf you wish to disable this feature, set the value explicitly to 0.",
                    "type": "string"
                  },
                  "remediationTemplate": {
                    "description": "RemediationTemplate is a reference to a remediation template\nprovided by an infrastructure provider.\n\n\nThis field is completely optional, when filled, the MachineHealthCheck controller\ncreates a new object from the template referenced and hands off remediation of the machine to\na controller that lives outside of Cluster API.",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "fieldPath": {
                        "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                        "type": "string"
                      },
                      "resourceVersion": {
                        "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "selector": {
                    "description": "Label selector to match machines whose health will be exercised",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "x-kubernetes-list-type": "atomic"
                            }
                          }
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "unhealthyConditions": {
                    "description": "UnhealthyConditions contains a list of the conditions that determine\nwhether a node is considered unhealthy.  The conditions are combined in a\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy.",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "description": "UnhealthyCondition represents a Node condition type and value with a timeout\nspecified as a duration.  When the named condition has been in the given\nstatus for at least the timeout value, a node is considered unhealthy.",
                      "type": "object",
                      "required": [
                        "status",
                        "timeout",
                        "type"
                      ],
                      "properties": {
                        "status": {
                          "type": "string",
                          "minLength": 1
                        },
                        "timeout": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    }
                  },
                  "unhealthyRange": {
                    "description": "Any further remediation is only allowed if the number of machines selected by \"selector\" as not healthy\nis within the range of \"UnhealthyRange\". Takes precedence over MaxUnhealthy.\nEg. \"[3-5]\" - This means that remediation will be allowed only when:\n(a) there are at least 3 unhealthy machines (and)\n(b) there are at most 5 unhealthy machines",
                    "type": "string",
                    "pattern": "^\\[[0-9]+-[0-9]+\\]$"
                  }
                }
              },
              "status": {
                "description": "Most recently observed status of MachineHealthCheck resource",
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "Conditions defines current service state of the MachineHealthCheck.",
                    "type": "array",
                    "items": {
                      "description": "Condition defines an observation of a Cluster API resource operational state.",
                      "type": "object",
                      "required": [
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "Last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A human readable message indicating details about the transition.\nThis field may be empty.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "The reason for the condition's last transition in CamelCase.\nThe specific API may choose whether or not this field is considered a guaranteed API.\nThis field may not be empty.",
                          "type": "string"
                        },
                        "severity": {
                          "description": "Severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of the condition, one of True, False, Unknown.",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions\ncan be useful (see .node.status.conditions), the ability to deconflict is important.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "currentHealthy": {
                    "description": "total number of healthy machines counted by this machine health check",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  },
                  "expectedMachines": {
                    "description": "total number of machines counted by this machine health check",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  },
                  "observedGeneration": {
                    "description": "ObservedGeneration is the latest generation observed by the controller.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "remediationsAllowed": {
                    "description": "RemediationsAllowed is the number of further remediations allowed by this machine health check before\nmaxUnhealthy short circuiting will be applied",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  },
                  "targets": {
                    "description": "Targets shows the current list of machines the machine health check is watching",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "Cluster",
            "type": "string",
            "description": "Cluster",
            "jsonPath": ".spec.clusterName"
          },
          {
            "name": "Age",
            "type": "date",
            "description": "Time duration since creation of MachineHealthCheck",
            "jsonPath": ".metadata.creationTimestamp"
          },
          {
            "name": "MaxUnhealthy",
            "type": "string",
            "description": "Maximum number of unhealthy machines allowed",
            "jsonPath": ".spec.maxUnhealthy"
          },
          {
            "name": "ExpectedMachines",
            "type": "integer",
            "description": "Number of machines currently monitored",
            "jsonPath": ".status.expectedMachines"
          },
          {
            "name": "CurrentHealthy",
            "type": "integer",
            "description": "Current observed healthy machines",
            "jsonPath": ".status.currentHealthy"
          }
        ]
      },
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "MachineHealthCheck is the Schema for the machinehealthchecks API.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "Specification of machine health check policy",
                "type": "object",
                "required": [
                  "clusterName",
                  "selector"
                ],
                "properties": {
                  "clusterName": {
                    "description": "ClusterName is the name of the Cluster this object belongs to.",
                    "type": "string",
                    "minLength": 1
                  },
                  "maxUnhealthy": {
                    "description": "Any further remediation is only allowed if at most \"MaxUnhealthy\" machines selected by\n\"selector\" are not healthy.",
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "x-kubernetes-int-or-string": true
                  },
                  "nodeStartupTimeout": {
                    "description": "NodeStartupTimeout allows to set the maximum time for MachineHealthCheck\nto consider a Machine unhealthy if a corresponding Node isn't associated\nthrough a `Spec.ProviderID` field.\n\n\nThe duration set in this field is compared to the greatest of:\n- Cluster's infrastructure and control plane ready condition timestamp (if and when available)\n- Machine's infrastructure ready condition timestamp (if and when available)\n- Machine's metadata creation timestamp\n\n\nDefaults to 10 minutes.\nIf you wish to disable this feature, set the value explicitly to 0.",
                    "type": "string"
                  },
                  "remediationTemplate": {
                    "description": "RemediationTemplate is a reference to a remediation template\nprovided by an infrastructure provider.\n\n\nThis field is completely optional, when filled, the MachineHealthCheck controller\ncreates a new object from the template referenced and hands off remediation of the machine to\na controller that lives outside of Cluster API.",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "fieldPath": {
                        "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                        "type": "string"
                      },
                      "resourceVersion": {
                        "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "selector": {
                    "description": "Label selector to match machines whose health will be exercised",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "x-kubernetes-list-type": "atomic"
                            }
                          }
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "unhealthyConditions": {
                    "description": "UnhealthyConditions contains a list of the conditions that determine\nwhether a node is considered unhealthy.  The conditions are combined in a\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy.",
                    "type": "array",
                    "items": {
                      "description": "UnhealthyCondition represents a Node condition type and value with a timeout\nspecified as a duration.  When the named condition has been in the given\nstatus for at least the timeout value, a node is considered unhealthy.",
                      "type": "object",
                      "required": [
                        "status",
                        "timeout",
                        "type"
                      ],
                      "properties": {
                        "status": {
                          "type": "string",
                          "minLength": 1
                        },
                        "timeout": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    }
                  },
                  "unhealthyRange": {
                    "description": "Any further remediation is only allowed if the number of machines selected by \"selector\" as not healthy\nis within the range of \"UnhealthyRange\". Takes precedence over MaxUnhealthy.\nEg. \"[3-5]\" - This means that remediation will be allowed only when:\n(a) there are at least 3 unhealthy machines (and)\n(b) there are at most 5 unhealthy machines",
                    "type": "string",
                    "pattern": "^\\[[0-9]+-[0-9]+\\]$"
                  }
                }
              },
              "status": {
                "description": "Most recently observed status of MachineHealthCheck resource",
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "Conditions defines current service state of the MachineHealthCheck.",
                    "type": "array",
                    "items": {
                      "description": "Condition defines an observation of a Cluster API resource operational state.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "Last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A human readable message indicating details about the transition.\nThis field may be empty.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "The reason for the condition's last transition in CamelCase.\nThe specific API may choose whether or not this field is considered a guaranteed API.\nThis field may not be empty.",
                          "type": "string"
                        },
                        "severity": {
                          "description": "Severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of the condition, one of True, False, Unknown.",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions\ncan be useful (see .node.status.conditions), the ability to deconflict is important.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "currentHealthy": {
                    "description": "total number of healthy machines counted by this machine health check",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  },
                  "expectedMachines": {
                    "description": "total number of machines counted by this machine health check",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  },
                  "observedGeneration": {
                    "description": "ObservedGeneration is the latest generation observed by the controller.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "remediationsAllowed": {
                    "description": "RemediationsAllowed is the number of further remediations allowed by this machine health check before\nmaxUnhealthy short circuiting will be applied",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  },
                  "targets": {
                    "description": "Targets shows the current list of machines the machine health check is watching",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "Cluster",
            "type": "string",
            "description": "Cluster",
            "jsonPath": ".spec.clusterName"
          },
          {
            "name": "ExpectedMachines",
            "type": "integer",
            "description": "Number of machines currently monitored",
            "jsonPath": ".status.expectedMachines"
          },
          {
            "name": "MaxUnhealthy",
            "type": "string",
            "description": "Maximum number of unhealthy machines allowed",
            "jsonPath": ".spec.maxUnhealthy"
          },
          {
            "name": "CurrentHealthy",
            "type": "integer",
            "description": "Current observed healthy machines",
            "jsonPath": ".status.currentHealthy"
          },
          {
            "name": "Age",
            "type": "date",
            "description": "Time duration since creation of MachineHealthCheck",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}