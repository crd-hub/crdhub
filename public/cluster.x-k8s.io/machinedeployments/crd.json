{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "machinedeployments.cluster.x-k8s.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.11.3"
    }
  },
  "spec": {
    "group": "cluster.x-k8s.io",
    "names": {
      "plural": "machinedeployments",
      "singular": "machinedeployment",
      "shortNames": [
        "md"
      ],
      "kind": "MachineDeployment",
      "listKind": "MachineDeploymentList",
      "categories": [
        "cluster-api"
      ]
    },
    "scope": "Namespaced",
    "versions": [
      {
        "name": "v1alpha3",
        "served": true,
        "storage": false,
        "schema": {
          "openAPIV3Schema": {
            "description": "MachineDeployment is the Schema for the machinedeployments API. \n Deprecated: This type will be removed in one of the next releases.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "MachineDeploymentSpec defines the desired state of MachineDeployment.",
                "type": "object",
                "required": [
                  "clusterName",
                  "selector",
                  "template"
                ],
                "properties": {
                  "clusterName": {
                    "description": "ClusterName is the name of the Cluster this object belongs to.",
                    "type": "string",
                    "minLength": 1
                  },
                  "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)",
                    "type": "integer",
                    "format": "int32"
                  },
                  "paused": {
                    "description": "Indicates that the deployment is paused.",
                    "type": "boolean"
                  },
                  "progressDeadlineSeconds": {
                    "description": "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "replicas": {
                    "description": "Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "revisionHistoryLimit": {
                    "description": "The number of old MachineSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "selector": {
                    "description": "Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "strategy": {
                    "description": "The deployment strategy to use to replace existing machines with new ones.",
                    "type": "object",
                    "properties": {
                      "rollingUpdate": {
                        "description": "Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.",
                        "type": "object",
                        "properties": {
                          "maxSurge": {
                            "description": "The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.",
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          },
                          "maxUnavailable": {
                            "description": "The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.",
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "type": {
                        "description": "Type of deployment. Currently the only supported strategy is \"RollingUpdate\". Default is RollingUpdate.",
                        "type": "string"
                      }
                    }
                  },
                  "template": {
                    "description": "Template describes the machines that will be created.",
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "generateName": {
                            "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. \n If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). \n Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency \n Deprecated: This field has no function and is going to be removed in a next release.",
                            "type": "string"
                          },
                          "labels": {
                            "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "name": {
                            "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names \n Deprecated: This field has no function and is going to be removed in a next release.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. \n Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces \n Deprecated: This field has no function and is going to be removed in a next release.",
                            "type": "string"
                          },
                          "ownerReferences": {
                            "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller. \n Deprecated: This field has no function and is going to be removed in a next release.",
                            "type": "array",
                            "items": {
                              "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                              "type": "object",
                              "required": [
                                "apiVersion",
                                "kind",
                                "name",
                                "uid"
                              ],
                              "properties": {
                                "apiVersion": {
                                  "description": "API version of the referent.",
                                  "type": "string"
                                },
                                "blockOwnerDeletion": {
                                  "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                                  "type": "boolean"
                                },
                                "controller": {
                                  "description": "If true, this reference points to the managing controller.",
                                  "type": "boolean"
                                },
                                "kind": {
                                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                                  "type": "string"
                                },
                                "uid": {
                                  "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            }
                          }
                        }
                      },
                      "spec": {
                        "description": "Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                        "type": "object",
                        "required": [
                          "bootstrap",
                          "clusterName",
                          "infrastructureRef"
                        ],
                        "properties": {
                          "bootstrap": {
                            "description": "Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.",
                            "type": "object",
                            "properties": {
                              "configRef": {
                                "description": "ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.",
                                "type": "object",
                                "properties": {
                                  "apiVersion": {
                                    "description": "API version of the referent.",
                                    "type": "string"
                                  },
                                  "fieldPath": {
                                    "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                                    "type": "string"
                                  },
                                  "kind": {
                                    "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                                    "type": "string"
                                  },
                                  "resourceVersion": {
                                    "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                                    "type": "string"
                                  },
                                  "uid": {
                                    "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                                    "type": "string"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "data": {
                                "description": "Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state. \n Deprecated: Switch to DataSecretName.",
                                "type": "string"
                              },
                              "dataSecretName": {
                                "description": "DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.",
                                "type": "string"
                              }
                            }
                          },
                          "clusterName": {
                            "description": "ClusterName is the name of the Cluster this object belongs to.",
                            "type": "string",
                            "minLength": 1
                          },
                          "failureDomain": {
                            "description": "FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.",
                            "type": "string"
                          },
                          "infrastructureRef": {
                            "description": "InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.",
                            "type": "object",
                            "properties": {
                              "apiVersion": {
                                "description": "API version of the referent.",
                                "type": "string"
                              },
                              "fieldPath": {
                                "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                                "type": "string"
                              },
                              "kind": {
                                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                                "type": "string"
                              },
                              "resourceVersion": {
                                "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                                "type": "string"
                              },
                              "uid": {
                                "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "nodeDrainTimeout": {
                            "description": "NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`",
                            "type": "string"
                          },
                          "providerID": {
                            "description": "ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.",
                            "type": "string"
                          },
                          "version": {
                            "description": "Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "status": {
                "description": "MachineDeploymentStatus defines the observed state of MachineDeployment.",
                "type": "object",
                "properties": {
                  "availableReplicas": {
                    "description": "Total number of available machines (ready for at least minReadySeconds) targeted by this deployment.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "observedGeneration": {
                    "description": "The generation observed by the deployment controller.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "phase": {
                    "description": "Phase represents the current phase of a MachineDeployment (ScalingUp, ScalingDown, Running, Failed, or Unknown).",
                    "type": "string"
                  },
                  "readyReplicas": {
                    "description": "Total number of ready machines targeted by this deployment.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "replicas": {
                    "description": "Total number of non-terminated machines targeted by this deployment (their labels match the selector).",
                    "type": "integer",
                    "format": "int32"
                  },
                  "selector": {
                    "description": "Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors",
                    "type": "string"
                  },
                  "unavailableReplicas": {
                    "description": "Total number of unavailable machines targeted by this deployment. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet available or machines that still have not been created.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "updatedReplicas": {
                    "description": "Total number of non-terminated machines targeted by this deployment that have the desired template spec.",
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {},
          "scale": {
            "specReplicasPath": ".spec.replicas",
            "statusReplicasPath": ".status.replicas",
            "labelSelectorPath": ".status.selector"
          }
        },
        "additionalPrinterColumns": [
          {
            "name": "Phase",
            "type": "string",
            "description": "MachineDeployment status such as ScalingUp/ScalingDown/Running/Failed/Unknown",
            "jsonPath": ".status.phase"
          },
          {
            "name": "Replicas",
            "type": "integer",
            "description": "Total number of non-terminated machines targeted by this MachineDeployment",
            "jsonPath": ".status.replicas"
          },
          {
            "name": "Ready",
            "type": "integer",
            "description": "Total number of ready machines targeted by this MachineDeployment",
            "jsonPath": ".status.readyReplicas"
          },
          {
            "name": "Updated",
            "type": "integer",
            "description": "Total number of non-terminated machines targeted by this deployment that have the desired template spec",
            "jsonPath": ".status.updatedReplicas"
          },
          {
            "name": "Unavailable",
            "type": "integer",
            "description": "Total number of unavailable machines targeted by this MachineDeployment",
            "jsonPath": ".status.unavailableReplicas"
          }
        ]
      },
      {
        "name": "v1alpha4",
        "served": true,
        "storage": false,
        "schema": {
          "openAPIV3Schema": {
            "description": "MachineDeployment is the Schema for the machinedeployments API. \n Deprecated: This type will be removed in one of the next releases.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "MachineDeploymentSpec defines the desired state of MachineDeployment.",
                "type": "object",
                "required": [
                  "clusterName",
                  "selector",
                  "template"
                ],
                "properties": {
                  "clusterName": {
                    "description": "ClusterName is the name of the Cluster this object belongs to.",
                    "type": "string",
                    "minLength": 1
                  },
                  "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)",
                    "type": "integer",
                    "format": "int32"
                  },
                  "paused": {
                    "description": "Indicates that the deployment is paused.",
                    "type": "boolean"
                  },
                  "progressDeadlineSeconds": {
                    "description": "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "replicas": {
                    "description": "Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.",
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                  },
                  "revisionHistoryLimit": {
                    "description": "The number of old MachineSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "selector": {
                    "description": "Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "strategy": {
                    "description": "The deployment strategy to use to replace existing machines with new ones.",
                    "type": "object",
                    "properties": {
                      "rollingUpdate": {
                        "description": "Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.",
                        "type": "object",
                        "properties": {
                          "deletePolicy": {
                            "description": "DeletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling. Valid values are \"Random, \"Newest\", \"Oldest\" When no value is supplied, the default DeletePolicy of MachineSet is used",
                            "type": "string",
                            "enum": [
                              "Random",
                              "Newest",
                              "Oldest"
                            ]
                          },
                          "maxSurge": {
                            "description": "The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.",
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          },
                          "maxUnavailable": {
                            "description": "The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.",
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "type": {
                        "description": "Type of deployment. Default is RollingUpdate.",
                        "type": "string",
                        "enum": [
                          "RollingUpdate",
                          "OnDelete"
                        ]
                      }
                    }
                  },
                  "template": {
                    "description": "Template describes the machines that will be created.",
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "spec": {
                        "description": "Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                        "type": "object",
                        "required": [
                          "bootstrap",
                          "clusterName",
                          "infrastructureRef"
                        ],
                        "properties": {
                          "bootstrap": {
                            "description": "Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.",
                            "type": "object",
                            "properties": {
                              "configRef": {
                                "description": "ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.",
                                "type": "object",
                                "properties": {
                                  "apiVersion": {
                                    "description": "API version of the referent.",
                                    "type": "string"
                                  },
                                  "fieldPath": {
                                    "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                                    "type": "string"
                                  },
                                  "kind": {
                                    "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                                    "type": "string"
                                  },
                                  "resourceVersion": {
                                    "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                                    "type": "string"
                                  },
                                  "uid": {
                                    "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                                    "type": "string"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "dataSecretName": {
                                "description": "DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.",
                                "type": "string"
                              }
                            }
                          },
                          "clusterName": {
                            "description": "ClusterName is the name of the Cluster this object belongs to.",
                            "type": "string",
                            "minLength": 1
                          },
                          "failureDomain": {
                            "description": "FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.",
                            "type": "string"
                          },
                          "infrastructureRef": {
                            "description": "InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.",
                            "type": "object",
                            "properties": {
                              "apiVersion": {
                                "description": "API version of the referent.",
                                "type": "string"
                              },
                              "fieldPath": {
                                "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                                "type": "string"
                              },
                              "kind": {
                                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                                "type": "string"
                              },
                              "resourceVersion": {
                                "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                                "type": "string"
                              },
                              "uid": {
                                "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "nodeDrainTimeout": {
                            "description": "NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`",
                            "type": "string"
                          },
                          "providerID": {
                            "description": "ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.",
                            "type": "string"
                          },
                          "version": {
                            "description": "Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "status": {
                "description": "MachineDeploymentStatus defines the observed state of MachineDeployment.",
                "type": "object",
                "properties": {
                  "availableReplicas": {
                    "description": "Total number of available machines (ready for at least minReadySeconds) targeted by this deployment.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "conditions": {
                    "description": "Conditions defines current service state of the MachineDeployment.",
                    "type": "array",
                    "items": {
                      "description": "Condition defines an observation of a Cluster API resource operational state.",
                      "type": "object",
                      "required": [
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A human readable message indicating details about the transition. This field may be empty.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.",
                          "type": "string"
                        },
                        "severity": {
                          "description": "Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of the condition, one of True, False, Unknown.",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "observedGeneration": {
                    "description": "The generation observed by the deployment controller.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "phase": {
                    "description": "Phase represents the current phase of a MachineDeployment (ScalingUp, ScalingDown, Running, Failed, or Unknown).",
                    "type": "string"
                  },
                  "readyReplicas": {
                    "description": "Total number of ready machines targeted by this deployment.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "replicas": {
                    "description": "Total number of non-terminated machines targeted by this deployment (their labels match the selector).",
                    "type": "integer",
                    "format": "int32"
                  },
                  "selector": {
                    "description": "Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors",
                    "type": "string"
                  },
                  "unavailableReplicas": {
                    "description": "Total number of unavailable machines targeted by this deployment. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet available or machines that still have not been created.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "updatedReplicas": {
                    "description": "Total number of non-terminated machines targeted by this deployment that have the desired template spec.",
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {},
          "scale": {
            "specReplicasPath": ".spec.replicas",
            "statusReplicasPath": ".status.replicas",
            "labelSelectorPath": ".status.selector"
          }
        },
        "additionalPrinterColumns": [
          {
            "name": "Cluster",
            "type": "string",
            "description": "Cluster",
            "jsonPath": ".spec.clusterName"
          },
          {
            "name": "Age",
            "type": "date",
            "description": "Time duration since creation of MachineDeployment",
            "jsonPath": ".metadata.creationTimestamp"
          },
          {
            "name": "Phase",
            "type": "string",
            "description": "MachineDeployment status such as ScalingUp/ScalingDown/Running/Failed/Unknown",
            "jsonPath": ".status.phase"
          },
          {
            "name": "Replicas",
            "type": "integer",
            "description": "Total number of non-terminated machines targeted by this MachineDeployment",
            "jsonPath": ".status.replicas"
          },
          {
            "name": "Ready",
            "type": "integer",
            "description": "Total number of ready machines targeted by this MachineDeployment",
            "jsonPath": ".status.readyReplicas"
          },
          {
            "name": "Updated",
            "type": "integer",
            "description": "Total number of non-terminated machines targeted by this deployment that have the desired template spec",
            "jsonPath": ".status.updatedReplicas"
          },
          {
            "name": "Unavailable",
            "type": "integer",
            "description": "Total number of unavailable machines targeted by this MachineDeployment",
            "jsonPath": ".status.unavailableReplicas"
          }
        ]
      },
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "MachineDeployment is the Schema for the machinedeployments API.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "MachineDeploymentSpec defines the desired state of MachineDeployment.",
                "type": "object",
                "required": [
                  "clusterName",
                  "selector",
                  "template"
                ],
                "properties": {
                  "clusterName": {
                    "description": "ClusterName is the name of the Cluster this object belongs to.",
                    "type": "string",
                    "minLength": 1
                  },
                  "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)",
                    "type": "integer",
                    "format": "int32"
                  },
                  "paused": {
                    "description": "Indicates that the deployment is paused.",
                    "type": "boolean"
                  },
                  "progressDeadlineSeconds": {
                    "description": "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "replicas": {
                    "description": "Number of desired machines. This is a pointer to distinguish between explicit zero and not specified. \n Defaults to: * if the Kubernetes autoscaler min size and max size annotations are set: - if it's a new MachineDeployment, use min size - if the replicas field of the old MachineDeployment is \u003c min size, use min size - if the replicas field of the old MachineDeployment is \u003e max size, use max size - if the replicas field of the old MachineDeployment is in the (min size, max size) range, keep the value from the oldMD * otherwise use 1 Note: Defaulting will be run whenever the replicas field is not set: * A new MachineDeployment is created with replicas not set. * On an existing MachineDeployment the replicas field was first set and is now unset. Those cases are especially relevant for the following Kubernetes autoscaler use cases: * A new MachineDeployment is created and replicas should be managed by the autoscaler * An existing MachineDeployment which initially wasn't controlled by the autoscaler should be later controlled by the autoscaler",
                    "type": "integer",
                    "format": "int32"
                  },
                  "revisionHistoryLimit": {
                    "description": "The number of old MachineSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "rolloutAfter": {
                    "description": "RolloutAfter is a field to indicate a rollout should be performed after the specified time even if no changes have been made to the MachineDeployment. Example: In the YAML the time can be specified in the RFC3339 format. To specify the rolloutAfter target as March 9, 2023, at 9 am UTC use \"2023-03-09T09:00:00Z\".",
                    "type": "string",
                    "format": "date-time"
                  },
                  "selector": {
                    "description": "Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "strategy": {
                    "description": "The deployment strategy to use to replace existing machines with new ones.",
                    "type": "object",
                    "properties": {
                      "rollingUpdate": {
                        "description": "Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.",
                        "type": "object",
                        "properties": {
                          "deletePolicy": {
                            "description": "DeletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling. Valid values are \"Random, \"Newest\", \"Oldest\" When no value is supplied, the default DeletePolicy of MachineSet is used",
                            "type": "string",
                            "enum": [
                              "Random",
                              "Newest",
                              "Oldest"
                            ]
                          },
                          "maxSurge": {
                            "description": "The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.",
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          },
                          "maxUnavailable": {
                            "description": "The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.",
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "type": {
                        "description": "Type of deployment. Default is RollingUpdate.",
                        "type": "string",
                        "enum": [
                          "RollingUpdate",
                          "OnDelete"
                        ]
                      }
                    }
                  },
                  "template": {
                    "description": "Template describes the machines that will be created.",
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "spec": {
                        "description": "Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                        "type": "object",
                        "required": [
                          "bootstrap",
                          "clusterName",
                          "infrastructureRef"
                        ],
                        "properties": {
                          "bootstrap": {
                            "description": "Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.",
                            "type": "object",
                            "properties": {
                              "configRef": {
                                "description": "ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.",
                                "type": "object",
                                "properties": {
                                  "apiVersion": {
                                    "description": "API version of the referent.",
                                    "type": "string"
                                  },
                                  "fieldPath": {
                                    "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                                    "type": "string"
                                  },
                                  "kind": {
                                    "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                                    "type": "string"
                                  },
                                  "resourceVersion": {
                                    "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                                    "type": "string"
                                  },
                                  "uid": {
                                    "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                                    "type": "string"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "dataSecretName": {
                                "description": "DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.",
                                "type": "string"
                              }
                            }
                          },
                          "clusterName": {
                            "description": "ClusterName is the name of the Cluster this object belongs to.",
                            "type": "string",
                            "minLength": 1
                          },
                          "failureDomain": {
                            "description": "FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.",
                            "type": "string"
                          },
                          "infrastructureRef": {
                            "description": "InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.",
                            "type": "object",
                            "properties": {
                              "apiVersion": {
                                "description": "API version of the referent.",
                                "type": "string"
                              },
                              "fieldPath": {
                                "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                                "type": "string"
                              },
                              "kind": {
                                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                                "type": "string"
                              },
                              "resourceVersion": {
                                "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                                "type": "string"
                              },
                              "uid": {
                                "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "nodeDeletionTimeout": {
                            "description": "NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. Defaults to 10 seconds.",
                            "type": "string"
                          },
                          "nodeDrainTimeout": {
                            "description": "NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`",
                            "type": "string"
                          },
                          "nodeVolumeDetachTimeout": {
                            "description": "NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.",
                            "type": "string"
                          },
                          "providerID": {
                            "description": "ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.",
                            "type": "string"
                          },
                          "version": {
                            "description": "Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "status": {
                "description": "MachineDeploymentStatus defines the observed state of MachineDeployment.",
                "type": "object",
                "properties": {
                  "availableReplicas": {
                    "description": "Total number of available machines (ready for at least minReadySeconds) targeted by this deployment.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "conditions": {
                    "description": "Conditions defines current service state of the MachineDeployment.",
                    "type": "array",
                    "items": {
                      "description": "Condition defines an observation of a Cluster API resource operational state.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A human readable message indicating details about the transition. This field may be empty.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.",
                          "type": "string"
                        },
                        "severity": {
                          "description": "Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of the condition, one of True, False, Unknown.",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "observedGeneration": {
                    "description": "The generation observed by the deployment controller.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "phase": {
                    "description": "Phase represents the current phase of a MachineDeployment (ScalingUp, ScalingDown, Running, Failed, or Unknown).",
                    "type": "string"
                  },
                  "readyReplicas": {
                    "description": "Total number of ready machines targeted by this deployment.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "replicas": {
                    "description": "Total number of non-terminated machines targeted by this deployment (their labels match the selector).",
                    "type": "integer",
                    "format": "int32"
                  },
                  "selector": {
                    "description": "Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors",
                    "type": "string"
                  },
                  "unavailableReplicas": {
                    "description": "Total number of unavailable machines targeted by this deployment. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet available or machines that still have not been created.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "updatedReplicas": {
                    "description": "Total number of non-terminated machines targeted by this deployment that have the desired template spec.",
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {},
          "scale": {
            "specReplicasPath": ".spec.replicas",
            "statusReplicasPath": ".status.replicas",
            "labelSelectorPath": ".status.selector"
          }
        },
        "additionalPrinterColumns": [
          {
            "name": "Cluster",
            "type": "string",
            "description": "Cluster",
            "jsonPath": ".spec.clusterName"
          },
          {
            "name": "Desired",
            "type": "integer",
            "description": "Total number of machines desired by this MachineDeployment",
            "priority": 10,
            "jsonPath": ".spec.replicas"
          },
          {
            "name": "Replicas",
            "type": "integer",
            "description": "Total number of non-terminated machines targeted by this MachineDeployment",
            "jsonPath": ".status.replicas"
          },
          {
            "name": "Ready",
            "type": "integer",
            "description": "Total number of ready machines targeted by this MachineDeployment",
            "jsonPath": ".status.readyReplicas"
          },
          {
            "name": "Updated",
            "type": "integer",
            "description": "Total number of non-terminated machines targeted by this deployment that have the desired template spec",
            "jsonPath": ".status.updatedReplicas"
          },
          {
            "name": "Unavailable",
            "type": "integer",
            "description": "Total number of unavailable machines targeted by this MachineDeployment",
            "jsonPath": ".status.unavailableReplicas"
          },
          {
            "name": "Phase",
            "type": "string",
            "description": "MachineDeployment status such as ScalingUp/ScalingDown/Running/Failed/Unknown",
            "jsonPath": ".status.phase"
          },
          {
            "name": "Age",
            "type": "date",
            "description": "Time duration since creation of MachineDeployment",
            "jsonPath": ".metadata.creationTimestamp"
          },
          {
            "name": "Version",
            "type": "string",
            "description": "Kubernetes version associated with this MachineDeployment",
            "jsonPath": ".spec.template.spec.version"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}