{
  "$schema": "http://json-schema.org/schema#",
  "description": "ImageUpdateAutomation is the Schema for the imageupdateautomations API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "image.toolkit.fluxcd.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "ImageUpdateAutomation"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. \n Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation",
      "type": "object",
      "required": [
        "interval",
        "sourceRef"
      ],
      "properties": {
        "git": {
          "description": "GitSpec contains all the git-specific definitions. This is technically optional, but in practice mandatory until there are other kinds of source allowed.",
          "type": "object",
          "required": [
            "commit"
          ],
          "properties": {
            "checkout": {
              "description": "Checkout gives the parameters for cloning the git repository, ready to make changes. If not present, the `spec.ref` field from the referenced `GitRepository` or its default will be used.",
              "type": "object",
              "required": [
                "ref"
              ],
              "properties": {
                "ref": {
                  "description": "Reference gives a branch, tag or commit to clone from the Git repository.",
                  "type": "object",
                  "properties": {
                    "branch": {
                      "description": "Branch to check out, defaults to 'master' if no other field is defined.",
                      "type": "string"
                    },
                    "commit": {
                      "description": "Commit SHA to check out, takes precedence over all reference fields. \n This can be combined with Branch to shallow clone the branch, in which the commit is expected to exist.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the reference to check out; takes precedence over Branch, Tag and SemVer. \n It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description Examples: \"refs/heads/main\", \"refs/tags/v0.1.0\", \"refs/pull/420/head\", \"refs/merge-requests/1/head\"",
                      "type": "string"
                    },
                    "semver": {
                      "description": "SemVer tag expression to check out, takes precedence over Tag.",
                      "type": "string"
                    },
                    "tag": {
                      "description": "Tag to check out, takes precedence over Branch.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "commit": {
              "description": "Commit specifies how to commit to the git repository.",
              "type": "object",
              "required": [
                "author"
              ],
              "properties": {
                "author": {
                  "description": "Author gives the email and optionally the name to use as the author of commits.",
                  "type": "object",
                  "required": [
                    "email"
                  ],
                  "properties": {
                    "email": {
                      "description": "Email gives the email to provide when making a commit.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name gives the name to provide when making a commit.",
                      "type": "string"
                    }
                  }
                },
                "messageTemplate": {
                  "description": "MessageTemplate provides a template for the commit message, into which will be interpolated the details of the change made.",
                  "type": "string"
                },
                "signingKey": {
                  "description": "SigningKey provides the option to sign commits with a GPG key",
                  "type": "object",
                  "properties": {
                    "secretRef": {
                      "description": "SecretRef holds the name to a secret that contains a 'git.asc' key corresponding to the ASCII Armored file containing the GPG signing keypair as the value. It must be in the same namespace as the ImageUpdateAutomation.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the referent.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "push": {
              "description": "Push specifies how and where to push commits made by the automation. If missing, commits are pushed (back) to `.spec.checkout.branch` or its default.",
              "type": "object",
              "properties": {
                "branch": {
                  "description": "Branch specifies that commits should be pushed to the branch named. The branch is created using `.spec.checkout.branch` as the starting point, if it doesn't already exist.",
                  "type": "string"
                },
                "options": {
                  "description": "Options specifies the push options that are sent to the Git server when performing a push operation. For details, see: https://git-scm.com/docs/git-push#Documentation/git-push.txt---push-optionltoptiongt",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "refspec": {
                  "description": "Refspec specifies the Git Refspec to use for a push operation. If both Branch and Refspec are provided, then the commit is pushed to the branch and also using the specified refspec. For more details about Git Refspecs, see: https://git-scm.com/book/en/v2/Git-Internals-The-Refspec",
                  "type": "string"
                }
              }
            }
          }
        },
        "interval": {
          "description": "Interval gives an lower bound for how often the automation run should be attempted.",
          "type": "string",
          "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$"
        },
        "sourceRef": {
          "description": "SourceRef refers to the resource giving access details to a git repository.",
          "type": "object",
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent.",
              "type": "string",
              "default": "GitRepository",
              "enum": [
                "GitRepository"
              ]
            },
            "name": {
              "description": "Name of the referent.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.",
              "type": "string"
            }
          }
        },
        "suspend": {
          "description": "Suspend tells the controller to not run this automation, until it is unset (or set to false). Defaults to false.",
          "type": "boolean"
        },
        "update": {
          "description": "Update gives the specification for how to update the files in the repository. This can be left empty, to use the default value.",
          "type": "object",
          "default": {
            "strategy": "Setters"
          },
          "required": [
            "strategy"
          ],
          "properties": {
            "path": {
              "description": "Path to the directory containing the manifests to be updated. Defaults to 'None', which translates to the root path of the GitRepositoryRef.",
              "type": "string"
            },
            "strategy": {
              "description": "Strategy names the strategy to be used.",
              "type": "string",
              "default": "Setters",
              "enum": [
                "Setters"
              ]
            }
          }
        }
      }
    }
  }
}