{
  "$schema": "http://json-schema.org/schema#",
  "description": "ImageUpdateAutomation is the Schema for the imageupdateautomations API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "image.toolkit.fluxcd.io/v1beta2"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "ImageUpdateAutomation"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. \n Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation",
      "type": "object",
      "required": [
        "interval",
        "sourceRef"
      ],
      "properties": {
        "git": {
          "description": "GitSpec contains all the git-specific definitions. This is\ntechnically optional, but in practice mandatory until there are\nother kinds of source allowed.",
          "type": "object",
          "required": [
            "commit"
          ],
          "properties": {
            "checkout": {
              "description": "Checkout gives the parameters for cloning the git repository,\nready to make changes. If not present, the `spec.ref` field from the\nreferenced `GitRepository` or its default will be used.",
              "type": "object",
              "required": [
                "ref"
              ],
              "properties": {
                "ref": {
                  "description": "Reference gives a branch, tag or commit to clone from the Git\nrepository.",
                  "type": "object",
                  "properties": {
                    "branch": {
                      "description": "Branch to check out, defaults to 'master' if no other field is defined.",
                      "type": "string"
                    },
                    "commit": {
                      "description": "Commit SHA to check out, takes precedence over all reference fields.\n\n\nThis can be combined with Branch to shallow clone the branch, in which\nthe commit is expected to exist.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the reference to check out; takes precedence over Branch, Tag and SemVer.\n\n\nIt must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description\nExamples: \"refs/heads/main\", \"refs/tags/v0.1.0\", \"refs/pull/420/head\", \"refs/merge-requests/1/head\"",
                      "type": "string"
                    },
                    "semver": {
                      "description": "SemVer tag expression to check out, takes precedence over Tag.",
                      "type": "string"
                    },
                    "tag": {
                      "description": "Tag to check out, takes precedence over Branch.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "commit": {
              "description": "Commit specifies how to commit to the git repository.",
              "type": "object",
              "required": [
                "author"
              ],
              "properties": {
                "author": {
                  "description": "Author gives the email and optionally the name to use as the\nauthor of commits.",
                  "type": "object",
                  "required": [
                    "email"
                  ],
                  "properties": {
                    "email": {
                      "description": "Email gives the email to provide when making a commit.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name gives the name to provide when making a commit.",
                      "type": "string"
                    }
                  }
                },
                "messageTemplate": {
                  "description": "MessageTemplate provides a template for the commit message,\ninto which will be interpolated the details of the change made.",
                  "type": "string"
                },
                "signingKey": {
                  "description": "SigningKey provides the option to sign commits with a GPG key",
                  "type": "object",
                  "properties": {
                    "secretRef": {
                      "description": "SecretRef holds the name to a secret that contains a 'git.asc' key\ncorresponding to the ASCII Armored file containing the GPG signing\nkeypair as the value. It must be in the same namespace as the\nImageUpdateAutomation.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the referent.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "push": {
              "description": "Push specifies how and where to push commits made by the\nautomation. If missing, commits are pushed (back) to\n`.spec.checkout.branch` or its default.",
              "type": "object",
              "properties": {
                "branch": {
                  "description": "Branch specifies that commits should be pushed to the branch\nnamed. The branch is created using `.spec.checkout.branch` as the\nstarting point, if it doesn't already exist.",
                  "type": "string"
                },
                "options": {
                  "description": "Options specifies the push options that are sent to the Git\nserver when performing a push operation. For details, see:\nhttps://git-scm.com/docs/git-push#Documentation/git-push.txt---push-optionltoptiongt",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "refspec": {
                  "description": "Refspec specifies the Git Refspec to use for a push operation.\nIf both Branch and Refspec are provided, then the commit is pushed\nto the branch and also using the specified refspec.\nFor more details about Git Refspecs, see:\nhttps://git-scm.com/book/en/v2/Git-Internals-The-Refspec",
                  "type": "string"
                }
              }
            }
          }
        },
        "interval": {
          "description": "Interval gives an lower bound for how often the automation\nrun should be attempted.",
          "type": "string",
          "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$"
        },
        "policySelector": {
          "description": "PolicySelector allows to filter applied policies based on labels.\nBy default includes all policies in namespace.",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "atomic"
                  }
                }
              },
              "x-kubernetes-list-type": "atomic"
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "x-kubernetes-map-type": "atomic"
        },
        "sourceRef": {
          "description": "SourceRef refers to the resource giving access details\nto a git repository.",
          "type": "object",
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent.",
              "type": "string",
              "default": "GitRepository",
              "enum": [
                "GitRepository"
              ]
            },
            "name": {
              "description": "Name of the referent.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.",
              "type": "string"
            }
          }
        },
        "suspend": {
          "description": "Suspend tells the controller to not run this automation, until\nit is unset (or set to false). Defaults to false.",
          "type": "boolean"
        },
        "update": {
          "description": "Update gives the specification for how to update the files in\nthe repository. This can be left empty, to use the default\nvalue.",
          "type": "object",
          "default": {
            "strategy": "Setters"
          },
          "required": [
            "strategy"
          ],
          "properties": {
            "path": {
              "description": "Path to the directory containing the manifests to be updated.\nDefaults to 'None', which translates to the root path\nof the GitRepositoryRef.",
              "type": "string"
            },
            "strategy": {
              "description": "Strategy names the strategy to be used.",
              "type": "string",
              "default": "Setters",
              "enum": [
                "Setters"
              ]
            }
          }
        }
      }
    }
  }
}