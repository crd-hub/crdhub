{
  "$schema": "http://json-schema.org/schema#",
  "description": "VPNGatewayConnection is the Schema for the VPNGatewayConnections API. Manages a VPN Gateway Connection.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "network.azure.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "VPNGatewayConnection"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "VPNGatewayConnectionSpec defines the desired state of VPNGatewayConnection",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "internetSecurityEnabled": {
              "description": "Whether Internet Security is enabled for this VPN Connection. Defaults to false.",
              "type": "boolean"
            },
            "remoteVpnSiteId": {
              "description": "The ID of the remote VPN Site, which will connect to the VPN Gateway. Changing this forces a new VPN Gateway Connection to be created.",
              "type": "string"
            },
            "remoteVpnSiteIdRef": {
              "description": "Reference to a VPNSite in network to populate remoteVpnSiteId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "remoteVpnSiteIdSelector": {
              "description": "Selector for a VPNSite in network to populate remoteVpnSiteId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "routing": {
              "description": "A routing block as defined below. If this is not specified, there will be a default route table created implicitly.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "associatedRouteTable": {
                    "description": "The ID of the Route Table associated with this VPN Connection.",
                    "type": "string"
                  },
                  "inboundRouteMapId": {
                    "description": "The resource ID of the Route Map associated with this Routing Configuration for inbound learned routes.",
                    "type": "string"
                  },
                  "outboundRouteMapId": {
                    "description": "The resource ID of the Route Map associated with this Routing Configuration for outbound advertised routes.",
                    "type": "string"
                  },
                  "propagatedRouteTable": {
                    "description": "A propagated_route_table block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "labels": {
                          "description": "A list of labels to assign to this route table.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "routeTableIds": {
                          "description": "A list of Route Table IDs to associated with this VPN Gateway Connection.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "trafficSelectorPolicy": {
              "description": "One or more traffic_selector_policy blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "localAddressRanges": {
                    "description": "A list of local address spaces in CIDR format for this VPN Gateway Connection.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "remoteAddressRanges": {
                    "description": "A list of remote address spaces in CIDR format for this VPN Gateway Connection.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "vpnGatewayId": {
              "description": "The ID of the VPN Gateway that this VPN Gateway Connection belongs to. Changing this forces a new VPN Gateway Connection to be created.",
              "type": "string"
            },
            "vpnGatewayIdRef": {
              "description": "Reference to a VPNGateway in network to populate vpnGatewayId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "vpnGatewayIdSelector": {
              "description": "Selector for a VPNGateway in network to populate vpnGatewayId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "vpnLink": {
              "description": "One or more vpn_link blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "bandwidthMbps": {
                    "description": "The expected connection bandwidth in MBPS. Defaults to 10.",
                    "type": "number"
                  },
                  "bgpEnabled": {
                    "description": "Should the BGP be enabled? Defaults to false. Changing this forces a new VPN Gateway Connection to be created.",
                    "type": "boolean"
                  },
                  "connectionMode": {
                    "description": "The connection mode of this VPN Link. Possible values are Default, InitiatorOnly and ResponderOnly. Defaults to Default.",
                    "type": "string"
                  },
                  "customBgpAddress": {
                    "description": "One or more custom_bgp_address blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ipAddress": {
                          "description": "The custom bgp ip address which belongs to the IP Configuration.",
                          "type": "string"
                        },
                        "ipConfigurationId": {
                          "description": "The ID of the IP Configuration which belongs to the VPN Gateway.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "egressNatRuleIds": {
                    "description": "A list of the egress NAT Rule Ids.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ingressNatRuleIds": {
                    "description": "A list of the ingress NAT Rule Ids.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ipsecPolicy": {
                    "description": "One or more ipsec_policy blocks as defined above.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "dhGroup": {
                          "description": "The DH Group used in IKE Phase 1 for initial SA. Possible values are None, DHGroup1, DHGroup2, DHGroup14, DHGroup24, DHGroup2048, ECP256, ECP384.",
                          "type": "string"
                        },
                        "encryptionAlgorithm": {
                          "description": "The IPSec encryption algorithm (IKE phase 1). Possible values are AES128, AES192, AES256, DES, DES3, GCMAES128, GCMAES192, GCMAES256, None.",
                          "type": "string"
                        },
                        "ikeEncryptionAlgorithm": {
                          "description": "The IKE encryption algorithm (IKE phase 2). Possible values are DES, DES3, AES128, AES192, AES256, GCMAES128, GCMAES256.",
                          "type": "string"
                        },
                        "ikeIntegrityAlgorithm": {
                          "description": "The IKE integrity algorithm (IKE phase 2). Possible values are MD5, SHA1, SHA256, SHA384, GCMAES128, GCMAES256.",
                          "type": "string"
                        },
                        "integrityAlgorithm": {
                          "description": "The IPSec integrity algorithm (IKE phase 1). Possible values are MD5, SHA1, SHA256, GCMAES128, GCMAES192, GCMAES256.",
                          "type": "string"
                        },
                        "pfsGroup": {
                          "description": "The Pfs Group used in IKE Phase 2 for the new child SA. Possible values are None, PFS1, PFS2, PFS14, PFS24, PFS2048, PFSMM, ECP256, ECP384.",
                          "type": "string"
                        },
                        "saDataSizeKb": {
                          "description": "The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for the site to site VPN tunnel.",
                          "type": "number"
                        },
                        "saLifetimeSec": {
                          "description": "The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for the site to site VPN tunnel.",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "localAzureIpAddressEnabled": {
                    "description": "Whether to use local Azure IP to initiate connection? Defaults to false.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name which should be used for this VPN Link Connection.",
                    "type": "string"
                  },
                  "policyBasedTrafficSelectorEnabled": {
                    "description": "Whether to enable policy-based traffic selectors? Defaults to false.",
                    "type": "boolean"
                  },
                  "protocol": {
                    "description": "The protocol used for this VPN Link Connection. Possible values are IKEv1 and IKEv2. Defaults to IKEv2.",
                    "type": "string"
                  },
                  "ratelimitEnabled": {
                    "description": "Should the rate limit be enabled? Defaults to false.",
                    "type": "boolean"
                  },
                  "routeWeight": {
                    "description": "Routing weight for this VPN Link Connection. Defaults to 0.",
                    "type": "number"
                  },
                  "sharedKey": {
                    "description": "SharedKey for this VPN Link Connection.",
                    "type": "string"
                  },
                  "vpnSiteLinkId": {
                    "description": "The ID of the connected VPN Site Link. Changing this forces a new VPN Gateway Connection to be created.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "internetSecurityEnabled": {
              "description": "Whether Internet Security is enabled for this VPN Connection. Defaults to false.",
              "type": "boolean"
            },
            "routing": {
              "description": "A routing block as defined below. If this is not specified, there will be a default route table created implicitly.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "associatedRouteTable": {
                    "description": "The ID of the Route Table associated with this VPN Connection.",
                    "type": "string"
                  },
                  "inboundRouteMapId": {
                    "description": "The resource ID of the Route Map associated with this Routing Configuration for inbound learned routes.",
                    "type": "string"
                  },
                  "outboundRouteMapId": {
                    "description": "The resource ID of the Route Map associated with this Routing Configuration for outbound advertised routes.",
                    "type": "string"
                  },
                  "propagatedRouteTable": {
                    "description": "A propagated_route_table block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "labels": {
                          "description": "A list of labels to assign to this route table.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "routeTableIds": {
                          "description": "A list of Route Table IDs to associated with this VPN Gateway Connection.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "trafficSelectorPolicy": {
              "description": "One or more traffic_selector_policy blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "localAddressRanges": {
                    "description": "A list of local address spaces in CIDR format for this VPN Gateway Connection.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "remoteAddressRanges": {
                    "description": "A list of remote address spaces in CIDR format for this VPN Gateway Connection.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "vpnLink": {
              "description": "One or more vpn_link blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "bandwidthMbps": {
                    "description": "The expected connection bandwidth in MBPS. Defaults to 10.",
                    "type": "number"
                  },
                  "bgpEnabled": {
                    "description": "Should the BGP be enabled? Defaults to false. Changing this forces a new VPN Gateway Connection to be created.",
                    "type": "boolean"
                  },
                  "connectionMode": {
                    "description": "The connection mode of this VPN Link. Possible values are Default, InitiatorOnly and ResponderOnly. Defaults to Default.",
                    "type": "string"
                  },
                  "customBgpAddress": {
                    "description": "One or more custom_bgp_address blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ipAddress": {
                          "description": "The custom bgp ip address which belongs to the IP Configuration.",
                          "type": "string"
                        },
                        "ipConfigurationId": {
                          "description": "The ID of the IP Configuration which belongs to the VPN Gateway.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "egressNatRuleIds": {
                    "description": "A list of the egress NAT Rule Ids.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ingressNatRuleIds": {
                    "description": "A list of the ingress NAT Rule Ids.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ipsecPolicy": {
                    "description": "One or more ipsec_policy blocks as defined above.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "dhGroup": {
                          "description": "The DH Group used in IKE Phase 1 for initial SA. Possible values are None, DHGroup1, DHGroup2, DHGroup14, DHGroup24, DHGroup2048, ECP256, ECP384.",
                          "type": "string"
                        },
                        "encryptionAlgorithm": {
                          "description": "The IPSec encryption algorithm (IKE phase 1). Possible values are AES128, AES192, AES256, DES, DES3, GCMAES128, GCMAES192, GCMAES256, None.",
                          "type": "string"
                        },
                        "ikeEncryptionAlgorithm": {
                          "description": "The IKE encryption algorithm (IKE phase 2). Possible values are DES, DES3, AES128, AES192, AES256, GCMAES128, GCMAES256.",
                          "type": "string"
                        },
                        "ikeIntegrityAlgorithm": {
                          "description": "The IKE integrity algorithm (IKE phase 2). Possible values are MD5, SHA1, SHA256, SHA384, GCMAES128, GCMAES256.",
                          "type": "string"
                        },
                        "integrityAlgorithm": {
                          "description": "The IPSec integrity algorithm (IKE phase 1). Possible values are MD5, SHA1, SHA256, GCMAES128, GCMAES192, GCMAES256.",
                          "type": "string"
                        },
                        "pfsGroup": {
                          "description": "The Pfs Group used in IKE Phase 2 for the new child SA. Possible values are None, PFS1, PFS2, PFS14, PFS24, PFS2048, PFSMM, ECP256, ECP384.",
                          "type": "string"
                        },
                        "saDataSizeKb": {
                          "description": "The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for the site to site VPN tunnel.",
                          "type": "number"
                        },
                        "saLifetimeSec": {
                          "description": "The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for the site to site VPN tunnel.",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "localAzureIpAddressEnabled": {
                    "description": "Whether to use local Azure IP to initiate connection? Defaults to false.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name which should be used for this VPN Link Connection.",
                    "type": "string"
                  },
                  "policyBasedTrafficSelectorEnabled": {
                    "description": "Whether to enable policy-based traffic selectors? Defaults to false.",
                    "type": "boolean"
                  },
                  "protocol": {
                    "description": "The protocol used for this VPN Link Connection. Possible values are IKEv1 and IKEv2. Defaults to IKEv2.",
                    "type": "string"
                  },
                  "ratelimitEnabled": {
                    "description": "Should the rate limit be enabled? Defaults to false.",
                    "type": "boolean"
                  },
                  "routeWeight": {
                    "description": "Routing weight for this VPN Link Connection. Defaults to 0.",
                    "type": "number"
                  },
                  "sharedKey": {
                    "description": "SharedKey for this VPN Link Connection.",
                    "type": "string"
                  },
                  "vpnSiteLinkId": {
                    "description": "The ID of the connected VPN Site Link. Changing this forces a new VPN Gateway Connection to be created.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vpnLink) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.vpnLink))",
          "message": "spec.forProvider.vpnLink is a required parameter"
        }
      ]
    }
  }
}