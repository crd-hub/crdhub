{
  "$schema": "http://json-schema.org/schema#",
  "description": "FrontDoor is the Schema for the FrontDoors API. Manages an Azure Front Door (classic) instance.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "network.azure.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "FrontDoor"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "FrontDoorSpec defines the desired state of FrontDoor",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "backendPool": {
              "description": "A backend_pool block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "backend": {
                    "description": "A backend block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "description": "Location of the backend (IP address or FQDN)",
                          "type": "string"
                        },
                        "enabled": {
                          "description": "Enable or Disable use of this Backend Routing Rule. Permitted values are true or false. Defaults to true.",
                          "type": "boolean"
                        },
                        "hostHeader": {
                          "description": "The value to use as the host header sent to the backend.",
                          "type": "string"
                        },
                        "httpPort": {
                          "description": "The HTTP TCP port number. Possible values are between 1 - 65535.",
                          "type": "number"
                        },
                        "httpsPort": {
                          "description": "The HTTPS TCP port number. Possible values are between 1 - 65535.",
                          "type": "number"
                        },
                        "priority": {
                          "description": "Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to 1.",
                          "type": "number"
                        },
                        "weight": {
                          "description": "Weight of this endpoint for load balancing purposes. Defaults to 50.",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "healthProbeName": {
                    "description": "Specifies the name of the backend_pool_health_probe block within this resource to use for this Backend Pool.",
                    "type": "string"
                  },
                  "loadBalancingName": {
                    "description": "Specifies the name of the backend_pool_load_balancing block within this resource to use for this Backend Pool.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Specifies the name of the Backend Pool.",
                    "type": "string"
                  }
                }
              }
            },
            "backendPoolHealthProbe": {
              "description": "A backend_pool_health_probe block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "description": "Is this health probe enabled? Defaults to true.",
                    "type": "boolean"
                  },
                  "intervalInSeconds": {
                    "description": "The number of seconds between each Health Probe. Defaults to 120.",
                    "type": "number"
                  },
                  "name": {
                    "description": "Specifies the name of the Health Probe.",
                    "type": "string"
                  },
                  "path": {
                    "description": "The path to use for the Health Probe. Default is /.",
                    "type": "string"
                  },
                  "probeMethod": {
                    "description": "Specifies HTTP method the health probe uses when querying the backend pool instances. Possible values include: Get and Head. Defaults to GET.",
                    "type": "string"
                  },
                  "protocol": {
                    "description": "Protocol scheme to use for the Health Probe. Possible values are Http and Https. Defaults to Http.",
                    "type": "string"
                  }
                }
              }
            },
            "backendPoolLoadBalancing": {
              "description": "A backend_pool_load_balancing block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "additionalLatencyMilliseconds": {
                    "description": "The additional latency in milliseconds for probes to fall into the lowest latency bucket. Defaults to 0.",
                    "type": "number"
                  },
                  "name": {
                    "description": "Specifies the name of the Load Balancer.",
                    "type": "string"
                  },
                  "sampleSize": {
                    "description": "The number of samples to consider for load balancing decisions. Defaults to 4.",
                    "type": "number"
                  },
                  "successfulSamplesRequired": {
                    "description": "The number of samples within the sample period that must succeed. Defaults to 2.",
                    "type": "number"
                  }
                }
              }
            },
            "backendPoolSettings": {
              "description": "A backend_pool_settings block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "backendPoolsSendReceiveTimeoutSeconds": {
                    "description": "Specifies the send and receive timeout on forwarding request to the backend. When the timeout is reached, the request fails and returns. Possible values are between 0 - 240. Defaults to 60.",
                    "type": "number"
                  },
                  "enforceBackendPoolsCertificateNameCheck": {
                    "description": "Enforce certificate name check on HTTPS requests to all backend pools, this setting will have no effect on HTTP requests. Permitted values are true or false.",
                    "type": "boolean"
                  }
                }
              }
            },
            "friendlyName": {
              "description": "A friendly name for the Front Door service.",
              "type": "string"
            },
            "frontendEndpoint": {
              "description": "A frontend_endpoint block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "hostName": {
                    "description": "Specifies the host name of the frontend_endpoint. Must be a domain name. In order to use a name.azurefd.net domain, the name value must match the Front Door name.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Specifies the name of the frontend_endpoint.",
                    "type": "string"
                  },
                  "sessionAffinityEnabled": {
                    "description": "Whether to allow session affinity on this host. Valid options are true or false Defaults to false.",
                    "type": "boolean"
                  },
                  "sessionAffinityTtlSeconds": {
                    "description": "The TTL to use in seconds for session affinity, if applicable. Defaults to 0.",
                    "type": "number"
                  },
                  "webApplicationFirewallPolicyLinkId": {
                    "description": "Defines the Web Application Firewall policy ID for each host.",
                    "type": "string"
                  }
                }
              }
            },
            "loadBalancerEnabled": {
              "description": "Should the Front Door Load Balancer be Enabled? Defaults to true.",
              "type": "boolean"
            },
            "resourceGroupName": {
              "description": "Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "routingRule": {
              "description": "A routing_rule block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "acceptedProtocols": {
                    "description": "Protocol schemes to match for the Backend Routing Rule. Possible values are Http and Https.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "enabled": {
                    "description": "Enable or Disable use of this Backend Routing Rule. Permitted values are true or false. Defaults to true.",
                    "type": "boolean"
                  },
                  "forwardingConfiguration": {
                    "description": "A forwarding_configuration block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backendPoolName": {
                          "description": "Specifies the name of the Backend Pool to forward the incoming traffic to.",
                          "type": "string"
                        },
                        "cacheDuration": {
                          "description": "Specify the minimum caching duration (in ISO8601 notation e.g. P1DT2H for 1 day and 2 hours). Needs to be greater than 0 and smaller than 365 days. cache_duration works only in combination with cache_enabled set to true.",
                          "type": "string"
                        },
                        "cacheEnabled": {
                          "description": "Specifies whether to Enable caching or not. Valid options are true or false. Defaults to false.",
                          "type": "boolean"
                        },
                        "cacheQueryParameterStripDirective": {
                          "description": "Defines cache behaviour in relation to query string parameters. Valid options are StripAll, StripAllExcept, StripOnly or StripNone. Defaults to StripAll.",
                          "type": "string"
                        },
                        "cacheQueryParameters": {
                          "description": "Specify query parameters (array). Works only in combination with cache_query_parameter_strip_directive set to StripAllExcept or StripOnly.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "cacheUseDynamicCompression": {
                          "description": "Whether to use dynamic compression when caching. Valid options are true or false. Defaults to false.",
                          "type": "boolean"
                        },
                        "customForwardingPath": {
                          "description": "Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behaviour preserves the URL path.",
                          "type": "string"
                        },
                        "forwardingProtocol": {
                          "description": "Protocol to use when redirecting. Valid options are HttpOnly, HttpsOnly, or MatchRequest. Defaults to HttpsOnly.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "frontendEndpoints": {
                    "description": "The names of the frontend_endpoint blocks within this resource to associate with this routing_rule.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "name": {
                    "description": "Specifies the name of the Routing Rule.",
                    "type": "string"
                  },
                  "patternsToMatch": {
                    "description": "The route patterns for the Backend Routing Rule.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "redirectConfiguration": {
                    "description": "A redirect_configuration block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "customFragment": {
                          "description": "The destination fragment in the portion of URL after '#'. Set this to add a fragment to the redirect URL.",
                          "type": "string"
                        },
                        "customHost": {
                          "description": "Set this to change the URL for the redirection.",
                          "type": "string"
                        },
                        "customPath": {
                          "description": "The path to retain as per the incoming request, or update in the URL for the redirection.",
                          "type": "string"
                        },
                        "customQueryString": {
                          "description": "Replace any existing query string from the incoming request URL.",
                          "type": "string"
                        },
                        "redirectProtocol": {
                          "description": "Protocol to use when redirecting. Valid options are HttpOnly, HttpsOnly, or MatchRequest.",
                          "type": "string"
                        },
                        "redirectType": {
                          "description": "Status code for the redirect. Valida options are Moved, Found, TemporaryRedirect, PermanentRedirect.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "backendPool": {
              "description": "A backend_pool block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "backend": {
                    "description": "A backend block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "description": "Location of the backend (IP address or FQDN)",
                          "type": "string"
                        },
                        "enabled": {
                          "description": "Enable or Disable use of this Backend Routing Rule. Permitted values are true or false. Defaults to true.",
                          "type": "boolean"
                        },
                        "hostHeader": {
                          "description": "The value to use as the host header sent to the backend.",
                          "type": "string"
                        },
                        "httpPort": {
                          "description": "The HTTP TCP port number. Possible values are between 1 - 65535.",
                          "type": "number"
                        },
                        "httpsPort": {
                          "description": "The HTTPS TCP port number. Possible values are between 1 - 65535.",
                          "type": "number"
                        },
                        "priority": {
                          "description": "Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to 1.",
                          "type": "number"
                        },
                        "weight": {
                          "description": "Weight of this endpoint for load balancing purposes. Defaults to 50.",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "healthProbeName": {
                    "description": "Specifies the name of the backend_pool_health_probe block within this resource to use for this Backend Pool.",
                    "type": "string"
                  },
                  "loadBalancingName": {
                    "description": "Specifies the name of the backend_pool_load_balancing block within this resource to use for this Backend Pool.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Specifies the name of the Backend Pool.",
                    "type": "string"
                  }
                }
              }
            },
            "backendPoolHealthProbe": {
              "description": "A backend_pool_health_probe block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "description": "Is this health probe enabled? Defaults to true.",
                    "type": "boolean"
                  },
                  "intervalInSeconds": {
                    "description": "The number of seconds between each Health Probe. Defaults to 120.",
                    "type": "number"
                  },
                  "name": {
                    "description": "Specifies the name of the Health Probe.",
                    "type": "string"
                  },
                  "path": {
                    "description": "The path to use for the Health Probe. Default is /.",
                    "type": "string"
                  },
                  "probeMethod": {
                    "description": "Specifies HTTP method the health probe uses when querying the backend pool instances. Possible values include: Get and Head. Defaults to GET.",
                    "type": "string"
                  },
                  "protocol": {
                    "description": "Protocol scheme to use for the Health Probe. Possible values are Http and Https. Defaults to Http.",
                    "type": "string"
                  }
                }
              }
            },
            "backendPoolLoadBalancing": {
              "description": "A backend_pool_load_balancing block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "additionalLatencyMilliseconds": {
                    "description": "The additional latency in milliseconds for probes to fall into the lowest latency bucket. Defaults to 0.",
                    "type": "number"
                  },
                  "name": {
                    "description": "Specifies the name of the Load Balancer.",
                    "type": "string"
                  },
                  "sampleSize": {
                    "description": "The number of samples to consider for load balancing decisions. Defaults to 4.",
                    "type": "number"
                  },
                  "successfulSamplesRequired": {
                    "description": "The number of samples within the sample period that must succeed. Defaults to 2.",
                    "type": "number"
                  }
                }
              }
            },
            "backendPoolSettings": {
              "description": "A backend_pool_settings block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "backendPoolsSendReceiveTimeoutSeconds": {
                    "description": "Specifies the send and receive timeout on forwarding request to the backend. When the timeout is reached, the request fails and returns. Possible values are between 0 - 240. Defaults to 60.",
                    "type": "number"
                  },
                  "enforceBackendPoolsCertificateNameCheck": {
                    "description": "Enforce certificate name check on HTTPS requests to all backend pools, this setting will have no effect on HTTP requests. Permitted values are true or false.",
                    "type": "boolean"
                  }
                }
              }
            },
            "friendlyName": {
              "description": "A friendly name for the Front Door service.",
              "type": "string"
            },
            "frontendEndpoint": {
              "description": "A frontend_endpoint block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "hostName": {
                    "description": "Specifies the host name of the frontend_endpoint. Must be a domain name. In order to use a name.azurefd.net domain, the name value must match the Front Door name.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Specifies the name of the frontend_endpoint.",
                    "type": "string"
                  },
                  "sessionAffinityEnabled": {
                    "description": "Whether to allow session affinity on this host. Valid options are true or false Defaults to false.",
                    "type": "boolean"
                  },
                  "sessionAffinityTtlSeconds": {
                    "description": "The TTL to use in seconds for session affinity, if applicable. Defaults to 0.",
                    "type": "number"
                  },
                  "webApplicationFirewallPolicyLinkId": {
                    "description": "Defines the Web Application Firewall policy ID for each host.",
                    "type": "string"
                  }
                }
              }
            },
            "loadBalancerEnabled": {
              "description": "Should the Front Door Load Balancer be Enabled? Defaults to true.",
              "type": "boolean"
            },
            "routingRule": {
              "description": "A routing_rule block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "acceptedProtocols": {
                    "description": "Protocol schemes to match for the Backend Routing Rule. Possible values are Http and Https.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "enabled": {
                    "description": "Enable or Disable use of this Backend Routing Rule. Permitted values are true or false. Defaults to true.",
                    "type": "boolean"
                  },
                  "forwardingConfiguration": {
                    "description": "A forwarding_configuration block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backendPoolName": {
                          "description": "Specifies the name of the Backend Pool to forward the incoming traffic to.",
                          "type": "string"
                        },
                        "cacheDuration": {
                          "description": "Specify the minimum caching duration (in ISO8601 notation e.g. P1DT2H for 1 day and 2 hours). Needs to be greater than 0 and smaller than 365 days. cache_duration works only in combination with cache_enabled set to true.",
                          "type": "string"
                        },
                        "cacheEnabled": {
                          "description": "Specifies whether to Enable caching or not. Valid options are true or false. Defaults to false.",
                          "type": "boolean"
                        },
                        "cacheQueryParameterStripDirective": {
                          "description": "Defines cache behaviour in relation to query string parameters. Valid options are StripAll, StripAllExcept, StripOnly or StripNone. Defaults to StripAll.",
                          "type": "string"
                        },
                        "cacheQueryParameters": {
                          "description": "Specify query parameters (array). Works only in combination with cache_query_parameter_strip_directive set to StripAllExcept or StripOnly.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "cacheUseDynamicCompression": {
                          "description": "Whether to use dynamic compression when caching. Valid options are true or false. Defaults to false.",
                          "type": "boolean"
                        },
                        "customForwardingPath": {
                          "description": "Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behaviour preserves the URL path.",
                          "type": "string"
                        },
                        "forwardingProtocol": {
                          "description": "Protocol to use when redirecting. Valid options are HttpOnly, HttpsOnly, or MatchRequest. Defaults to HttpsOnly.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "frontendEndpoints": {
                    "description": "The names of the frontend_endpoint blocks within this resource to associate with this routing_rule.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "name": {
                    "description": "Specifies the name of the Routing Rule.",
                    "type": "string"
                  },
                  "patternsToMatch": {
                    "description": "The route patterns for the Backend Routing Rule.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "redirectConfiguration": {
                    "description": "A redirect_configuration block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "customFragment": {
                          "description": "The destination fragment in the portion of URL after '#'. Set this to add a fragment to the redirect URL.",
                          "type": "string"
                        },
                        "customHost": {
                          "description": "Set this to change the URL for the redirection.",
                          "type": "string"
                        },
                        "customPath": {
                          "description": "The path to retain as per the incoming request, or update in the URL for the redirection.",
                          "type": "string"
                        },
                        "customQueryString": {
                          "description": "Replace any existing query string from the incoming request URL.",
                          "type": "string"
                        },
                        "redirectProtocol": {
                          "description": "Protocol to use when redirecting. Valid options are HttpOnly, HttpsOnly, or MatchRequest.",
                          "type": "string"
                        },
                        "redirectType": {
                          "description": "Status code for the redirect. Valida options are Moved, Found, TemporaryRedirect, PermanentRedirect.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backendPool) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.backendPool))",
          "message": "spec.forProvider.backendPool is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backendPoolHealthProbe) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.backendPoolHealthProbe))",
          "message": "spec.forProvider.backendPoolHealthProbe is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backendPoolLoadBalancing) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.backendPoolLoadBalancing))",
          "message": "spec.forProvider.backendPoolLoadBalancing is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.frontendEndpoint) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.frontendEndpoint))",
          "message": "spec.forProvider.frontendEndpoint is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.routingRule) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.routingRule))",
          "message": "spec.forProvider.routingRule is a required parameter"
        }
      ]
    }
  }
}