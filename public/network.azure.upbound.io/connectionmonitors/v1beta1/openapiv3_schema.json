{
  "$schema": "http://json-schema.org/schema#",
  "description": "ConnectionMonitor is the Schema for the ConnectionMonitors API. Manages a Network Connection Monitor.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "network.azure.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "ConnectionMonitor"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "ConnectionMonitorSpec defines the desired state of ConnectionMonitor",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "endpoint": {
              "description": "A endpoint block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "address": {
                    "description": "The IP address or domain name of the Network Connection Monitor endpoint.",
                    "type": "string"
                  },
                  "coverageLevel": {
                    "description": "The test coverage for the Network Connection Monitor endpoint. Possible values are AboveAverage, Average, BelowAverage, Default, Full and Low.",
                    "type": "string"
                  },
                  "excludedIpAddresses": {
                    "description": "A list of IPv4/IPv6 subnet masks or IPv4/IPv6 IP addresses to be excluded to the Network Connection Monitor endpoint.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "filter": {
                    "description": "A filter block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "item": {
                          "description": "A item block as defined below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "description": "The address of the filter item.",
                                "type": "string"
                              },
                              "type": {
                                "description": "The type of items included in the filter. Possible values are AgentAddress. Defaults to AgentAddress.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "type": {
                          "description": "The type of items included in the filter. Possible values are AgentAddress. Defaults to AgentAddress.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "includedIpAddresses": {
                    "description": "A list of IPv4/IPv6 subnet masks or IPv4/IPv6 IP addresses to be included to the Network Connection Monitor endpoint.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "name": {
                    "description": "The name of the endpoint for the Network Connection Monitor .",
                    "type": "string"
                  },
                  "targetResourceId": {
                    "description": "The resource ID which is used as the endpoint by the Network Connection Monitor.",
                    "type": "string"
                  },
                  "targetResourceType": {
                    "description": "The endpoint type of the Network Connection Monitor. Possible values are AzureSubnet, AzureVM, AzureVNet, ExternalAddress, MMAWorkspaceMachine and MMAWorkspaceNetwork.",
                    "type": "string"
                  }
                }
              }
            },
            "location": {
              "description": "The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "networkWatcherId": {
              "description": "The ID of the Network Watcher. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "networkWatcherIdRef": {
              "description": "Reference to a Watcher to populate networkWatcherId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "networkWatcherIdSelector": {
              "description": "Selector for a Watcher to populate networkWatcherId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "notes": {
              "description": "The description of the Network Connection Monitor.",
              "type": "string"
            },
            "outputWorkspaceResourceIds": {
              "description": "A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "tags": {
              "description": "A mapping of tags which should be assigned to the Network Connection Monitor.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "testConfiguration": {
              "description": "A test_configuration block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "httpConfiguration": {
                    "description": "A http_configuration block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "description": "The HTTP method for the HTTP request. Possible values are Get and Post. Defaults to Get.",
                          "type": "string"
                        },
                        "path": {
                          "description": "The path component of the URI. It only accepts the absolute path.",
                          "type": "string"
                        },
                        "port": {
                          "description": "The port for the TCP connection.",
                          "type": "number"
                        },
                        "preferHttps": {
                          "description": "Should HTTPS be preferred over HTTP in cases where the choice is not explicit? Defaults to false.",
                          "type": "boolean"
                        },
                        "requestHeader": {
                          "description": "A request_header block as defined below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "The name of the test group for the Network Connection Monitor.",
                                "type": "string"
                              },
                              "value": {
                                "description": "The value of the HTTP header.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "validStatusCodeRanges": {
                          "description": "The HTTP status codes to consider successful. For instance, 2xx, 301-304 and 418.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "icmpConfiguration": {
                    "description": "A icmp_configuration block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "traceRouteEnabled": {
                          "description": "Should path evaluation with trace route be enabled? Defaults to true.",
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "name": {
                    "description": "The name of test configuration for the Network Connection Monitor.",
                    "type": "string"
                  },
                  "preferredIpVersion": {
                    "description": "The preferred IP version which is used in the test evaluation. Possible values are IPv4 and IPv6.",
                    "type": "string"
                  },
                  "protocol": {
                    "description": "The protocol used to evaluate tests. Possible values are Tcp, Http and Icmp.",
                    "type": "string"
                  },
                  "successThreshold": {
                    "description": "A success_threshold block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "checksFailedPercent": {
                          "description": "The maximum percentage of failed checks permitted for a test to be successful.",
                          "type": "number"
                        },
                        "roundTripTimeMs": {
                          "description": "The maximum round-trip time in milliseconds permitted for a test to be successful.",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "tcpConfiguration": {
                    "description": "A tcp_configuration block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "destinationPortBehavior": {
                          "description": "The destination port behavior for the TCP connection. Possible values are None and ListenIfAvailable.",
                          "type": "string"
                        },
                        "port": {
                          "description": "The port for the TCP connection.",
                          "type": "number"
                        },
                        "traceRouteEnabled": {
                          "description": "Should path evaluation with trace route be enabled? Defaults to true.",
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "testFrequencyInSeconds": {
                    "description": "The time interval in seconds at which the test evaluation will happen. Defaults to 60.",
                    "type": "number"
                  }
                }
              }
            },
            "testGroup": {
              "description": "A test_group block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "destinationEndpoints": {
                    "description": "A list of destination endpoint names.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "enabled": {
                    "description": "Should the test group be enabled? Defaults to true.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name of the test group for the Network Connection Monitor.",
                    "type": "string"
                  },
                  "sourceEndpoints": {
                    "description": "A list of source endpoint names.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "testConfigurationNames": {
                    "description": "A list of test configuration names.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "endpoint": {
              "description": "A endpoint block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "address": {
                    "description": "The IP address or domain name of the Network Connection Monitor endpoint.",
                    "type": "string"
                  },
                  "coverageLevel": {
                    "description": "The test coverage for the Network Connection Monitor endpoint. Possible values are AboveAverage, Average, BelowAverage, Default, Full and Low.",
                    "type": "string"
                  },
                  "excludedIpAddresses": {
                    "description": "A list of IPv4/IPv6 subnet masks or IPv4/IPv6 IP addresses to be excluded to the Network Connection Monitor endpoint.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "filter": {
                    "description": "A filter block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "item": {
                          "description": "A item block as defined below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "description": "The address of the filter item.",
                                "type": "string"
                              },
                              "type": {
                                "description": "The type of items included in the filter. Possible values are AgentAddress. Defaults to AgentAddress.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "type": {
                          "description": "The type of items included in the filter. Possible values are AgentAddress. Defaults to AgentAddress.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "includedIpAddresses": {
                    "description": "A list of IPv4/IPv6 subnet masks or IPv4/IPv6 IP addresses to be included to the Network Connection Monitor endpoint.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "name": {
                    "description": "The name of the endpoint for the Network Connection Monitor .",
                    "type": "string"
                  },
                  "targetResourceId": {
                    "description": "The resource ID which is used as the endpoint by the Network Connection Monitor.",
                    "type": "string"
                  },
                  "targetResourceType": {
                    "description": "The endpoint type of the Network Connection Monitor. Possible values are AzureSubnet, AzureVM, AzureVNet, ExternalAddress, MMAWorkspaceMachine and MMAWorkspaceNetwork.",
                    "type": "string"
                  }
                }
              }
            },
            "location": {
              "description": "The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "notes": {
              "description": "The description of the Network Connection Monitor.",
              "type": "string"
            },
            "outputWorkspaceResourceIds": {
              "description": "A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "tags": {
              "description": "A mapping of tags which should be assigned to the Network Connection Monitor.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "testConfiguration": {
              "description": "A test_configuration block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "httpConfiguration": {
                    "description": "A http_configuration block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "description": "The HTTP method for the HTTP request. Possible values are Get and Post. Defaults to Get.",
                          "type": "string"
                        },
                        "path": {
                          "description": "The path component of the URI. It only accepts the absolute path.",
                          "type": "string"
                        },
                        "port": {
                          "description": "The port for the TCP connection.",
                          "type": "number"
                        },
                        "preferHttps": {
                          "description": "Should HTTPS be preferred over HTTP in cases where the choice is not explicit? Defaults to false.",
                          "type": "boolean"
                        },
                        "requestHeader": {
                          "description": "A request_header block as defined below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "The name of the test group for the Network Connection Monitor.",
                                "type": "string"
                              },
                              "value": {
                                "description": "The value of the HTTP header.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "validStatusCodeRanges": {
                          "description": "The HTTP status codes to consider successful. For instance, 2xx, 301-304 and 418.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "icmpConfiguration": {
                    "description": "A icmp_configuration block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "traceRouteEnabled": {
                          "description": "Should path evaluation with trace route be enabled? Defaults to true.",
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "name": {
                    "description": "The name of test configuration for the Network Connection Monitor.",
                    "type": "string"
                  },
                  "preferredIpVersion": {
                    "description": "The preferred IP version which is used in the test evaluation. Possible values are IPv4 and IPv6.",
                    "type": "string"
                  },
                  "protocol": {
                    "description": "The protocol used to evaluate tests. Possible values are Tcp, Http and Icmp.",
                    "type": "string"
                  },
                  "successThreshold": {
                    "description": "A success_threshold block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "checksFailedPercent": {
                          "description": "The maximum percentage of failed checks permitted for a test to be successful.",
                          "type": "number"
                        },
                        "roundTripTimeMs": {
                          "description": "The maximum round-trip time in milliseconds permitted for a test to be successful.",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "tcpConfiguration": {
                    "description": "A tcp_configuration block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "destinationPortBehavior": {
                          "description": "The destination port behavior for the TCP connection. Possible values are None and ListenIfAvailable.",
                          "type": "string"
                        },
                        "port": {
                          "description": "The port for the TCP connection.",
                          "type": "number"
                        },
                        "traceRouteEnabled": {
                          "description": "Should path evaluation with trace route be enabled? Defaults to true.",
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "testFrequencyInSeconds": {
                    "description": "The time interval in seconds at which the test evaluation will happen. Defaults to 60.",
                    "type": "number"
                  }
                }
              }
            },
            "testGroup": {
              "description": "A test_group block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "destinationEndpoints": {
                    "description": "A list of destination endpoint names.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "enabled": {
                    "description": "Should the test group be enabled? Defaults to true.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name of the test group for the Network Connection Monitor.",
                    "type": "string"
                  },
                  "sourceEndpoints": {
                    "description": "A list of source endpoint names.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "testConfigurationNames": {
                    "description": "A list of test configuration names.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endpoint) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.endpoint))",
          "message": "spec.forProvider.endpoint is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.location))",
          "message": "spec.forProvider.location is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.testConfiguration) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.testConfiguration))",
          "message": "spec.forProvider.testConfiguration is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.testGroup) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.testGroup))",
          "message": "spec.forProvider.testGroup is a required parameter"
        }
      ]
    }
  }
}