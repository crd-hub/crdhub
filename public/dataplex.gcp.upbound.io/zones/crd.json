{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "zones.dataplex.gcp.upbound.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.13.0"
    }
  },
  "spec": {
    "group": "dataplex.gcp.upbound.io",
    "names": {
      "plural": "zones",
      "singular": "zone",
      "kind": "Zone",
      "listKind": "ZoneList",
      "categories": [
        "crossplane",
        "managed",
        "gcp"
      ]
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "Zone is the Schema for the Zones API. The Dataplex Zone resource",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "ZoneSpec defines the desired state of Zone",
                "type": "object",
                "required": [
                  "forProvider"
                ],
                "properties": {
                  "deletionPolicy": {
                    "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
                    "type": "string",
                    "default": "Delete",
                    "enum": [
                      "Orphan",
                      "Delete"
                    ]
                  },
                  "forProvider": {
                    "type": "object",
                    "required": [
                      "location"
                    ],
                    "properties": {
                      "description": {
                        "description": "Optional. Description of the zone.",
                        "type": "string"
                      },
                      "discoverySpec": {
                        "description": "Required. Specification of the discovery feature applied to data in this zone.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "csvOptions": {
                              "description": "Optional. Configuration for CSV data.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "delimiter": {
                                    "description": "Optional. The delimiter being used to separate values. This defaults to ','.",
                                    "type": "string"
                                  },
                                  "disableTypeInference": {
                                    "description": "Optional. Whether to disable the inference of data type for Json data. If true, all columns will be registered as their primitive types (strings, number or boolean).",
                                    "type": "boolean"
                                  },
                                  "encoding": {
                                    "description": "Optional. The character encoding of the data. The default is UTF-8.",
                                    "type": "string"
                                  },
                                  "headerRows": {
                                    "description": "Optional. The number of rows to interpret as header rows that should be skipped when reading data rows.",
                                    "type": "number"
                                  }
                                }
                              }
                            },
                            "enabled": {
                              "description": "Required. Whether discovery is enabled.",
                              "type": "boolean"
                            },
                            "excludePatterns": {
                              "description": "Optional. The list of patterns to apply for selecting data to exclude during discovery. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "includePatterns": {
                              "description": "Optional. The list of patterns to apply for selecting data to include during discovery if only a subset of the data should considered. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "jsonOptions": {
                              "description": "Optional. Configuration for Json data.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "disableTypeInference": {
                                    "description": "Optional. Whether to disable the inference of data type for Json data. If true, all columns will be registered as their primitive types (strings, number or boolean).",
                                    "type": "boolean"
                                  },
                                  "encoding": {
                                    "description": "Optional. The character encoding of the data. The default is UTF-8.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "schedule": {
                              "description": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "displayName": {
                        "description": "Optional. User friendly display name.",
                        "type": "string"
                      },
                      "labels": {
                        "description": "Optional. User defined labels for the zone.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "lake": {
                        "description": "The lake for the resource",
                        "type": "string"
                      },
                      "lakeRef": {
                        "description": "Reference to a Lake in dataplex to populate lake.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "lakeSelector": {
                        "description": "Selector for a Lake in dataplex to populate lake.",
                        "type": "object",
                        "properties": {
                          "matchControllerRef": {
                            "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                            "type": "boolean"
                          },
                          "matchLabels": {
                            "description": "MatchLabels ensures an object with matching labels is selected.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "policy": {
                            "description": "Policies for selection.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "location": {
                        "description": "The location for the resource",
                        "type": "string"
                      },
                      "project": {
                        "description": "The project for the resource",
                        "type": "string"
                      },
                      "resourceSpec": {
                        "description": "Required. Immutable. Specification of the resources that are referenced by the assets within this zone.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "locationType": {
                              "description": "Required. Immutable. The location type of the resources that are allowed to be attached to the assets within this zone. Possible values: LOCATION_TYPE_UNSPECIFIED, SINGLE_REGION, MULTI_REGION",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "type": {
                        "description": "Required. Immutable. The type of the zone. Possible values: TYPE_UNSPECIFIED, RAW, CURATED",
                        "type": "string"
                      }
                    }
                  },
                  "initProvider": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
                    "type": "object",
                    "properties": {
                      "description": {
                        "description": "Optional. Description of the zone.",
                        "type": "string"
                      },
                      "discoverySpec": {
                        "description": "Required. Specification of the discovery feature applied to data in this zone.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "csvOptions": {
                              "description": "Optional. Configuration for CSV data.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "delimiter": {
                                    "description": "Optional. The delimiter being used to separate values. This defaults to ','.",
                                    "type": "string"
                                  },
                                  "disableTypeInference": {
                                    "description": "Optional. Whether to disable the inference of data type for Json data. If true, all columns will be registered as their primitive types (strings, number or boolean).",
                                    "type": "boolean"
                                  },
                                  "encoding": {
                                    "description": "Optional. The character encoding of the data. The default is UTF-8.",
                                    "type": "string"
                                  },
                                  "headerRows": {
                                    "description": "Optional. The number of rows to interpret as header rows that should be skipped when reading data rows.",
                                    "type": "number"
                                  }
                                }
                              }
                            },
                            "enabled": {
                              "description": "Required. Whether discovery is enabled.",
                              "type": "boolean"
                            },
                            "excludePatterns": {
                              "description": "Optional. The list of patterns to apply for selecting data to exclude during discovery. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "includePatterns": {
                              "description": "Optional. The list of patterns to apply for selecting data to include during discovery if only a subset of the data should considered. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "jsonOptions": {
                              "description": "Optional. Configuration for Json data.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "disableTypeInference": {
                                    "description": "Optional. Whether to disable the inference of data type for Json data. If true, all columns will be registered as their primitive types (strings, number or boolean).",
                                    "type": "boolean"
                                  },
                                  "encoding": {
                                    "description": "Optional. The character encoding of the data. The default is UTF-8.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "schedule": {
                              "description": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "displayName": {
                        "description": "Optional. User friendly display name.",
                        "type": "string"
                      },
                      "labels": {
                        "description": "Optional. User defined labels for the zone.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "project": {
                        "description": "The project for the resource",
                        "type": "string"
                      },
                      "resourceSpec": {
                        "description": "Required. Immutable. Specification of the resources that are referenced by the assets within this zone.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "locationType": {
                              "description": "Required. Immutable. The location type of the resources that are allowed to be attached to the assets within this zone. Possible values: LOCATION_TYPE_UNSPECIFIED, SINGLE_REGION, MULTI_REGION",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "type": {
                        "description": "Required. Immutable. The type of the zone. Possible values: TYPE_UNSPECIFIED, RAW, CURATED",
                        "type": "string"
                      }
                    }
                  },
                  "managementPolicies": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
                    "type": "array",
                    "default": [
                      "*"
                    ],
                    "items": {
                      "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
                      "type": "string",
                      "enum": [
                        "Observe",
                        "Create",
                        "Update",
                        "Delete",
                        "LateInitialize",
                        "*"
                      ]
                    }
                  },
                  "providerConfigRef": {
                    "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
                    "type": "object",
                    "default": {
                      "name": "default"
                    },
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "publishConnectionDetailsTo": {
                    "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "configRef": {
                        "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
                        "type": "object",
                        "default": {
                          "name": "default"
                        },
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "Metadata is the metadata for connection secret.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "type": {
                            "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name of the connection secret.",
                        "type": "string"
                      }
                    }
                  },
                  "writeConnectionSecretToRef": {
                    "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
                    "type": "object",
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  }
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.discoverySpec) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.discoverySpec))",
                    "message": "spec.forProvider.discoverySpec is a required parameter"
                  },
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceSpec) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.resourceSpec))",
                    "message": "spec.forProvider.resourceSpec is a required parameter"
                  },
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.type))",
                    "message": "spec.forProvider.type is a required parameter"
                  }
                ]
              },
              "status": {
                "description": "ZoneStatus defines the observed state of Zone.",
                "type": "object",
                "properties": {
                  "atProvider": {
                    "type": "object",
                    "properties": {
                      "assetStatus": {
                        "description": "Output only. Aggregated status of the underlying assets of the zone.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "activeAssets": {
                              "type": "number"
                            },
                            "securityPolicyApplyingAssets": {
                              "type": "number"
                            },
                            "updateTime": {
                              "description": "Output only. The time when the zone was last updated.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "createTime": {
                        "description": "Output only. The time when the zone was created.",
                        "type": "string"
                      },
                      "description": {
                        "description": "Optional. Description of the zone.",
                        "type": "string"
                      },
                      "discoverySpec": {
                        "description": "Required. Specification of the discovery feature applied to data in this zone.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "csvOptions": {
                              "description": "Optional. Configuration for CSV data.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "delimiter": {
                                    "description": "Optional. The delimiter being used to separate values. This defaults to ','.",
                                    "type": "string"
                                  },
                                  "disableTypeInference": {
                                    "description": "Optional. Whether to disable the inference of data type for Json data. If true, all columns will be registered as their primitive types (strings, number or boolean).",
                                    "type": "boolean"
                                  },
                                  "encoding": {
                                    "description": "Optional. The character encoding of the data. The default is UTF-8.",
                                    "type": "string"
                                  },
                                  "headerRows": {
                                    "description": "Optional. The number of rows to interpret as header rows that should be skipped when reading data rows.",
                                    "type": "number"
                                  }
                                }
                              }
                            },
                            "enabled": {
                              "description": "Required. Whether discovery is enabled.",
                              "type": "boolean"
                            },
                            "excludePatterns": {
                              "description": "Optional. The list of patterns to apply for selecting data to exclude during discovery. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "includePatterns": {
                              "description": "Optional. The list of patterns to apply for selecting data to include during discovery if only a subset of the data should considered. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "jsonOptions": {
                              "description": "Optional. Configuration for Json data.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "disableTypeInference": {
                                    "description": "Optional. Whether to disable the inference of data type for Json data. If true, all columns will be registered as their primitive types (strings, number or boolean).",
                                    "type": "boolean"
                                  },
                                  "encoding": {
                                    "description": "Optional. The character encoding of the data. The default is UTF-8.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "schedule": {
                              "description": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "displayName": {
                        "description": "Optional. User friendly display name.",
                        "type": "string"
                      },
                      "id": {
                        "description": "an identifier for the resource with format projects/{{project}}/locations/{{location}}/lakes/{{lake}}/zones/{{name}}",
                        "type": "string"
                      },
                      "labels": {
                        "description": "Optional. User defined labels for the zone.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "lake": {
                        "description": "The lake for the resource",
                        "type": "string"
                      },
                      "location": {
                        "description": "The location for the resource",
                        "type": "string"
                      },
                      "project": {
                        "description": "The project for the resource",
                        "type": "string"
                      },
                      "resourceSpec": {
                        "description": "Required. Immutable. Specification of the resources that are referenced by the assets within this zone.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "locationType": {
                              "description": "Required. Immutable. The location type of the resources that are allowed to be attached to the assets within this zone. Possible values: LOCATION_TYPE_UNSPECIFIED, SINGLE_REGION, MULTI_REGION",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "state": {
                        "description": "Output only. Current state of the zone. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED",
                        "type": "string"
                      },
                      "type": {
                        "description": "Required. Immutable. The type of the zone. Possible values: TYPE_UNSPECIFIED, RAW, CURATED",
                        "type": "string"
                      },
                      "uid": {
                        "description": "Output only. System generated globally unique ID for the zone. This ID will be different if the zone is deleted and re-created with the same name.",
                        "type": "string"
                      },
                      "updateTime": {
                        "description": "Output only. The time when the zone was last updated.",
                        "type": "string"
                      }
                    }
                  },
                  "conditions": {
                    "description": "Conditions of the resource.",
                    "type": "array",
                    "items": {
                      "description": "A Condition that may apply to a resource.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "A Reason for this condition's last transition from one status to another.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of this condition; is it currently True, False, or Unknown?",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "READY",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
          },
          {
            "name": "SYNCED",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Synced')].status"
          },
          {
            "name": "EXTERNAL-NAME",
            "type": "string",
            "jsonPath": ".metadata.annotations.crossplane\\.io/external-name"
          },
          {
            "name": "AGE",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}