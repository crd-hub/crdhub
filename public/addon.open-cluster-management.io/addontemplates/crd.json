{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "addontemplates.addon.open-cluster-management.io",
    "creationTimestamp": null
  },
  "spec": {
    "group": "addon.open-cluster-management.io",
    "names": {
      "plural": "addontemplates",
      "singular": "addontemplate",
      "kind": "AddOnTemplate",
      "listKind": "AddOnTemplateList"
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1alpha1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "AddOnTemplate is the Custom Resource object, it is used to describe\nhow to deploy the addon agent and how to register the addon.\n\n\nAddOnTemplate is a cluster-scoped resource, and will only be used\non the hub cluster.",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "spec holds the registration configuration for the addon and the\naddon agent resources yaml description.",
                "type": "object",
                "required": [
                  "addonName",
                  "agentSpec"
                ],
                "properties": {
                  "addonName": {
                    "description": "AddonName represents the name of the addon which the template belongs to",
                    "type": "string"
                  },
                  "agentSpec": {
                    "description": "AgentSpec describes what/how the kubernetes resources of the addon agent to be deployed on a managed cluster.",
                    "type": "object",
                    "properties": {
                      "deleteOption": {
                        "description": "DeleteOption represents deletion strategy when the manifestwork is deleted.\nForeground deletion strategy is applied to all the resource in this manifestwork if it is not set.",
                        "type": "object",
                        "properties": {
                          "propagationPolicy": {
                            "description": "propagationPolicy can be Foreground, Orphan or SelectivelyOrphan\nSelectivelyOrphan should be rarely used.  It is provided for cases where particular resources is transfering\nownership from one ManifestWork to another or another management unit.\nSetting this value will allow a flow like\n1. create manifestwork/2 to manage foo\n2. update manifestwork/1 to selectively orphan foo\n3. remove foo from manifestwork/1 without impacting continuity because manifestwork/2 adopts it.",
                            "type": "string",
                            "default": "Foreground",
                            "enum": [
                              "Foreground",
                              "Orphan",
                              "SelectivelyOrphan"
                            ]
                          },
                          "selectivelyOrphans": {
                            "description": "selectivelyOrphan represents a list of resources following orphan deletion stratecy",
                            "type": "object",
                            "properties": {
                              "orphaningRules": {
                                "description": "orphaningRules defines a slice of orphaningrule.\nEach orphaningrule identifies a single resource included in this manifestwork",
                                "type": "array",
                                "items": {
                                  "description": "OrphaningRule identifies a single resource included in this manifestwork to be orphaned",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "resource"
                                  ],
                                  "properties": {
                                    "group": {
                                      "description": "Group is the API Group of the Kubernetes resource,\nempty string indicates it is in core group.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name is the name of the Kubernetes resource.",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Name is the namespace of the Kubernetes resource, empty string indicates\nit is a cluster scoped resource.",
                                      "type": "string"
                                    },
                                    "resource": {
                                      "description": "Resource is the resource name of the Kubernetes resource.",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "executor": {
                        "description": "Executor is the configuration that makes the work agent to perform some pre-request processing/checking.\ne.g. the executor identity tells the work agent to check the executor has sufficient permission to write\nthe workloads to the local managed cluster.\nNote that nil executor is still supported for backward-compatibility which indicates that the work agent\nwill not perform any additional actions before applying resources.",
                        "type": "object",
                        "properties": {
                          "subject": {
                            "description": "Subject is the subject identity which the work agent uses to talk to the\nlocal cluster when applying the resources.",
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "serviceAccount": {
                                "description": "ServiceAccount is for identifying which service account to use by the work agent.\nOnly required if the type is \"ServiceAccount\".",
                                "type": "object",
                                "required": [
                                  "name",
                                  "namespace"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name is the name of the service account.",
                                    "type": "string",
                                    "maxLength": 253,
                                    "minLength": 1,
                                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)$"
                                  },
                                  "namespace": {
                                    "description": "Namespace is the namespace of the service account.",
                                    "type": "string",
                                    "maxLength": 253,
                                    "minLength": 1,
                                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)$"
                                  }
                                }
                              },
                              "type": {
                                "description": "Type is the type of the subject identity.\nSupported types are: \"ServiceAccount\".",
                                "type": "string",
                                "enum": [
                                  "ServiceAccount"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "manifestConfigs": {
                        "description": "ManifestConfigs represents the configurations of manifests defined in workload field.",
                        "type": "array",
                        "items": {
                          "description": "ManifestConfigOption represents the configurations of a manifest defined in workload field.",
                          "type": "object",
                          "required": [
                            "resourceIdentifier"
                          ],
                          "properties": {
                            "feedbackRules": {
                              "description": "FeedbackRules defines what resource status field should be returned. If it is not set or empty,\nno feedback rules will be honored.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "required": [
                                  "type"
                                ],
                                "properties": {
                                  "jsonPaths": {
                                    "description": "JsonPaths defines the json path under status field to be synced.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "name",
                                        "path"
                                      ],
                                      "properties": {
                                        "name": {
                                          "description": "Name represents the alias name for this field",
                                          "type": "string"
                                        },
                                        "path": {
                                          "description": "Path represents the json path of the field under status.\nThe path must point to a field with single value in the type of integer, bool or string.\nIf the path points to a non-existing field, no value will be returned.\nIf the path points to a structure, map or slice, no value will be returned and the status conddition\nof StatusFeedBackSynced will be set as false.\nRef to https://kubernetes.io/docs/reference/kubectl/jsonpath/ on how to write a jsonPath.",
                                          "type": "string"
                                        },
                                        "version": {
                                          "description": "Version is the version of the Kubernetes resource.\nIf it is not specified, the resource with the semantically latest version is\nused to resolve the path.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "type": {
                                    "description": "Type defines the option of how status can be returned.\nIt can be jsonPaths or wellKnownStatus.\nIf the type is JSONPaths, user should specify the jsonPaths field\nIf the type is WellKnownStatus, certain common fields of status defined by a rule only\nfor types in in k8s.io/api and open-cluster-management/api will be reported,\nIf these status fields do not exist, no values will be reported.",
                                    "type": "string",
                                    "enum": [
                                      "WellKnownStatus",
                                      "JSONPaths"
                                    ]
                                  }
                                }
                              }
                            },
                            "resourceIdentifier": {
                              "description": "ResourceIdentifier represents the group, resource, name and namespace of a resoure.\niff this refers to a resource not created by this manifest work, the related rules will not be executed.",
                              "type": "object",
                              "required": [
                                "name",
                                "resource"
                              ],
                              "properties": {
                                "group": {
                                  "description": "Group is the API Group of the Kubernetes resource,\nempty string indicates it is in core group.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name is the name of the Kubernetes resource.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Name is the namespace of the Kubernetes resource, empty string indicates\nit is a cluster scoped resource.",
                                  "type": "string"
                                },
                                "resource": {
                                  "description": "Resource is the resource name of the Kubernetes resource.",
                                  "type": "string"
                                }
                              }
                            },
                            "updateStrategy": {
                              "description": "UpdateStrategy defines the strategy to update this manifest. UpdateStrategy is Update\nif it is not set.",
                              "type": "object",
                              "required": [
                                "type"
                              ],
                              "properties": {
                                "serverSideApply": {
                                  "description": "serverSideApply defines the configuration for server side apply. It is honored only when\ntype of updateStrategy is ServerSideApply",
                                  "type": "object",
                                  "properties": {
                                    "fieldManager": {
                                      "description": "FieldManager is the manager to apply the resource. It is work-agent by default, but can be other name with work-agent\nas the prefix.",
                                      "type": "string",
                                      "default": "work-agent",
                                      "pattern": "^work-agent"
                                    },
                                    "force": {
                                      "description": "Force represents to force apply the manifest.",
                                      "type": "boolean"
                                    }
                                  }
                                },
                                "type": {
                                  "description": "type defines the strategy to update this manifest, default value is Update.\nUpdate type means to update resource by an update call.\nCreateOnly type means do not update resource based on current manifest.\nServerSideApply type means to update resource using server side apply with work-controller as the field manager.\nIf there is conflict, the related Applied condition of manifest will be in the status of False with the\nreason of ApplyConflict.\nReadOnly type means the agent will only check the existence of the resource based on its metadata,\nstatusFeedBackRules can still be used to get feedbackResults.",
                                  "type": "string",
                                  "default": "Update",
                                  "enum": [
                                    "Update",
                                    "CreateOnly",
                                    "ServerSideApply",
                                    "ReadOnly"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      },
                      "workload": {
                        "description": "Workload represents the manifest workload to be deployed on a managed cluster.",
                        "type": "object",
                        "properties": {
                          "manifests": {
                            "description": "Manifests represents a list of kuberenetes resources to be deployed on a managed cluster.",
                            "type": "array",
                            "items": {
                              "description": "Manifest represents a resource to be deployed on managed cluster.",
                              "type": "object",
                              "x-kubernetes-preserve-unknown-fields": true,
                              "x-kubernetes-embedded-resource": true
                            }
                          }
                        }
                      }
                    }
                  },
                  "registration": {
                    "description": "Registration holds the registration configuration for the addon",
                    "type": "array",
                    "items": {
                      "description": "RegistrationSpec describes how to register an addon agent to the hub cluster.\nWith the registration defined, The addon agent can access to kube apiserver with kube style API\nor other endpoints on hub cluster with client certificate authentication. During the addon\nregistration process, a csr will be created for each Registration on the hub cluster. The\nCSR will be approved automatically, After the csr is approved on the hub cluster, the klusterlet\nagent will create a secret in the installNamespace for the addon agent.\nIf the RegistrationType type is KubeClient, the secret name will be \"{addon name}-hub-kubeconfig\"\nwhose content includes key/cert and kubeconfig. Otherwise, If the RegistrationType type is\nCustomSigner the secret name will be \"{addon name}-{signer name}-client-cert\" whose content\nincludes key/cert.",
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "customSigner": {
                          "description": "CustomSigner holds the configuration of the CustomSigner type registration\nrequired when the Type is CustomSigner",
                          "type": "object",
                          "required": [
                            "signingCA"
                          ],
                          "properties": {
                            "signerName": {
                              "description": "signerName is the name of signer that addon agent will use to create csr.",
                              "type": "string",
                              "maxLength": 571,
                              "minLength": 5,
                              "pattern": "^([a-z0-9][a-z0-9-]*[a-z0-9]\\.)+[a-z]+\\/[a-z0-9-\\.]+$"
                            },
                            "signingCA": {
                              "description": "SigningCA represents the reference of the secret on the hub cluster to sign the CSR\nthe secret must be in the namespace where the addon-manager is located, and the secret\ntype must be \"kubernetes.io/tls\"\nNote: The addon manager will not have permission to access the secret by default, so\nthe user must grant the permission to the addon manager(by creating rolebinding for\nthe addon-manager serviceaccount \"addon-manager-controller-sa\").",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name of the signing CA secret",
                                  "type": "string"
                                }
                              }
                            },
                            "subject": {
                              "description": "Subject is the user subject of the addon agent to be registered to the hub.\nIf it is not set, the addon agent will have the default subject\n\"subject\": {\n  \"user\": \"system:open-cluster-management:cluster:{clusterName}:addon:{addonName}:agent:{agentName}\",\n  \"groups: [\"system:open-cluster-management:cluster:{clusterName}:addon:{addonName}\",\n            \"system:open-cluster-management:addon:{addonName}\", \"system:authenticated\"]\n}",
                              "type": "object",
                              "properties": {
                                "groups": {
                                  "description": "groups is the user group of the addon agent.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "organizationUnit": {
                                  "description": "organizationUnit is the ou of the addon agent",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "user": {
                                  "description": "user is the user name of the addon agent.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "kubeClient": {
                          "description": "KubeClient holds the configuration of the KubeClient type registration",
                          "type": "object",
                          "properties": {
                            "hubPermissions": {
                              "description": "HubPermissions represent the permission configurations of the addon agent to access the hub cluster",
                              "type": "array",
                              "items": {
                                "description": "HubPermissionConfig configures the permission of the addon agent to access the hub cluster.\nWill create a RoleBinding in the same namespace as the managedClusterAddon to bind the user\nprovided ClusterRole/Role to the \"system:open-cluster-management:cluster:\u003ccluster-name\u003e:addon:\u003caddon-name\u003e\"\nGroup.",
                                "type": "object",
                                "required": [
                                  "type"
                                ],
                                "properties": {
                                  "currentCluster": {
                                    "description": "CurrentCluster contains the configuration of CurrentCluster type binding.\nIt is required when the type is CurrentCluster.",
                                    "type": "object",
                                    "required": [
                                      "clusterRoleName"
                                    ],
                                    "properties": {
                                      "clusterRoleName": {
                                        "description": "ClusterRoleName is the name of the clusterrole the addon agent is bound. A rolebinding\nwill be created referring to this cluster role in each cluster namespace.\nThe user must make sure the clusterrole exists on the hub cluster.",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "singleNamespace": {
                                    "description": "SingleNamespace contains the configuration of SingleNamespace type binding.\nIt is required when the type is SingleNamespace",
                                    "type": "object",
                                    "required": [
                                      "namespace",
                                      "roleRef"
                                    ],
                                    "properties": {
                                      "namespace": {
                                        "description": "Namespace is the namespace the addon agent has permissions to bind to. A rolebinding\nwill be created in this namespace referring to the RoleRef.",
                                        "type": "string"
                                      },
                                      "roleRef": {
                                        "description": "RoleRef is an reference to the permission resource. it could be a role or a cluster role,\nthe user must make sure it exist on the hub cluster.",
                                        "type": "object",
                                        "required": [
                                          "apiGroup",
                                          "kind",
                                          "name"
                                        ],
                                        "properties": {
                                          "apiGroup": {
                                            "description": "APIGroup is the group for the resource being referenced",
                                            "type": "string"
                                          },
                                          "kind": {
                                            "description": "Kind is the type of resource being referenced",
                                            "type": "string"
                                          },
                                          "name": {
                                            "description": "Name is the name of resource being referenced",
                                            "type": "string"
                                          }
                                        },
                                        "x-kubernetes-map-type": "atomic"
                                      }
                                    }
                                  },
                                  "type": {
                                    "description": "Type of the permissions setting. It defines how to bind the roleRef on the hub cluster. It can be:\n- CurrentCluster: Bind the roleRef to the namespace with the same name as the managedCluster.\n- SingleNamespace: Bind the roleRef to the namespace specified by SingleNamespaceBindingConfig.",
                                    "type": "string",
                                    "enum": [
                                      "CurrentCluster",
                                      "SingleNamespace"
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        },
                        "type": {
                          "description": "Type of the registration configuration, it supports:\n- KubeClient: the addon agent can access the hub kube apiserver with kube style API.\n  the signer name should be \"kubernetes.io/kube-apiserver-client\". When this type is\n  used, the KubeClientRegistrationConfig can be used to define the permission of the\n  addon agent to access the hub cluster\n- CustomSigner: the addon agent can access the hub cluster through user-defined endpoints.\n  When this type is used, the CustomSignerRegistrationConfig can be used to define how\n  to issue the client certificate for the addon agent.",
                          "type": "string",
                          "enum": [
                            "KubeClient",
                            "CustomSigner"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {},
        "additionalPrinterColumns": [
          {
            "name": "ADDON NAME",
            "type": "string",
            "jsonPath": ".spec.addonName"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": [],
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": []
  }
}