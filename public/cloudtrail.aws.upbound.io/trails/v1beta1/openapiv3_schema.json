{
  "$schema": "http://json-schema.org/schema#",
  "description": "Trail is the Schema for the Trails API. Provides a CloudTrail resource.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "cloudtrail.aws.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "Trail"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "TrailSpec defines the desired state of Trail",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "advancedEventSelector": {
              "description": "Specifies an advanced event selector for enabling data event logging. Fields documented below. Conflicts with event_selector.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "fieldSelector": {
                    "description": "Specifies the selector statements in an advanced event selector. Fields documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "endsWith": {
                          "description": "A list of values that includes events that match the last few characters of the event record field specified as the value of field.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "equals": {
                          "description": "A list of values that includes events that match the exact value of the event record field specified as the value of field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "field": {
                          "description": "Field in an event record on which to filter events to be logged. You can specify only the following values: readOnly, eventSource, eventName, eventCategory, resources.type, resources.ARN.",
                          "type": "string"
                        },
                        "notEndsWith": {
                          "description": "A list of values that excludes events that match the last few characters of the event record field specified as the value of field.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "notEquals": {
                          "description": "A list of values that excludes events that match the exact value of the event record field specified as the value of field.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "notStartsWith": {
                          "description": "A list of values that excludes events that match the first few characters of the event record field specified as the value of field.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "startsWith": {
                          "description": "A list of values that includes events that match the first few characters of the event record field specified as the value of field.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "name": {
                    "description": "Name of the trail.",
                    "type": "string"
                  }
                }
              }
            },
            "cloudWatchLogsGroupArn": {
              "description": "Log group name using an ARN that represents the log group to which CloudTrail logs will be delivered. Note that CloudTrail requires the Log Stream wildcard.",
              "type": "string"
            },
            "cloudWatchLogsRoleArn": {
              "description": "Role for the CloudWatch Logs endpoint to assume to write to a userâ€™s log group.",
              "type": "string"
            },
            "cloudWatchLogsRoleArnRef": {
              "description": "Reference to a Role in iam to populate cloudWatchLogsRoleArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "cloudWatchLogsRoleArnSelector": {
              "description": "Selector for a Role in iam to populate cloudWatchLogsRoleArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "enableLogFileValidation": {
              "description": "Whether log file integrity validation is enabled. Defaults to false.",
              "type": "boolean"
            },
            "enableLogging": {
              "description": "Enables logging for the trail. Defaults to true. Setting this to false will pause logging.",
              "type": "boolean"
            },
            "eventSelector": {
              "description": "Specifies an event selector for enabling data event logging. Fields documented below. Please note the CloudTrail limits when configuring these. Conflicts with advanced_event_selector.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "dataResource": {
                    "description": "Configuration block for data events. See details below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "Resource type in which you want to log data events. You can specify only the following value: \"AWS::S3::Object\", \"AWS::Lambda::Function\" and \"AWS::DynamoDB::Table\".",
                          "type": "string"
                        },
                        "values": {
                          "description": "List of ARN strings or partial ARN strings to specify selectors for data audit events over data resources. ARN list is specific to single-valued type. For example, arn:aws:s3:::\u003cbucket name\u003e/ for all objects in a bucket, arn:aws:s3:::\u003cbucket name\u003e/key for specific objects, arn:aws:lambda for all lambda events within an account, arn:aws:lambda:\u003cregion\u003e:\u003caccount number\u003e:function:\u003cfunction name\u003e for a specific Lambda function, arn:aws:dynamodb for all DDB events for all tables within an account, or arn:aws:dynamodb:\u003cregion\u003e:\u003caccount number\u003e:table/\u003ctable name\u003e for a specific DynamoDB table.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "excludeManagementEventSources": {
                    "description": "A set of event sources to exclude. Valid values include: kms.amazonaws.com and rdsdata.amazonaws.com. include_management_events must be set totrue to allow this.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "includeManagementEvents": {
                    "description": "Whether to include management events for your trail. Defaults to true.",
                    "type": "boolean"
                  },
                  "readWriteType": {
                    "description": "Type of events to log. Valid values are ReadOnly, WriteOnly, All. Default value is All.",
                    "type": "string"
                  }
                }
              }
            },
            "includeGlobalServiceEvents": {
              "description": "Whether the trail is publishing events from global services such as IAM to the log files. Defaults to true.",
              "type": "boolean"
            },
            "insightSelector": {
              "description": "Configuration block for identifying unusual operational activity. See details below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "insightType": {
                    "description": "Type of insights to log on a trail. Valid values are: ApiCallRateInsight and ApiErrorRateInsight.",
                    "type": "string"
                  }
                }
              }
            },
            "isMultiRegionTrail": {
              "description": "Whether the trail is created in the current region or in all regions. Defaults to false.",
              "type": "boolean"
            },
            "isOrganizationTrail": {
              "description": "Whether the trail is an AWS Organizations trail. Organization trails log events for the master account and all member accounts. Can only be created in the organization master account. Defaults to false.",
              "type": "boolean"
            },
            "kmsKeyId": {
              "description": "KMS key ARN to use to encrypt the logs delivered by CloudTrail.",
              "type": "string"
            },
            "kmsKeyIdRef": {
              "description": "Reference to a Key in kms to populate kmsKeyId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "kmsKeyIdSelector": {
              "description": "Selector for a Key in kms to populate kmsKeyId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "s3BucketName": {
              "description": "Name of the S3 bucket designated for publishing log files.",
              "type": "string"
            },
            "s3BucketNameRef": {
              "description": "Reference to a Bucket in s3 to populate s3BucketName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "s3BucketNameSelector": {
              "description": "Selector for a Bucket in s3 to populate s3BucketName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "s3KeyPrefix": {
              "description": "S3 key prefix that follows the name of the bucket you have designated for log file delivery.",
              "type": "string"
            },
            "snsTopicName": {
              "description": "Name of the Amazon SNS topic defined for notification of log file delivery.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "advancedEventSelector": {
              "description": "Specifies an advanced event selector for enabling data event logging. Fields documented below. Conflicts with event_selector.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "fieldSelector": {
                    "description": "Specifies the selector statements in an advanced event selector. Fields documented below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "endsWith": {
                          "description": "A list of values that includes events that match the last few characters of the event record field specified as the value of field.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "equals": {
                          "description": "A list of values that includes events that match the exact value of the event record field specified as the value of field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "field": {
                          "description": "Field in an event record on which to filter events to be logged. You can specify only the following values: readOnly, eventSource, eventName, eventCategory, resources.type, resources.ARN.",
                          "type": "string"
                        },
                        "notEndsWith": {
                          "description": "A list of values that excludes events that match the last few characters of the event record field specified as the value of field.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "notEquals": {
                          "description": "A list of values that excludes events that match the exact value of the event record field specified as the value of field.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "notStartsWith": {
                          "description": "A list of values that excludes events that match the first few characters of the event record field specified as the value of field.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "startsWith": {
                          "description": "A list of values that includes events that match the first few characters of the event record field specified as the value of field.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "name": {
                    "description": "Name of the trail.",
                    "type": "string"
                  }
                }
              }
            },
            "cloudWatchLogsGroupArn": {
              "description": "Log group name using an ARN that represents the log group to which CloudTrail logs will be delivered. Note that CloudTrail requires the Log Stream wildcard.",
              "type": "string"
            },
            "enableLogFileValidation": {
              "description": "Whether log file integrity validation is enabled. Defaults to false.",
              "type": "boolean"
            },
            "enableLogging": {
              "description": "Enables logging for the trail. Defaults to true. Setting this to false will pause logging.",
              "type": "boolean"
            },
            "eventSelector": {
              "description": "Specifies an event selector for enabling data event logging. Fields documented below. Please note the CloudTrail limits when configuring these. Conflicts with advanced_event_selector.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "dataResource": {
                    "description": "Configuration block for data events. See details below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "Resource type in which you want to log data events. You can specify only the following value: \"AWS::S3::Object\", \"AWS::Lambda::Function\" and \"AWS::DynamoDB::Table\".",
                          "type": "string"
                        },
                        "values": {
                          "description": "List of ARN strings or partial ARN strings to specify selectors for data audit events over data resources. ARN list is specific to single-valued type. For example, arn:aws:s3:::\u003cbucket name\u003e/ for all objects in a bucket, arn:aws:s3:::\u003cbucket name\u003e/key for specific objects, arn:aws:lambda for all lambda events within an account, arn:aws:lambda:\u003cregion\u003e:\u003caccount number\u003e:function:\u003cfunction name\u003e for a specific Lambda function, arn:aws:dynamodb for all DDB events for all tables within an account, or arn:aws:dynamodb:\u003cregion\u003e:\u003caccount number\u003e:table/\u003ctable name\u003e for a specific DynamoDB table.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "excludeManagementEventSources": {
                    "description": "A set of event sources to exclude. Valid values include: kms.amazonaws.com and rdsdata.amazonaws.com. include_management_events must be set totrue to allow this.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "includeManagementEvents": {
                    "description": "Whether to include management events for your trail. Defaults to true.",
                    "type": "boolean"
                  },
                  "readWriteType": {
                    "description": "Type of events to log. Valid values are ReadOnly, WriteOnly, All. Default value is All.",
                    "type": "string"
                  }
                }
              }
            },
            "includeGlobalServiceEvents": {
              "description": "Whether the trail is publishing events from global services such as IAM to the log files. Defaults to true.",
              "type": "boolean"
            },
            "insightSelector": {
              "description": "Configuration block for identifying unusual operational activity. See details below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "insightType": {
                    "description": "Type of insights to log on a trail. Valid values are: ApiCallRateInsight and ApiErrorRateInsight.",
                    "type": "string"
                  }
                }
              }
            },
            "isMultiRegionTrail": {
              "description": "Whether the trail is created in the current region or in all regions. Defaults to false.",
              "type": "boolean"
            },
            "isOrganizationTrail": {
              "description": "Whether the trail is an AWS Organizations trail. Organization trails log events for the master account and all member accounts. Can only be created in the organization master account. Defaults to false.",
              "type": "boolean"
            },
            "s3KeyPrefix": {
              "description": "S3 key prefix that follows the name of the bucket you have designated for log file delivery.",
              "type": "string"
            },
            "snsTopicName": {
              "description": "Name of the Amazon SNS topic defined for notification of log file delivery.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      }
    }
  }
}