{
  "$schema": "http://json-schema.org/schema#",
  "description": "BucketInventory is the Schema for the BucketInventorys API. Provides a S3 bucket inventory configuration resource.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "s3.aws.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "BucketInventory"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "BucketInventorySpec defines the desired state of BucketInventory",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "bucket": {
              "description": "Name of the source bucket that inventory lists the objects for.",
              "type": "string"
            },
            "bucketRef": {
              "description": "Reference to a Bucket in s3 to populate bucket.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "bucketSelector": {
              "description": "Selector for a Bucket in s3 to populate bucket.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "destination": {
              "description": "Contains information about where to publish the inventory results (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "bucket": {
                    "description": "Name of the source bucket that inventory lists the objects for.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "accountId": {
                          "description": "ID of the account that owns the destination bucket. Recommended to be set to prevent problems if the destination bucket ownership changes.",
                          "type": "string"
                        },
                        "bucketArn": {
                          "description": "Amazon S3 bucket ARN of the destination.",
                          "type": "string"
                        },
                        "bucketArnRef": {
                          "description": "Reference to a Bucket in s3 to populate bucketArn.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name of the referenced object.",
                              "type": "string"
                            },
                            "policy": {
                              "description": "Policies for referencing.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "bucketArnSelector": {
                          "description": "Selector for a Bucket in s3 to populate bucketArn.",
                          "type": "object",
                          "properties": {
                            "matchControllerRef": {
                              "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                              "type": "boolean"
                            },
                            "matchLabels": {
                              "description": "MatchLabels ensures an object with matching labels is selected.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "policy": {
                              "description": "Policies for selection.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "encryption": {
                          "description": "Contains the type of server-side encryption to use to encrypt the inventory (documented below).",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "sseKms": {
                                "description": "Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "keyId": {
                                      "description": "ARN of the KMS customer master key (CMK) used to encrypt the inventory file.",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "sseS3": {
                                "description": "Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.",
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              }
                            }
                          }
                        },
                        "format": {
                          "description": "Specifies the output format of the inventory results. Can be CSV, ORC or Parquet.",
                          "type": "string"
                        },
                        "prefix": {
                          "description": "Prefix that an object must have to be included in the inventory results.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "enabled": {
              "description": "Specifies whether the inventory is enabled or disabled.",
              "type": "boolean"
            },
            "filter": {
              "description": "Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "prefix": {
                    "description": "Prefix that an object must have to be included in the inventory results.",
                    "type": "string"
                  }
                }
              }
            },
            "includedObjectVersions": {
              "description": "Object versions to include in the inventory list. Valid values: All, Current.",
              "type": "string"
            },
            "name": {
              "description": "Unique identifier of the inventory configuration for the bucket.",
              "type": "string"
            },
            "optionalFields": {
              "description": "List of optional fields that are included in the inventory results. Please refer to the S3 documentation for more details.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "schedule": {
              "description": "Specifies the schedule for generating inventory results (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "frequency": {
                    "description": "Specifies how frequently inventory results are produced. Valid values: Daily, Weekly.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "destination": {
              "description": "Contains information about where to publish the inventory results (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "bucket": {
                    "description": "Name of the source bucket that inventory lists the objects for.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "accountId": {
                          "description": "ID of the account that owns the destination bucket. Recommended to be set to prevent problems if the destination bucket ownership changes.",
                          "type": "string"
                        },
                        "encryption": {
                          "description": "Contains the type of server-side encryption to use to encrypt the inventory (documented below).",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "sseKms": {
                                "description": "Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "keyId": {
                                      "description": "ARN of the KMS customer master key (CMK) used to encrypt the inventory file.",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "sseS3": {
                                "description": "Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.",
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              }
                            }
                          }
                        },
                        "format": {
                          "description": "Specifies the output format of the inventory results. Can be CSV, ORC or Parquet.",
                          "type": "string"
                        },
                        "prefix": {
                          "description": "Prefix that an object must have to be included in the inventory results.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "enabled": {
              "description": "Specifies whether the inventory is enabled or disabled.",
              "type": "boolean"
            },
            "filter": {
              "description": "Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "prefix": {
                    "description": "Prefix that an object must have to be included in the inventory results.",
                    "type": "string"
                  }
                }
              }
            },
            "includedObjectVersions": {
              "description": "Object versions to include in the inventory list. Valid values: All, Current.",
              "type": "string"
            },
            "name": {
              "description": "Unique identifier of the inventory configuration for the bucket.",
              "type": "string"
            },
            "optionalFields": {
              "description": "List of optional fields that are included in the inventory results. Please refer to the S3 documentation for more details.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "schedule": {
              "description": "Specifies the schedule for generating inventory results (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "frequency": {
                    "description": "Specifies how frequently inventory results are produced. Valid values: Daily, Weekly.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destination) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.destination))",
          "message": "spec.forProvider.destination is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.includedObjectVersions) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.includedObjectVersions))",
          "message": "spec.forProvider.includedObjectVersions is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
          "message": "spec.forProvider.name is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.schedule) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.schedule))",
          "message": "spec.forProvider.schedule is a required parameter"
        }
      ]
    }
  }
}