{
  "$schema": "http://json-schema.org/schema#",
  "description": "ManagedCluster is the Schema for the ManagedClusters API. Manages a Resource Group.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "enum": [
        "servicefabric.azure.upbound.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "enum": [
        "ManagedCluster"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "ManagedClusterSpec defines the desired state of ManagedCluster",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "authentication": {
              "description": "Controls how connections to the cluster are authenticated. A authentication block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "activeDirectory": {
                    "description": "A active_directory block as defined above.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "clientApplicationId": {
                          "description": "The ID of the Client Application.",
                          "type": "string"
                        },
                        "clusterApplicationId": {
                          "description": "The ID of the Cluster Application.",
                          "type": "string"
                        },
                        "tenantId": {
                          "description": "The ID of the Tenant.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "certificate": {
                    "description": "One or more certificate blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "commonName": {
                          "description": "The certificate's CN.",
                          "type": "string"
                        },
                        "thumbprint": {
                          "description": "The thumbprint of the certificate.",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the certificate. Can be AdminClient or ReadOnlyClient.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "backupServiceEnabled": {
              "description": "If true, backup service is enabled.",
              "type": "boolean"
            },
            "clientConnectionPort": {
              "description": "Port to use when connecting to the cluster.",
              "type": "number"
            },
            "customFabricSetting": {
              "description": "One or more custom_fabric_setting blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "parameter": {
                    "description": "Parameter name.",
                    "type": "string"
                  },
                  "section": {
                    "description": "Section name.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Parameter value.",
                    "type": "string"
                  }
                }
              }
            },
            "dnsName": {
              "description": "Hostname for the cluster. If unset the cluster's name will be used..",
              "type": "string"
            },
            "dnsServiceEnabled": {
              "description": "If true, DNS service is enabled.",
              "type": "boolean"
            },
            "httpGatewayPort": {
              "description": "Port that should be used by the Service Fabric Explorer to visualize applications and cluster status.",
              "type": "number"
            },
            "lbRule": {
              "description": "One or more lb_rule blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "backendPort": {
                    "description": "LB Backend port.",
                    "type": "number"
                  },
                  "frontendPort": {
                    "description": "LB Frontend port.",
                    "type": "number"
                  },
                  "probeProtocol": {
                    "description": "Protocol for the probe. Can be one of tcp, udp, http, or https.",
                    "type": "string"
                  },
                  "probeRequestPath": {
                    "description": "Path for the probe to check, when probe protocol is set to http.",
                    "type": "string"
                  },
                  "protocol": {
                    "description": "The transport protocol used in this rule. Can be one of tcp or udp.",
                    "type": "string"
                  }
                }
              }
            },
            "location": {
              "description": "The Azure Region where the Resource Group should exist. Changing this forces a new Resource Group to be created.",
              "type": "string"
            },
            "nodeType": {
              "description": "One or more node_type blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "applicationPortRange": {
                    "description": "Sets the port range available for applications. Format is \u003cfrom_port\u003e-\u003cto_port\u003e, for example 10000-20000.",
                    "type": "string"
                  },
                  "capacities": {
                    "description": "Specifies a list of key/value pairs used to set capacity tags for this node type.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "dataDiskSizeGb": {
                    "description": "The size of the data disk in gigabytes..",
                    "type": "number"
                  },
                  "dataDiskType": {
                    "description": "The type of the disk to use for storing data. It can be one of Premium_LRS, Standard_LRS, or StandardSSD_LRS.",
                    "type": "string"
                  },
                  "ephemeralPortRange": {
                    "description": "Sets the port range available for the OS. Format is \u003cfrom_port\u003e-\u003cto_port\u003e, for example 10000-20000. There has to be at least 255 ports available and cannot overlap with application_port_range..",
                    "type": "string"
                  },
                  "multiplePlacementGroupsEnabled": {
                    "description": "If set the node type can be composed of multiple placement groups.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name which should be used for this node type.",
                    "type": "string"
                  },
                  "placementProperties": {
                    "description": "Specifies a list of placement tags that can be used to indicate where services should run..",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "primary": {
                    "description": "If set to true, system services will run on this node type. Only one node type should be marked as primary. Primary node type cannot be deleted or changed once they're created.",
                    "type": "boolean"
                  },
                  "stateless": {
                    "description": "If set to true, only stateless workloads can run on this node type.",
                    "type": "boolean"
                  },
                  "vmImageOffer": {
                    "description": "The offer type of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmImagePublisher": {
                    "description": "The publisher of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmImageSku": {
                    "description": "The SKU of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmImageVersion": {
                    "description": "The version of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmInstanceCount": {
                    "description": "The number of instances this node type will launch.",
                    "type": "number"
                  },
                  "vmSecrets": {
                    "description": "One or more vm_secrets blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "certificates": {
                          "description": "One or more certificates blocks as defined above.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "store": {
                                "description": "The certificate store on the Virtual Machine to which the certificate should be added.",
                                "type": "string"
                              },
                              "url": {
                                "description": "The URL of a certificate that has been uploaded to Key Vault as a secret",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "vaultId": {
                          "description": "The ID of the Vault that contain the certificates.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "vmSize": {
                    "description": "The size of the instances in this node type.",
                    "type": "string"
                  }
                }
              }
            },
            "passwordSecretRef": {
              "description": "Administrator password for the VMs that will be created as part of this cluster.",
              "type": "object",
              "required": [
                "key",
                "name",
                "namespace"
              ],
              "properties": {
                "key": {
                  "description": "The key to select.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the secret.",
                  "type": "string"
                }
              }
            },
            "resourceGroupName": {
              "description": "The name of the Resource Group where the Resource Group should exist. Changing this forces a new Resource Group to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "sku": {
              "description": "SKU for this cluster. Changing this forces a new resource to be created. Default is Basic, allowed values are either Basic or Standard.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags which should be assigned to the Resource Group.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "upgradeWave": {
              "description": "Upgrade wave for the fabric runtime. Default is Wave0, allowed value must be one of Wave0, Wave1, or Wave2.",
              "type": "string"
            },
            "username": {
              "description": "Administrator password for the VMs that will be created as part of this cluster.",
              "type": "string"
            }
          }
        },
        "initProvider": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "authentication": {
              "description": "Controls how connections to the cluster are authenticated. A authentication block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "activeDirectory": {
                    "description": "A active_directory block as defined above.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "clientApplicationId": {
                          "description": "The ID of the Client Application.",
                          "type": "string"
                        },
                        "clusterApplicationId": {
                          "description": "The ID of the Cluster Application.",
                          "type": "string"
                        },
                        "tenantId": {
                          "description": "The ID of the Tenant.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "certificate": {
                    "description": "One or more certificate blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "commonName": {
                          "description": "The certificate's CN.",
                          "type": "string"
                        },
                        "thumbprint": {
                          "description": "The thumbprint of the certificate.",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the certificate. Can be AdminClient or ReadOnlyClient.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "backupServiceEnabled": {
              "description": "If true, backup service is enabled.",
              "type": "boolean"
            },
            "clientConnectionPort": {
              "description": "Port to use when connecting to the cluster.",
              "type": "number"
            },
            "customFabricSetting": {
              "description": "One or more custom_fabric_setting blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "parameter": {
                    "description": "Parameter name.",
                    "type": "string"
                  },
                  "section": {
                    "description": "Section name.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Parameter value.",
                    "type": "string"
                  }
                }
              }
            },
            "dnsName": {
              "description": "Hostname for the cluster. If unset the cluster's name will be used..",
              "type": "string"
            },
            "dnsServiceEnabled": {
              "description": "If true, DNS service is enabled.",
              "type": "boolean"
            },
            "httpGatewayPort": {
              "description": "Port that should be used by the Service Fabric Explorer to visualize applications and cluster status.",
              "type": "number"
            },
            "lbRule": {
              "description": "One or more lb_rule blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "backendPort": {
                    "description": "LB Backend port.",
                    "type": "number"
                  },
                  "frontendPort": {
                    "description": "LB Frontend port.",
                    "type": "number"
                  },
                  "probeProtocol": {
                    "description": "Protocol for the probe. Can be one of tcp, udp, http, or https.",
                    "type": "string"
                  },
                  "probeRequestPath": {
                    "description": "Path for the probe to check, when probe protocol is set to http.",
                    "type": "string"
                  },
                  "protocol": {
                    "description": "The transport protocol used in this rule. Can be one of tcp or udp.",
                    "type": "string"
                  }
                }
              }
            },
            "location": {
              "description": "The Azure Region where the Resource Group should exist. Changing this forces a new Resource Group to be created.",
              "type": "string"
            },
            "nodeType": {
              "description": "One or more node_type blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "applicationPortRange": {
                    "description": "Sets the port range available for applications. Format is \u003cfrom_port\u003e-\u003cto_port\u003e, for example 10000-20000.",
                    "type": "string"
                  },
                  "capacities": {
                    "description": "Specifies a list of key/value pairs used to set capacity tags for this node type.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "dataDiskSizeGb": {
                    "description": "The size of the data disk in gigabytes..",
                    "type": "number"
                  },
                  "dataDiskType": {
                    "description": "The type of the disk to use for storing data. It can be one of Premium_LRS, Standard_LRS, or StandardSSD_LRS.",
                    "type": "string"
                  },
                  "ephemeralPortRange": {
                    "description": "Sets the port range available for the OS. Format is \u003cfrom_port\u003e-\u003cto_port\u003e, for example 10000-20000. There has to be at least 255 ports available and cannot overlap with application_port_range..",
                    "type": "string"
                  },
                  "multiplePlacementGroupsEnabled": {
                    "description": "If set the node type can be composed of multiple placement groups.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name which should be used for this node type.",
                    "type": "string"
                  },
                  "placementProperties": {
                    "description": "Specifies a list of placement tags that can be used to indicate where services should run..",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "primary": {
                    "description": "If set to true, system services will run on this node type. Only one node type should be marked as primary. Primary node type cannot be deleted or changed once they're created.",
                    "type": "boolean"
                  },
                  "stateless": {
                    "description": "If set to true, only stateless workloads can run on this node type.",
                    "type": "boolean"
                  },
                  "vmImageOffer": {
                    "description": "The offer type of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmImagePublisher": {
                    "description": "The publisher of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmImageSku": {
                    "description": "The SKU of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmImageVersion": {
                    "description": "The version of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmInstanceCount": {
                    "description": "The number of instances this node type will launch.",
                    "type": "number"
                  },
                  "vmSecrets": {
                    "description": "One or more vm_secrets blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "certificates": {
                          "description": "One or more certificates blocks as defined above.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "store": {
                                "description": "The certificate store on the Virtual Machine to which the certificate should be added.",
                                "type": "string"
                              },
                              "url": {
                                "description": "The URL of a certificate that has been uploaded to Key Vault as a secret",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "vaultId": {
                          "description": "The ID of the Vault that contain the certificates.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "vmSize": {
                    "description": "The size of the instances in this node type.",
                    "type": "string"
                  }
                }
              }
            },
            "sku": {
              "description": "SKU for this cluster. Changing this forces a new resource to be created. Default is Basic, allowed values are either Basic or Standard.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags which should be assigned to the Resource Group.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "upgradeWave": {
              "description": "Upgrade wave for the fabric runtime. Default is Wave0, allowed value must be one of Wave0, Wave1, or Wave2.",
              "type": "string"
            },
            "username": {
              "description": "Administrator password for the VMs that will be created as part of this cluster.",
              "type": "string"
            }
          }
        },
        "managementPolicies": {
          "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              }
            }
          }
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  }
                }
              }
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              }
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          }
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clientConnectionPort) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.clientConnectionPort))",
          "message": "spec.forProvider.clientConnectionPort is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.httpGatewayPort) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.httpGatewayPort))",
          "message": "spec.forProvider.httpGatewayPort is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.lbRule) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.lbRule))",
          "message": "spec.forProvider.lbRule is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.location))",
          "message": "spec.forProvider.location is a required parameter"
        }
      ]
    }
  }
}