{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "clusters.kafka.aws.kubedb.com",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.11.3"
    }
  },
  "spec": {
    "group": "kafka.aws.kubedb.com",
    "names": {
      "plural": "clusters",
      "singular": "cluster",
      "kind": "Cluster",
      "listKind": "ClusterList",
      "categories": [
        "crossplane",
        "managed",
        "aws"
      ]
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1alpha1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "Cluster is the Schema for the Clusters API.",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "ClusterSpec defines the desired state of Cluster",
                "type": "object",
                "required": [
                  "forProvider"
                ],
                "properties": {
                  "deletionPolicy": {
                    "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
                    "type": "string",
                    "default": "Delete",
                    "enum": [
                      "Orphan",
                      "Delete"
                    ]
                  },
                  "forProvider": {
                    "type": "object",
                    "properties": {
                      "brokerNodeGroupInfo": {
                        "description": "Configuration block for the broker nodes of the Kafka cluster.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "instanceType"
                          ],
                          "properties": {
                            "azDistribution": {
                              "description": "The distribution of broker nodes across availability zones (documentation). Currently the only valid value is DEFAULT.",
                              "type": "string"
                            },
                            "clientSubnets": {
                              "description": "A list of subnets to connect to in client VPC (documentation).",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "clientSubnetsRefs": {
                              "description": "References to Subnet in ec2 to populate clientSubnets.",
                              "type": "array",
                              "items": {
                                "description": "A Reference to a named object.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name of the referenced object.",
                                    "type": "string"
                                  },
                                  "policy": {
                                    "description": "Policies for referencing.",
                                    "type": "object",
                                    "properties": {
                                      "resolution": {
                                        "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                        "type": "string",
                                        "default": "Required",
                                        "enum": [
                                          "Required",
                                          "Optional"
                                        ]
                                      },
                                      "resolve": {
                                        "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                        "type": "string",
                                        "enum": [
                                          "Always",
                                          "IfNotPresent"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "clientSubnetsSelector": {
                              "description": "Selector for a list of Subnet in ec2 to populate clientSubnets.",
                              "type": "object",
                              "properties": {
                                "matchControllerRef": {
                                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                  "type": "boolean"
                                },
                                "matchLabels": {
                                  "description": "MatchLabels ensures an object with matching labels is selected.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "policy": {
                                  "description": "Policies for selection.",
                                  "type": "object",
                                  "properties": {
                                    "resolution": {
                                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                      "type": "string",
                                      "default": "Required",
                                      "enum": [
                                        "Required",
                                        "Optional"
                                      ]
                                    },
                                    "resolve": {
                                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                      "type": "string",
                                      "enum": [
                                        "Always",
                                        "IfNotPresent"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "connectivityInfo": {
                              "description": "Information about the cluster access configuration. See below. For security reasons, you can't turn on public access while creating an MSK cluster. However, you can update an existing cluster to make it publicly accessible. You can also create a new cluster and then update it to make it publicly accessible (documentation).",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "publicAccess": {
                                    "description": "Access control settings for brokers. See below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "description": "Public access type. Valida values: DISABLED, SERVICE_PROVIDED_EIPS.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "instanceType": {
                              "description": "Specify the instance type to use for the kafka brokersE.g., kafka.m5.large. (Pricing info)",
                              "type": "string"
                            },
                            "securityGroups": {
                              "description": "A list of the security groups to associate with the elastic network interfaces to control who can communicate with the cluster.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "securityGroupsRefs": {
                              "description": "References to SecurityGroup in ec2 to populate securityGroups.",
                              "type": "array",
                              "items": {
                                "description": "A Reference to a named object.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name of the referenced object.",
                                    "type": "string"
                                  },
                                  "policy": {
                                    "description": "Policies for referencing.",
                                    "type": "object",
                                    "properties": {
                                      "resolution": {
                                        "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                        "type": "string",
                                        "default": "Required",
                                        "enum": [
                                          "Required",
                                          "Optional"
                                        ]
                                      },
                                      "resolve": {
                                        "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                        "type": "string",
                                        "enum": [
                                          "Always",
                                          "IfNotPresent"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "securityGroupsSelector": {
                              "description": "Selector for a list of SecurityGroup in ec2 to populate securityGroups.",
                              "type": "object",
                              "properties": {
                                "matchControllerRef": {
                                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                  "type": "boolean"
                                },
                                "matchLabels": {
                                  "description": "MatchLabels ensures an object with matching labels is selected.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "policy": {
                                  "description": "Policies for selection.",
                                  "type": "object",
                                  "properties": {
                                    "resolution": {
                                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                      "type": "string",
                                      "default": "Required",
                                      "enum": [
                                        "Required",
                                        "Optional"
                                      ]
                                    },
                                    "resolve": {
                                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                      "type": "string",
                                      "enum": [
                                        "Always",
                                        "IfNotPresent"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "storageInfo": {
                              "description": "A block that contains information about storage volumes attached to MSK broker nodes. See below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "ebsStorageInfo": {
                                    "description": "A block that contains EBS volume information. See below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "provisionedThroughput": {
                                          "description": "A block that contains EBS volume provisioned throughput information. To provision storage throughput, you must choose broker type kafka.m5.4xlarge or larger. See below.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "enabled": {
                                                "description": "Controls whether provisioned throughput is enabled or not. Default value: false.",
                                                "type": "boolean"
                                              },
                                              "volumeThroughput": {
                                                "description": "Throughput value of the EBS volumes for the data drive on each kafka broker node in MiB per second. The minimum value is 250. The maximum value varies between broker type. You can refer to the valid values for the maximum volume throughput at the following documentation on throughput bottlenecks",
                                                "type": "number"
                                              }
                                            }
                                          }
                                        },
                                        "volumeSize": {
                                          "description": "The size in GiB of the EBS volume for the data drive on each broker node. Minimum value of 1 and maximum value of 16384.",
                                          "type": "number"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "clientAuthentication": {
                        "description": "Configuration block for specifying a client authentication. See below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "sasl": {
                              "description": "Configuration block for specifying SASL client authentication. See below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "iam": {
                                    "description": "Enables IAM client authentication. Defaults to false.",
                                    "type": "boolean"
                                  },
                                  "scram": {
                                    "description": "Enables SCRAM client authentication via AWS Secrets Manager. Defaults to false.",
                                    "type": "boolean"
                                  }
                                }
                              }
                            },
                            "tls": {
                              "description": "Configuration block for specifying TLS client authentication. See below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "certificateAuthorityArns": {
                                    "description": "List of ACM Certificate Authority Amazon Resource Names (ARNs).",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "unauthenticated": {
                              "description": "Enables unauthenticated access.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "clusterName": {
                        "description": "Name of the MSK cluster.",
                        "type": "string"
                      },
                      "configurationInfo": {
                        "description": "Configuration block for specifying a MSK Configuration to attach to Kafka brokers. See below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "arn",
                            "revision"
                          ],
                          "properties": {
                            "arn": {
                              "description": "Amazon Resource Name (ARN) of the MSK Configuration to use in the cluster.",
                              "type": "string"
                            },
                            "revision": {
                              "description": "Revision of the MSK Configuration to use in the cluster.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "encryptionInfo": {
                        "description": "Configuration block for specifying encryption. See below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "encryptionAtRestKmsKeyArn": {
                              "description": "The ARN of the KMS key used for encryption at rest of the broker data volumes.",
                              "type": "string"
                            },
                            "encryptionAtRestKmsKeyArnRef": {
                              "description": "Reference to a Key in kms to populate encryptionAtRestKmsKeyArn.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name of the referenced object.",
                                  "type": "string"
                                },
                                "policy": {
                                  "description": "Policies for referencing.",
                                  "type": "object",
                                  "properties": {
                                    "resolution": {
                                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                      "type": "string",
                                      "default": "Required",
                                      "enum": [
                                        "Required",
                                        "Optional"
                                      ]
                                    },
                                    "resolve": {
                                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                      "type": "string",
                                      "enum": [
                                        "Always",
                                        "IfNotPresent"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "encryptionAtRestKmsKeyArnSelector": {
                              "description": "Selector for a Key in kms to populate encryptionAtRestKmsKeyArn.",
                              "type": "object",
                              "properties": {
                                "matchControllerRef": {
                                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                  "type": "boolean"
                                },
                                "matchLabels": {
                                  "description": "MatchLabels ensures an object with matching labels is selected.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "policy": {
                                  "description": "Policies for selection.",
                                  "type": "object",
                                  "properties": {
                                    "resolution": {
                                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                      "type": "string",
                                      "default": "Required",
                                      "enum": [
                                        "Required",
                                        "Optional"
                                      ]
                                    },
                                    "resolve": {
                                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                      "type": "string",
                                      "enum": [
                                        "Always",
                                        "IfNotPresent"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "encryptionInTransit": {
                              "description": "Configuration block to specify encryption in transit. See below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "clientBroker": {
                                    "description": "Encryption setting for data in transit between clients and brokers. Valid values: TLS, TLS_PLAINTEXT, and PLAINTEXT. Default value is TLS.",
                                    "type": "string"
                                  },
                                  "inCluster": {
                                    "description": "Whether data communication among broker nodes is encrypted. Default value: true.",
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "enhancedMonitoring": {
                        "description": "Specify the desired enhanced MSK CloudWatch monitoring level. See Monitoring Amazon MSK with Amazon CloudWatch",
                        "type": "string"
                      },
                      "kafkaVersion": {
                        "description": "Specify the desired Kafka software version.",
                        "type": "string"
                      },
                      "loggingInfo": {
                        "description": "Configuration block for streaming broker logs to Cloudwatch/S3/Kinesis Firehose. See below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "brokerLogs"
                          ],
                          "properties": {
                            "brokerLogs": {
                              "description": "Configuration block for Broker Logs settings for logging info. See below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "cloudwatchLogs": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "enabled"
                                      ],
                                      "properties": {
                                        "enabled": {
                                          "description": "Controls whether provisioned throughput is enabled or not. Default value: false.",
                                          "type": "boolean"
                                        },
                                        "logGroup": {
                                          "description": "Name of the Cloudwatch Log Group to deliver logs to.",
                                          "type": "string"
                                        },
                                        "logGroupRef": {
                                          "description": "Reference to a Group in cloudwatchlogs to populate logGroup.",
                                          "type": "object",
                                          "required": [
                                            "name"
                                          ],
                                          "properties": {
                                            "name": {
                                              "description": "Name of the referenced object.",
                                              "type": "string"
                                            },
                                            "policy": {
                                              "description": "Policies for referencing.",
                                              "type": "object",
                                              "properties": {
                                                "resolution": {
                                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                                  "type": "string",
                                                  "default": "Required",
                                                  "enum": [
                                                    "Required",
                                                    "Optional"
                                                  ]
                                                },
                                                "resolve": {
                                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                                  "type": "string",
                                                  "enum": [
                                                    "Always",
                                                    "IfNotPresent"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "logGroupSelector": {
                                          "description": "Selector for a Group in cloudwatchlogs to populate logGroup.",
                                          "type": "object",
                                          "properties": {
                                            "matchControllerRef": {
                                              "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                              "type": "boolean"
                                            },
                                            "matchLabels": {
                                              "description": "MatchLabels ensures an object with matching labels is selected.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            },
                                            "policy": {
                                              "description": "Policies for selection.",
                                              "type": "object",
                                              "properties": {
                                                "resolution": {
                                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                                  "type": "string",
                                                  "default": "Required",
                                                  "enum": [
                                                    "Required",
                                                    "Optional"
                                                  ]
                                                },
                                                "resolve": {
                                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                                  "type": "string",
                                                  "enum": [
                                                    "Always",
                                                    "IfNotPresent"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "firehose": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "enabled"
                                      ],
                                      "properties": {
                                        "deliveryStream": {
                                          "description": "Name of the Kinesis Data Firehose delivery stream to deliver logs to.",
                                          "type": "string"
                                        },
                                        "enabled": {
                                          "description": "Controls whether provisioned throughput is enabled or not. Default value: false.",
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  },
                                  "s3": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "enabled"
                                      ],
                                      "properties": {
                                        "bucket": {
                                          "description": "Name of the S3 bucket to deliver logs to.",
                                          "type": "string"
                                        },
                                        "bucketRef": {
                                          "description": "Reference to a Bucket in s3 to populate bucket.",
                                          "type": "object",
                                          "required": [
                                            "name"
                                          ],
                                          "properties": {
                                            "name": {
                                              "description": "Name of the referenced object.",
                                              "type": "string"
                                            },
                                            "policy": {
                                              "description": "Policies for referencing.",
                                              "type": "object",
                                              "properties": {
                                                "resolution": {
                                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                                  "type": "string",
                                                  "default": "Required",
                                                  "enum": [
                                                    "Required",
                                                    "Optional"
                                                  ]
                                                },
                                                "resolve": {
                                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                                  "type": "string",
                                                  "enum": [
                                                    "Always",
                                                    "IfNotPresent"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "bucketSelector": {
                                          "description": "Selector for a Bucket in s3 to populate bucket.",
                                          "type": "object",
                                          "properties": {
                                            "matchControllerRef": {
                                              "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                              "type": "boolean"
                                            },
                                            "matchLabels": {
                                              "description": "MatchLabels ensures an object with matching labels is selected.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            },
                                            "policy": {
                                              "description": "Policies for selection.",
                                              "type": "object",
                                              "properties": {
                                                "resolution": {
                                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                                  "type": "string",
                                                  "default": "Required",
                                                  "enum": [
                                                    "Required",
                                                    "Optional"
                                                  ]
                                                },
                                                "resolve": {
                                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                                  "type": "string",
                                                  "enum": [
                                                    "Always",
                                                    "IfNotPresent"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "enabled": {
                                          "description": "Controls whether provisioned throughput is enabled or not. Default value: false.",
                                          "type": "boolean"
                                        },
                                        "prefix": {
                                          "description": "Prefix to append to the folder name.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "numberOfBrokerNodes": {
                        "description": "The desired total number of broker nodes in the kafka cluster.  It must be a multiple of the number of specified client subnets.",
                        "type": "number"
                      },
                      "openMonitoring": {
                        "description": "Configuration block for JMX and Node monitoring for the MSK cluster. See below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "prometheus"
                          ],
                          "properties": {
                            "prometheus": {
                              "description": "Configuration block for Prometheus settings for open monitoring. See below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "jmxExporter": {
                                    "description": "Configuration block for JMX Exporter. See below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "enabledInBroker"
                                      ],
                                      "properties": {
                                        "enabledInBroker": {
                                          "description": "Indicates whether you want to enable or disable the JMX Exporter.",
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  },
                                  "nodeExporter": {
                                    "description": "Configuration block for Node Exporter. See below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "enabledInBroker"
                                      ],
                                      "properties": {
                                        "enabledInBroker": {
                                          "description": "Indicates whether you want to enable or disable the JMX Exporter.",
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "region": {
                        "description": "Region is the region you'd like your resource to be created in.",
                        "type": "string"
                      },
                      "storageMode": {
                        "description": "Controls storage mode for supported storage tiers. Valid values are: LOCAL or TIERED.",
                        "type": "string"
                      },
                      "tags": {
                        "description": "A map of tags to assign to the resource. If configured with a provider default_tags configuration block present, tags with matching keys will overwrite those defined at the provider-level.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "tagsAll": {
                        "description": "A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "managementPolicy": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
                    "type": "string",
                    "default": "FullControl",
                    "enum": [
                      "FullControl",
                      "ObserveOnly",
                      "OrphanOnDelete"
                    ]
                  },
                  "providerConfigRef": {
                    "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
                    "type": "object",
                    "default": {
                      "name": "default"
                    },
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "providerRef": {
                    "description": "ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "publishConnectionDetailsTo": {
                    "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "configRef": {
                        "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
                        "type": "object",
                        "default": {
                          "name": "default"
                        },
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "Metadata is the metadata for connection secret.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "type": {
                            "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name of the connection secret.",
                        "type": "string"
                      }
                    }
                  },
                  "writeConnectionSecretToRef": {
                    "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
                    "type": "object",
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  }
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "self.managementPolicy == 'ObserveOnly' || has(self.forProvider.brokerNodeGroupInfo)",
                    "message": "brokerNodeGroupInfo is a required parameter"
                  },
                  {
                    "rule": "self.managementPolicy == 'ObserveOnly' || has(self.forProvider.clusterName)",
                    "message": "clusterName is a required parameter"
                  },
                  {
                    "rule": "self.managementPolicy == 'ObserveOnly' || has(self.forProvider.kafkaVersion)",
                    "message": "kafkaVersion is a required parameter"
                  },
                  {
                    "rule": "self.managementPolicy == 'ObserveOnly' || has(self.forProvider.numberOfBrokerNodes)",
                    "message": "numberOfBrokerNodes is a required parameter"
                  },
                  {
                    "rule": "self.managementPolicy == 'ObserveOnly' || has(self.forProvider.region)",
                    "message": "region is a required parameter"
                  }
                ]
              },
              "status": {
                "description": "ClusterStatus defines the observed state of Cluster.",
                "type": "object",
                "properties": {
                  "atProvider": {
                    "type": "object",
                    "properties": {
                      "arn": {
                        "description": "Amazon Resource Name (ARN) of the MSK Configuration to use in the cluster.",
                        "type": "string"
                      },
                      "bootstrapBrokers": {
                        "description": "Comma separated list of one or more hostname:port pairs of kafka brokers suitable to bootstrap connectivity to the kafka cluster. Contains a value if encryption_info.0.encryption_in_transit.0.client_broker is set to PLAINTEXT or TLS_PLAINTEXT. The resource sorts values alphabetically. AWS may not always return all endpoints so this value is not guaranteed to be stable across applies.",
                        "type": "string"
                      },
                      "bootstrapBrokersPublicSaslIam": {
                        "description": "One or more DNS names (or IP addresses) and SASL IAM port pairs. For example, b-1-public.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9198,b-2-public.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9198,b-3-public.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9198. This attribute will have a value if encryption_info.0.encryption_in_transit.0.client_broker is set to TLS_PLAINTEXT or TLS and client_authentication.0.sasl.0.iam is set to true and broker_node_group_info.0.connectivity_info.0.public_access.0.type is set to SERVICE_PROVIDED_EIPS and the cluster fulfill all other requirements for public access. The resource sorts the list alphabetically. AWS may not always return all endpoints so the values may not be stable across applies.",
                        "type": "string"
                      },
                      "bootstrapBrokersPublicSaslScram": {
                        "description": "One or more DNS names (or IP addresses) and SASL SCRAM port pairs. For example, b-1-public.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9196,b-2-public.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9196,b-3-public.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9196. This attribute will have a value if encryption_info.0.encryption_in_transit.0.client_broker is set to TLS_PLAINTEXT or TLS and client_authentication.0.sasl.0.scram is set to true and broker_node_group_info.0.connectivity_info.0.public_access.0.type is set to SERVICE_PROVIDED_EIPS and the cluster fulfill all other requirements for public access. The resource sorts the list alphabetically. AWS may not always return all endpoints so the values may not be stable across applies.",
                        "type": "string"
                      },
                      "bootstrapBrokersPublicTls": {
                        "description": "One or more DNS names (or IP addresses) and TLS port pairs. For example, b-1-public.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9194,b-2-public.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9194,b-3-public.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9194. This attribute will have a value if encryption_info.0.encryption_in_transit.0.client_broker is set to TLS_PLAINTEXT or TLS and broker_node_group_info.0.connectivity_info.0.public_access.0.type is set to SERVICE_PROVIDED_EIPS and the cluster fulfill all other requirements for public access. The resource sorts the list alphabetically. AWS may not always return all endpoints so the values may not be stable across applies.",
                        "type": "string"
                      },
                      "bootstrapBrokersSaslIam": {
                        "description": "One or more DNS names (or IP addresses) and SASL IAM port pairs. For example, b-1.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9098,b-2.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9098,b-3.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9098. This attribute will have a value if encryption_info.0.encryption_in_transit.0.client_broker is set to TLS_PLAINTEXT or TLS and client_authentication.0.sasl.0.iam is set to true. The resource sorts the list alphabetically. AWS may not always return all endpoints so the values may not be stable across applies.",
                        "type": "string"
                      },
                      "bootstrapBrokersSaslScram": {
                        "description": "One or more DNS names (or IP addresses) and SASL SCRAM port pairs. For example, b-1.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9096,b-2.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9096,b-3.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9096. This attribute will have a value if encryption_info.0.encryption_in_transit.0.client_broker is set to TLS_PLAINTEXT or TLS and client_authentication.0.sasl.0.scram is set to true. The resource sorts the list alphabetically. AWS may not always return all endpoints so the values may not be stable across applies.",
                        "type": "string"
                      },
                      "bootstrapBrokersTls": {
                        "description": "One or more DNS names (or IP addresses) and TLS port pairs. For example, b-1.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9094,b-2.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9094,b-3.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9094. This attribute will have a value if encryption_info.0.encryption_in_transit.0.client_broker is set to TLS_PLAINTEXT or TLS. The resource sorts the list alphabetically. AWS may not always return all endpoints so the values may not be stable across applies.",
                        "type": "string"
                      },
                      "brokerNodeGroupInfo": {
                        "description": "Configuration block for the broker nodes of the Kafka cluster.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "azDistribution": {
                              "description": "The distribution of broker nodes across availability zones (documentation). Currently the only valid value is DEFAULT.",
                              "type": "string"
                            },
                            "clientSubnets": {
                              "description": "A list of subnets to connect to in client VPC (documentation).",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "connectivityInfo": {
                              "description": "Information about the cluster access configuration. See below. For security reasons, you can't turn on public access while creating an MSK cluster. However, you can update an existing cluster to make it publicly accessible. You can also create a new cluster and then update it to make it publicly accessible (documentation).",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "publicAccess": {
                                    "description": "Access control settings for brokers. See below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "description": "Public access type. Valida values: DISABLED, SERVICE_PROVIDED_EIPS.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "instanceType": {
                              "description": "Specify the instance type to use for the kafka brokersE.g., kafka.m5.large. (Pricing info)",
                              "type": "string"
                            },
                            "securityGroups": {
                              "description": "A list of the security groups to associate with the elastic network interfaces to control who can communicate with the cluster.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "storageInfo": {
                              "description": "A block that contains information about storage volumes attached to MSK broker nodes. See below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "ebsStorageInfo": {
                                    "description": "A block that contains EBS volume information. See below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "provisionedThroughput": {
                                          "description": "A block that contains EBS volume provisioned throughput information. To provision storage throughput, you must choose broker type kafka.m5.4xlarge or larger. See below.",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "enabled": {
                                                "description": "Controls whether provisioned throughput is enabled or not. Default value: false.",
                                                "type": "boolean"
                                              },
                                              "volumeThroughput": {
                                                "description": "Throughput value of the EBS volumes for the data drive on each kafka broker node in MiB per second. The minimum value is 250. The maximum value varies between broker type. You can refer to the valid values for the maximum volume throughput at the following documentation on throughput bottlenecks",
                                                "type": "number"
                                              }
                                            }
                                          }
                                        },
                                        "volumeSize": {
                                          "description": "The size in GiB of the EBS volume for the data drive on each broker node. Minimum value of 1 and maximum value of 16384.",
                                          "type": "number"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "clientAuthentication": {
                        "description": "Configuration block for specifying a client authentication. See below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "sasl": {
                              "description": "Configuration block for specifying SASL client authentication. See below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "iam": {
                                    "description": "Enables IAM client authentication. Defaults to false.",
                                    "type": "boolean"
                                  },
                                  "scram": {
                                    "description": "Enables SCRAM client authentication via AWS Secrets Manager. Defaults to false.",
                                    "type": "boolean"
                                  }
                                }
                              }
                            },
                            "tls": {
                              "description": "Configuration block for specifying TLS client authentication. See below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "certificateAuthorityArns": {
                                    "description": "List of ACM Certificate Authority Amazon Resource Names (ARNs).",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "unauthenticated": {
                              "description": "Enables unauthenticated access.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "clusterName": {
                        "description": "Name of the MSK cluster.",
                        "type": "string"
                      },
                      "configurationInfo": {
                        "description": "Configuration block for specifying a MSK Configuration to attach to Kafka brokers. See below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "arn": {
                              "description": "Amazon Resource Name (ARN) of the MSK Configuration to use in the cluster.",
                              "type": "string"
                            },
                            "revision": {
                              "description": "Revision of the MSK Configuration to use in the cluster.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "currentVersion": {
                        "description": "Current version of the MSK Cluster used for updates, e.g., K13V1IB3VIYZZH",
                        "type": "string"
                      },
                      "encryptionInfo": {
                        "description": "Configuration block for specifying encryption. See below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "encryptionAtRestKmsKeyArn": {
                              "description": "The ARN of the KMS key used for encryption at rest of the broker data volumes.",
                              "type": "string"
                            },
                            "encryptionInTransit": {
                              "description": "Configuration block to specify encryption in transit. See below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "clientBroker": {
                                    "description": "Encryption setting for data in transit between clients and brokers. Valid values: TLS, TLS_PLAINTEXT, and PLAINTEXT. Default value is TLS.",
                                    "type": "string"
                                  },
                                  "inCluster": {
                                    "description": "Whether data communication among broker nodes is encrypted. Default value: true.",
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "enhancedMonitoring": {
                        "description": "Specify the desired enhanced MSK CloudWatch monitoring level. See Monitoring Amazon MSK with Amazon CloudWatch",
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "kafkaVersion": {
                        "description": "Specify the desired Kafka software version.",
                        "type": "string"
                      },
                      "loggingInfo": {
                        "description": "Configuration block for streaming broker logs to Cloudwatch/S3/Kinesis Firehose. See below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "brokerLogs": {
                              "description": "Configuration block for Broker Logs settings for logging info. See below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "cloudwatchLogs": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "enabled": {
                                          "description": "Controls whether provisioned throughput is enabled or not. Default value: false.",
                                          "type": "boolean"
                                        },
                                        "logGroup": {
                                          "description": "Name of the Cloudwatch Log Group to deliver logs to.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "firehose": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "deliveryStream": {
                                          "description": "Name of the Kinesis Data Firehose delivery stream to deliver logs to.",
                                          "type": "string"
                                        },
                                        "enabled": {
                                          "description": "Controls whether provisioned throughput is enabled or not. Default value: false.",
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  },
                                  "s3": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "bucket": {
                                          "description": "Name of the S3 bucket to deliver logs to.",
                                          "type": "string"
                                        },
                                        "enabled": {
                                          "description": "Controls whether provisioned throughput is enabled or not. Default value: false.",
                                          "type": "boolean"
                                        },
                                        "prefix": {
                                          "description": "Prefix to append to the folder name.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "numberOfBrokerNodes": {
                        "description": "The desired total number of broker nodes in the kafka cluster.  It must be a multiple of the number of specified client subnets.",
                        "type": "number"
                      },
                      "openMonitoring": {
                        "description": "Configuration block for JMX and Node monitoring for the MSK cluster. See below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "prometheus": {
                              "description": "Configuration block for Prometheus settings for open monitoring. See below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "jmxExporter": {
                                    "description": "Configuration block for JMX Exporter. See below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "enabledInBroker": {
                                          "description": "Indicates whether you want to enable or disable the JMX Exporter.",
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  },
                                  "nodeExporter": {
                                    "description": "Configuration block for Node Exporter. See below.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "enabledInBroker": {
                                          "description": "Indicates whether you want to enable or disable the JMX Exporter.",
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "storageMode": {
                        "description": "Controls storage mode for supported storage tiers. Valid values are: LOCAL or TIERED.",
                        "type": "string"
                      },
                      "tags": {
                        "description": "A map of tags to assign to the resource. If configured with a provider default_tags configuration block present, tags with matching keys will overwrite those defined at the provider-level.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "tagsAll": {
                        "description": "A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "zookeeperConnectString": {
                        "description": "A comma separated list of one or more hostname:port pairs to use to connect to the Apache Zookeeper cluster. The returned values are sorted alphabetically. The AWS API may not return all endpoints, so this value is not guaranteed to be stable across applies.",
                        "type": "string"
                      },
                      "zookeeperConnectStringTls": {
                        "description": "A comma separated list of one or more hostname:port pairs to use to connect to the Apache Zookeeper cluster via TLS. The returned values are sorted alphabetically. The AWS API may not return all endpoints, so this value is not guaranteed to be stable across applies.",
                        "type": "string"
                      }
                    }
                  },
                  "conditions": {
                    "description": "Conditions of the resource.",
                    "type": "array",
                    "items": {
                      "description": "A Condition that may apply to a resource.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "A Reason for this condition's last transition from one status to another.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of this condition; is it currently True, False, or Unknown?",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "READY",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
          },
          {
            "name": "SYNCED",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Synced')].status"
          },
          {
            "name": "EXTERNAL-NAME",
            "type": "string",
            "jsonPath": ".metadata.annotations.crossplane\\.io/external-name"
          },
          {
            "name": "AGE",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}