{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "imagereviews.imagepolicy.k8s.io",
    "creationTimestamp": null
  },
  "spec": {
    "group": "imagepolicy.k8s.io",
    "names": {
      "plural": "imagereviews",
      "singular": "imagereview",
      "kind": "ImageReview",
      "listKind": "ImageReviewList"
    },
    "scope": "Namespaced",
    "versions": [
      {
        "name": "v1alpha1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "ImageReview checks if the set of images in a pod are allowed.",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "Spec holds information about the pod being evaluated",
                "type": "object",
                "properties": {
                  "annotations": {
                    "description": "Annotations is a list of key-value pairs extracted from the Pod's annotations. It only includes keys which match the pattern `*.image-policy.k8s.io/*`. It is up to each webhook backend to determine how to interpret these annotations, if at all.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "containers": {
                    "description": "Containers is a list of a subset of the information in each container of the Pod being created.",
                    "type": "array",
                    "items": {
                      "description": "ImageReviewContainerSpec is a description of a container within the pod creation request.",
                      "type": "object",
                      "properties": {
                        "image": {
                          "description": "This can be in the form image:tag or image@SHA:012345679abcdef.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "namespace": {
                    "description": "Namespace is the namespace the pod is being created in.",
                    "type": "string"
                  }
                }
              },
              "status": {
                "description": "Status is filled in by the backend and indicates whether the pod should be allowed.",
                "type": "object",
                "required": [
                  "allowed"
                ],
                "properties": {
                  "allowed": {
                    "description": "Allowed indicates that all images were allowed to be run.",
                    "type": "boolean"
                  },
                  "auditAnnotations": {
                    "description": "AuditAnnotations will be added to the attributes object of the admission controller request using 'AddAnnotation'.  The keys should be prefix-less (i.e., the admission controller will add an appropriate prefix).",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "reason": {
                    "description": "Reason should be empty unless Allowed is false in which case it may contain a short description of what is wrong.  Kubernetes may truncate excessively long errors when displaying to the user.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}