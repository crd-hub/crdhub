{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "instancegroupmanagers.compute.gcp.upbound.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.13.0"
    }
  },
  "spec": {
    "group": "compute.gcp.upbound.io",
    "names": {
      "plural": "instancegroupmanagers",
      "singular": "instancegroupmanager",
      "kind": "InstanceGroupManager",
      "listKind": "InstanceGroupManagerList",
      "categories": [
        "crossplane",
        "managed",
        "gcp"
      ]
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "InstanceGroupManager is the Schema for the InstanceGroupManagers API. Manages an Instance Group within GCE.",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "InstanceGroupManagerSpec defines the desired state of InstanceGroupManager",
                "type": "object",
                "required": [
                  "forProvider"
                ],
                "properties": {
                  "deletionPolicy": {
                    "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
                    "type": "string",
                    "default": "Delete",
                    "enum": [
                      "Orphan",
                      "Delete"
                    ]
                  },
                  "forProvider": {
                    "type": "object",
                    "required": [
                      "zone"
                    ],
                    "properties": {
                      "autoHealingPolicies": {
                        "description": "The autohealing policies for this managed instance group. You can specify only one value. Structure is documented below. For more information, see the official documentation.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "healthCheck": {
                              "description": "The health check resource that signals autohealing.",
                              "type": "string"
                            },
                            "healthCheckRef": {
                              "description": "Reference to a HealthCheck to populate healthCheck.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name of the referenced object.",
                                  "type": "string"
                                },
                                "policy": {
                                  "description": "Policies for referencing.",
                                  "type": "object",
                                  "properties": {
                                    "resolution": {
                                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                      "type": "string",
                                      "default": "Required",
                                      "enum": [
                                        "Required",
                                        "Optional"
                                      ]
                                    },
                                    "resolve": {
                                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                      "type": "string",
                                      "enum": [
                                        "Always",
                                        "IfNotPresent"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "healthCheckSelector": {
                              "description": "Selector for a HealthCheck to populate healthCheck.",
                              "type": "object",
                              "properties": {
                                "matchControllerRef": {
                                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                  "type": "boolean"
                                },
                                "matchLabels": {
                                  "description": "MatchLabels ensures an object with matching labels is selected.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "policy": {
                                  "description": "Policies for selection.",
                                  "type": "object",
                                  "properties": {
                                    "resolution": {
                                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                      "type": "string",
                                      "default": "Required",
                                      "enum": [
                                        "Required",
                                        "Optional"
                                      ]
                                    },
                                    "resolve": {
                                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                      "type": "string",
                                      "enum": [
                                        "Always",
                                        "IfNotPresent"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "initialDelaySec": {
                              "description": "The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "baseInstanceName": {
                        "description": "The base instance name to use for instances in this group. The value must be a valid RFC1035 name. Supported characters are lowercase letters, numbers, and hyphens (-). Instances are named by appending a hyphen and a random four-character string to the base instance name.",
                        "type": "string"
                      },
                      "description": {
                        "description": "An optional textual description of the instance group manager.",
                        "type": "string"
                      },
                      "instanceLifecyclePolicy": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "forceUpdateOnRepair": {
                              "description": "), Specifies whether to apply the group's latest configuration when repairing a VM. Valid options are: YES, NO. If YES and you updated the group's instance template or per-instance configurations after the VM was created, then these changes are applied when VM is repaired. If NO (default), then updates are applied in accordance with the group's update policy type.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "listManagedInstancesResults": {
                        "description": "Pagination behavior of the listManagedInstances API method for this managed instance group. Valid values are: PAGELESS, PAGINATED. If PAGELESS (default), Pagination is disabled for the group's listManagedInstances API method. maxResults and pageToken query parameters are ignored and all instances are returned in a single response. If PAGINATED, pagination is enabled, maxResults and pageToken query parameters are respected.",
                        "type": "string"
                      },
                      "namedPort": {
                        "description": "The named port configuration. See the section below for details on configuration.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "The name of the port.",
                              "type": "string"
                            },
                            "port": {
                              "description": "The port number.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "project": {
                        "description": "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
                        "type": "string"
                      },
                      "statefulDisk": {
                        "description": "Disks created on the instances that will be preserved on instance delete, update, etc. Structure is documented below. For more information see the official documentation.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "deleteRule": {
                              "description": ", A value that prescribes what should happen to the stateful disk when the VM instance is deleted. The available options are NEVER and ON_PERMANENT_INSTANCE_DELETION. NEVER - detach the disk when the VM is deleted, but do not delete the disk. ON_PERMANENT_INSTANCE_DELETION will delete the stateful disk when the VM is permanently deleted from the instance group. The default is NEVER.",
                              "type": "string"
                            },
                            "deviceName": {
                              "description": ", The device name of the disk to be attached.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "targetPools": {
                        "description": "The full URL of all target pools to which new instances in the group are added. Updating the target pools attribute does not affect existing instances.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "targetPoolsRefs": {
                        "description": "References to TargetPool to populate targetPools.",
                        "type": "array",
                        "items": {
                          "description": "A Reference to a named object.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name of the referenced object.",
                              "type": "string"
                            },
                            "policy": {
                              "description": "Policies for referencing.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      },
                      "targetPoolsSelector": {
                        "description": "Selector for a list of TargetPool to populate targetPools.",
                        "type": "object",
                        "properties": {
                          "matchControllerRef": {
                            "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                            "type": "boolean"
                          },
                          "matchLabels": {
                            "description": "MatchLabels ensures an object with matching labels is selected.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "policy": {
                            "description": "Policies for selection.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "targetSize": {
                        "description": "The target number of running instances for this managed instance group. This value should always be explicitly set unless this resource is attached to an autoscaler, in which case it should never be set. Defaults to 0.",
                        "type": "number"
                      },
                      "updatePolicy": {
                        "description": "The update policy for this managed instance group. Structure is documented below. For more information, see the official documentation and API",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "maxSurgeFixed": {
                              "description": ", The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with max_surge_percent. If neither is set, defaults to 1",
                              "type": "number"
                            },
                            "maxSurgePercent": {
                              "description": ", The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with max_surge_fixed.",
                              "type": "number"
                            },
                            "maxUnavailableFixed": {
                              "description": ", The maximum number of instances that can be unavailable during the update process. Conflicts with max_unavailable_percent. If neither is set, defaults to 1",
                              "type": "number"
                            },
                            "maxUnavailablePercent": {
                              "description": ", The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with max_unavailable_fixed.",
                              "type": "number"
                            },
                            "minimalAction": {
                              "description": "- Minimal action to be taken on an instance. You can specify either REFRESH to update without stopping instances, RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a REFRESH, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.",
                              "type": "string"
                            },
                            "mostDisruptiveAllowedAction": {
                              "description": "- Most disruptive action that is allowed to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to allow actions that do not need instance restart, RESTART to allow actions that can be applied without instance replacing or REPLACE to allow all possible actions. If the Updater determines that the minimal update action needed is more disruptive than most disruptive allowed action you specify it will not perform the update at all.",
                              "type": "string"
                            },
                            "replacementMethod": {
                              "description": ", The instance replacement method for managed instance groups. Valid values are: \"RECREATE\", \"SUBSTITUTE\". If SUBSTITUTE (default), the group replaces VM instances with new instances that have randomly generated names. If RECREATE, instance names are preserved.  You must also set max_unavailable_fixed or max_unavailable_percent to be greater than 0.",
                              "type": "string"
                            },
                            "type": {
                              "description": "- The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "version": {
                        "description": "Application versions managed by this instance group. Each version deals with a specific instance template, allowing canary release scenarios. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instanceTemplate": {
                              "description": "- The full URL to an instance template from which all new instances of this version will be created. It is recommended to reference instance templates through their unique id (self_link_unique attribute).",
                              "type": "string"
                            },
                            "instanceTemplateRef": {
                              "description": "Reference to a InstanceTemplate to populate instanceTemplate.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name of the referenced object.",
                                  "type": "string"
                                },
                                "policy": {
                                  "description": "Policies for referencing.",
                                  "type": "object",
                                  "properties": {
                                    "resolution": {
                                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                      "type": "string",
                                      "default": "Required",
                                      "enum": [
                                        "Required",
                                        "Optional"
                                      ]
                                    },
                                    "resolve": {
                                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                      "type": "string",
                                      "enum": [
                                        "Always",
                                        "IfNotPresent"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "instanceTemplateSelector": {
                              "description": "Selector for a InstanceTemplate to populate instanceTemplate.",
                              "type": "object",
                              "properties": {
                                "matchControllerRef": {
                                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                                  "type": "boolean"
                                },
                                "matchLabels": {
                                  "description": "MatchLabels ensures an object with matching labels is selected.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "policy": {
                                  "description": "Policies for selection.",
                                  "type": "object",
                                  "properties": {
                                    "resolution": {
                                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                      "type": "string",
                                      "default": "Required",
                                      "enum": [
                                        "Required",
                                        "Optional"
                                      ]
                                    },
                                    "resolve": {
                                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                      "type": "string",
                                      "enum": [
                                        "Always",
                                        "IfNotPresent"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "name": {
                              "description": "- Version name.",
                              "type": "string"
                            },
                            "targetSize": {
                              "description": "- The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "fixed": {
                                    "description": ", The number of instances which are managed for this version. Conflicts with percent.",
                                    "type": "number"
                                  },
                                  "percent": {
                                    "description": ", The number of instances (calculated as percentage) which are managed for this version. Conflicts with fixed. Note that when using percent, rounding will be in favor of explicitly set target_size values; a managed instance group with 2 instances and 2 versions, one of which has a target_size.percent of 60 will create 2 instances of that version.",
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "waitForInstances": {
                        "description": "Whether to wait for all instances to be created/updated before returning.",
                        "type": "boolean"
                      },
                      "waitForInstancesStatus": {
                        "description": "When used with wait_for_instances it specifies the status to wait for. When STABLE is specified this resource will wait until the instances are stable before returning. When UPDATED is set, it will wait for the version target to be reached and any per instance configs to be effective as well as all instances to be stable before returning. The possible values are STABLE and UPDATED",
                        "type": "string"
                      },
                      "zone": {
                        "description": "The zone that instances in this group should be created in.",
                        "type": "string"
                      }
                    }
                  },
                  "initProvider": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
                    "type": "object",
                    "properties": {
                      "autoHealingPolicies": {
                        "description": "The autohealing policies for this managed instance group. You can specify only one value. Structure is documented below. For more information, see the official documentation.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "initialDelaySec": {
                              "description": "The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "baseInstanceName": {
                        "description": "The base instance name to use for instances in this group. The value must be a valid RFC1035 name. Supported characters are lowercase letters, numbers, and hyphens (-). Instances are named by appending a hyphen and a random four-character string to the base instance name.",
                        "type": "string"
                      },
                      "description": {
                        "description": "An optional textual description of the instance group manager.",
                        "type": "string"
                      },
                      "instanceLifecyclePolicy": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "forceUpdateOnRepair": {
                              "description": "), Specifies whether to apply the group's latest configuration when repairing a VM. Valid options are: YES, NO. If YES and you updated the group's instance template or per-instance configurations after the VM was created, then these changes are applied when VM is repaired. If NO (default), then updates are applied in accordance with the group's update policy type.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "listManagedInstancesResults": {
                        "description": "Pagination behavior of the listManagedInstances API method for this managed instance group. Valid values are: PAGELESS, PAGINATED. If PAGELESS (default), Pagination is disabled for the group's listManagedInstances API method. maxResults and pageToken query parameters are ignored and all instances are returned in a single response. If PAGINATED, pagination is enabled, maxResults and pageToken query parameters are respected.",
                        "type": "string"
                      },
                      "namedPort": {
                        "description": "The named port configuration. See the section below for details on configuration.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "The name of the port.",
                              "type": "string"
                            },
                            "port": {
                              "description": "The port number.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "project": {
                        "description": "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
                        "type": "string"
                      },
                      "statefulDisk": {
                        "description": "Disks created on the instances that will be preserved on instance delete, update, etc. Structure is documented below. For more information see the official documentation.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "deleteRule": {
                              "description": ", A value that prescribes what should happen to the stateful disk when the VM instance is deleted. The available options are NEVER and ON_PERMANENT_INSTANCE_DELETION. NEVER - detach the disk when the VM is deleted, but do not delete the disk. ON_PERMANENT_INSTANCE_DELETION will delete the stateful disk when the VM is permanently deleted from the instance group. The default is NEVER.",
                              "type": "string"
                            },
                            "deviceName": {
                              "description": ", The device name of the disk to be attached.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "targetSize": {
                        "description": "The target number of running instances for this managed instance group. This value should always be explicitly set unless this resource is attached to an autoscaler, in which case it should never be set. Defaults to 0.",
                        "type": "number"
                      },
                      "updatePolicy": {
                        "description": "The update policy for this managed instance group. Structure is documented below. For more information, see the official documentation and API",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "maxSurgeFixed": {
                              "description": ", The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with max_surge_percent. If neither is set, defaults to 1",
                              "type": "number"
                            },
                            "maxSurgePercent": {
                              "description": ", The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with max_surge_fixed.",
                              "type": "number"
                            },
                            "maxUnavailableFixed": {
                              "description": ", The maximum number of instances that can be unavailable during the update process. Conflicts with max_unavailable_percent. If neither is set, defaults to 1",
                              "type": "number"
                            },
                            "maxUnavailablePercent": {
                              "description": ", The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with max_unavailable_fixed.",
                              "type": "number"
                            },
                            "minimalAction": {
                              "description": "- Minimal action to be taken on an instance. You can specify either REFRESH to update without stopping instances, RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a REFRESH, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.",
                              "type": "string"
                            },
                            "mostDisruptiveAllowedAction": {
                              "description": "- Most disruptive action that is allowed to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to allow actions that do not need instance restart, RESTART to allow actions that can be applied without instance replacing or REPLACE to allow all possible actions. If the Updater determines that the minimal update action needed is more disruptive than most disruptive allowed action you specify it will not perform the update at all.",
                              "type": "string"
                            },
                            "replacementMethod": {
                              "description": ", The instance replacement method for managed instance groups. Valid values are: \"RECREATE\", \"SUBSTITUTE\". If SUBSTITUTE (default), the group replaces VM instances with new instances that have randomly generated names. If RECREATE, instance names are preserved.  You must also set max_unavailable_fixed or max_unavailable_percent to be greater than 0.",
                              "type": "string"
                            },
                            "type": {
                              "description": "- The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "version": {
                        "description": "Application versions managed by this instance group. Each version deals with a specific instance template, allowing canary release scenarios. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "- Version name.",
                              "type": "string"
                            },
                            "targetSize": {
                              "description": "- The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "fixed": {
                                    "description": ", The number of instances which are managed for this version. Conflicts with percent.",
                                    "type": "number"
                                  },
                                  "percent": {
                                    "description": ", The number of instances (calculated as percentage) which are managed for this version. Conflicts with fixed. Note that when using percent, rounding will be in favor of explicitly set target_size values; a managed instance group with 2 instances and 2 versions, one of which has a target_size.percent of 60 will create 2 instances of that version.",
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "waitForInstances": {
                        "description": "Whether to wait for all instances to be created/updated before returning.",
                        "type": "boolean"
                      },
                      "waitForInstancesStatus": {
                        "description": "When used with wait_for_instances it specifies the status to wait for. When STABLE is specified this resource will wait until the instances are stable before returning. When UPDATED is set, it will wait for the version target to be reached and any per instance configs to be effective as well as all instances to be stable before returning. The possible values are STABLE and UPDATED",
                        "type": "string"
                      }
                    }
                  },
                  "managementPolicies": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
                    "type": "array",
                    "default": [
                      "*"
                    ],
                    "items": {
                      "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
                      "type": "string",
                      "enum": [
                        "Observe",
                        "Create",
                        "Update",
                        "Delete",
                        "LateInitialize",
                        "*"
                      ]
                    }
                  },
                  "providerConfigRef": {
                    "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
                    "type": "object",
                    "default": {
                      "name": "default"
                    },
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "publishConnectionDetailsTo": {
                    "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "configRef": {
                        "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
                        "type": "object",
                        "default": {
                          "name": "default"
                        },
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "Metadata is the metadata for connection secret.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "type": {
                            "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name of the connection secret.",
                        "type": "string"
                      }
                    }
                  },
                  "writeConnectionSecretToRef": {
                    "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
                    "type": "object",
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  }
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.baseInstanceName) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.baseInstanceName))",
                    "message": "spec.forProvider.baseInstanceName is a required parameter"
                  },
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.version))",
                    "message": "spec.forProvider.version is a required parameter"
                  }
                ]
              },
              "status": {
                "description": "InstanceGroupManagerStatus defines the observed state of InstanceGroupManager.",
                "type": "object",
                "properties": {
                  "atProvider": {
                    "type": "object",
                    "properties": {
                      "autoHealingPolicies": {
                        "description": "The autohealing policies for this managed instance group. You can specify only one value. Structure is documented below. For more information, see the official documentation.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "healthCheck": {
                              "description": "The health check resource that signals autohealing.",
                              "type": "string"
                            },
                            "initialDelaySec": {
                              "description": "The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "baseInstanceName": {
                        "description": "The base instance name to use for instances in this group. The value must be a valid RFC1035 name. Supported characters are lowercase letters, numbers, and hyphens (-). Instances are named by appending a hyphen and a random four-character string to the base instance name.",
                        "type": "string"
                      },
                      "description": {
                        "description": "An optional textual description of the instance group manager.",
                        "type": "string"
                      },
                      "fingerprint": {
                        "description": "The fingerprint of the instance group manager.",
                        "type": "string"
                      },
                      "id": {
                        "description": "an identifier for the resource with format projects/{{project}}/zones/{{zone}}/instanceGroupManagers/{{name}}",
                        "type": "string"
                      },
                      "instanceGroup": {
                        "description": "The full URL of the instance group created by the manager.",
                        "type": "string"
                      },
                      "instanceLifecyclePolicy": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "forceUpdateOnRepair": {
                              "description": "), Specifies whether to apply the group's latest configuration when repairing a VM. Valid options are: YES, NO. If YES and you updated the group's instance template or per-instance configurations after the VM was created, then these changes are applied when VM is repaired. If NO (default), then updates are applied in accordance with the group's update policy type.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "listManagedInstancesResults": {
                        "description": "Pagination behavior of the listManagedInstances API method for this managed instance group. Valid values are: PAGELESS, PAGINATED. If PAGELESS (default), Pagination is disabled for the group's listManagedInstances API method. maxResults and pageToken query parameters are ignored and all instances are returned in a single response. If PAGINATED, pagination is enabled, maxResults and pageToken query parameters are respected.",
                        "type": "string"
                      },
                      "namedPort": {
                        "description": "The named port configuration. See the section below for details on configuration.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "The name of the port.",
                              "type": "string"
                            },
                            "port": {
                              "description": "The port number.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "operation": {
                        "type": "string"
                      },
                      "project": {
                        "description": "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
                        "type": "string"
                      },
                      "selfLink": {
                        "description": "The URL of the created resource.",
                        "type": "string"
                      },
                      "statefulDisk": {
                        "description": "Disks created on the instances that will be preserved on instance delete, update, etc. Structure is documented below. For more information see the official documentation.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "deleteRule": {
                              "description": ", A value that prescribes what should happen to the stateful disk when the VM instance is deleted. The available options are NEVER and ON_PERMANENT_INSTANCE_DELETION. NEVER - detach the disk when the VM is deleted, but do not delete the disk. ON_PERMANENT_INSTANCE_DELETION will delete the stateful disk when the VM is permanently deleted from the instance group. The default is NEVER.",
                              "type": "string"
                            },
                            "deviceName": {
                              "description": ", The device name of the disk to be attached.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "status": {
                        "description": "The status of this managed instance group.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "isStable": {
                              "description": "A bit indicating whether the managed instance group is in a stable state. A stable state means that: none of the instances in the managed instance group is currently undergoing any type of change (for example, creation, restart, or deletion); no future changes are scheduled for instances in the managed instance group; and the managed instance group itself is not being modified.",
                              "type": "boolean"
                            },
                            "stateful": {
                              "description": "Stateful status of the given Instance Group Manager.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "hasStatefulConfig": {
                                    "description": "A bit indicating whether the managed instance group has stateful configuration, that is, if you have configured any items in a stateful policy or in per-instance configs. The group might report that it has no stateful config even when there is still some preserved state on a managed instance, for example, if you have deleted all PICs but not yet applied those deletions.",
                                    "type": "boolean"
                                  },
                                  "perInstanceConfigs": {
                                    "description": "Status of per-instance configs on the instance.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "allEffective": {
                                          "description": "A bit indicating if all of the group's per-instance configs (listed in the output of a listPerInstanceConfigs API call) have status EFFECTIVE or there are no per-instance-configs.",
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "versionTarget": {
                              "description": "A status of consistency of Instances' versions with their target version specified by version field on Instance Group Manager.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "isReached": {
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "targetPools": {
                        "description": "The full URL of all target pools to which new instances in the group are added. Updating the target pools attribute does not affect existing instances.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "targetSize": {
                        "description": "The target number of running instances for this managed instance group. This value should always be explicitly set unless this resource is attached to an autoscaler, in which case it should never be set. Defaults to 0.",
                        "type": "number"
                      },
                      "updatePolicy": {
                        "description": "The update policy for this managed instance group. Structure is documented below. For more information, see the official documentation and API",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "maxSurgeFixed": {
                              "description": ", The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with max_surge_percent. If neither is set, defaults to 1",
                              "type": "number"
                            },
                            "maxSurgePercent": {
                              "description": ", The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with max_surge_fixed.",
                              "type": "number"
                            },
                            "maxUnavailableFixed": {
                              "description": ", The maximum number of instances that can be unavailable during the update process. Conflicts with max_unavailable_percent. If neither is set, defaults to 1",
                              "type": "number"
                            },
                            "maxUnavailablePercent": {
                              "description": ", The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with max_unavailable_fixed.",
                              "type": "number"
                            },
                            "minimalAction": {
                              "description": "- Minimal action to be taken on an instance. You can specify either REFRESH to update without stopping instances, RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a REFRESH, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.",
                              "type": "string"
                            },
                            "mostDisruptiveAllowedAction": {
                              "description": "- Most disruptive action that is allowed to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to allow actions that do not need instance restart, RESTART to allow actions that can be applied without instance replacing or REPLACE to allow all possible actions. If the Updater determines that the minimal update action needed is more disruptive than most disruptive allowed action you specify it will not perform the update at all.",
                              "type": "string"
                            },
                            "replacementMethod": {
                              "description": ", The instance replacement method for managed instance groups. Valid values are: \"RECREATE\", \"SUBSTITUTE\". If SUBSTITUTE (default), the group replaces VM instances with new instances that have randomly generated names. If RECREATE, instance names are preserved.  You must also set max_unavailable_fixed or max_unavailable_percent to be greater than 0.",
                              "type": "string"
                            },
                            "type": {
                              "description": "- The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "version": {
                        "description": "Application versions managed by this instance group. Each version deals with a specific instance template, allowing canary release scenarios. Structure is documented below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "instanceTemplate": {
                              "description": "- The full URL to an instance template from which all new instances of this version will be created. It is recommended to reference instance templates through their unique id (self_link_unique attribute).",
                              "type": "string"
                            },
                            "name": {
                              "description": "- Version name.",
                              "type": "string"
                            },
                            "targetSize": {
                              "description": "- The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "fixed": {
                                    "description": ", The number of instances which are managed for this version. Conflicts with percent.",
                                    "type": "number"
                                  },
                                  "percent": {
                                    "description": ", The number of instances (calculated as percentage) which are managed for this version. Conflicts with fixed. Note that when using percent, rounding will be in favor of explicitly set target_size values; a managed instance group with 2 instances and 2 versions, one of which has a target_size.percent of 60 will create 2 instances of that version.",
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "waitForInstances": {
                        "description": "Whether to wait for all instances to be created/updated before returning.",
                        "type": "boolean"
                      },
                      "waitForInstancesStatus": {
                        "description": "When used with wait_for_instances it specifies the status to wait for. When STABLE is specified this resource will wait until the instances are stable before returning. When UPDATED is set, it will wait for the version target to be reached and any per instance configs to be effective as well as all instances to be stable before returning. The possible values are STABLE and UPDATED",
                        "type": "string"
                      },
                      "zone": {
                        "description": "The zone that instances in this group should be created in.",
                        "type": "string"
                      }
                    }
                  },
                  "conditions": {
                    "description": "Conditions of the resource.",
                    "type": "array",
                    "items": {
                      "description": "A Condition that may apply to a resource.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "A Reason for this condition's last transition from one status to another.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of this condition; is it currently True, False, or Unknown?",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "READY",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
          },
          {
            "name": "SYNCED",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Synced')].status"
          },
          {
            "name": "EXTERNAL-NAME",
            "type": "string",
            "jsonPath": ".metadata.annotations.crossplane\\.io/external-name"
          },
          {
            "name": "AGE",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}