{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "accounts.cosmosdb.azure.kubedb.com",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.11.3"
    }
  },
  "spec": {
    "group": "cosmosdb.azure.kubedb.com",
    "names": {
      "plural": "accounts",
      "singular": "account",
      "kind": "Account",
      "listKind": "AccountList",
      "categories": [
        "crossplane",
        "managed",
        "azure"
      ]
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1alpha1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "Account is the Schema for the Accounts API. Manages a CosmosDB (formally DocumentDB) Account.",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "AccountSpec defines the desired state of Account",
                "type": "object",
                "required": [
                  "forProvider"
                ],
                "properties": {
                  "deletionPolicy": {
                    "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
                    "type": "string",
                    "default": "Delete",
                    "enum": [
                      "Orphan",
                      "Delete"
                    ]
                  },
                  "forProvider": {
                    "type": "object",
                    "required": [
                      "resourceGroupName"
                    ],
                    "properties": {
                      "accessKeyMetadataWritesEnabled": {
                        "description": "Is write operations on metadata resources (databases, containers, throughput) via account keys enabled? Defaults to true.",
                        "type": "boolean"
                      },
                      "analyticalStorage": {
                        "description": "An analytical_storage block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "schemaType"
                          ],
                          "properties": {
                            "schemaType": {
                              "description": "The schema type of the Analytical Storage for this Cosmos DB account. Possible values are FullFidelity and WellDefined.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "analyticalStorageEnabled": {
                        "description": "Enable Analytical Storage option for this Cosmos DB account. Defaults to false. Enabling and then disabling analytical storage forces a new resource to be created.",
                        "type": "boolean"
                      },
                      "backup": {
                        "description": "A backup block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "type"
                          ],
                          "properties": {
                            "intervalInMinutes": {
                              "description": "The interval in minutes between two backups. This is configurable only when type is Periodic. Possible values are between 60 and 1440.",
                              "type": "number"
                            },
                            "retentionInHours": {
                              "description": "The time in hours that each backup is retained. This is configurable only when type is Periodic. Possible values are between 8 and 720.",
                              "type": "number"
                            },
                            "storageRedundancy": {
                              "description": "The storage redundancy is used to indicate the type of backup residency. This is configurable only when type is Periodic. Possible values are Geo, Local and Zone.",
                              "type": "string"
                            },
                            "type": {
                              "description": "The type of the backup. Possible values are Continuous and Periodic. Migration of Periodic to Continuous is one-way, changing Continuous to Periodic forces a new resource to be created.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "capabilities": {
                        "description": "The capabilities which should be enabled for this Cosmos DB account. Value is a capabilities block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "The capability to enable - Possible values are AllowSelfServeUpgradeToMongo36, DisableRateLimitingResponses, EnableAggregationPipeline, EnableCassandra, EnableGremlin, EnableMongo, EnableMongo16MBDocumentSupport, EnableMongoRetryableWrites, EnableMongoRoleBasedAccessControl, EnablePartialUniqueIndex, EnableServerless, EnableTable, EnableTtlOnCustomPath, EnableUniqueCompoundNestedDocs, MongoDBv3.4 and mongoEnableDocLevelTTL.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "capacity": {
                        "description": "A capacity block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "totalThroughputLimit"
                          ],
                          "properties": {
                            "totalThroughputLimit": {
                              "description": "The total throughput limit imposed on this Cosmos DB account (RU/s). Possible values are at least -1. -1 means no limit.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "consistencyPolicy": {
                        "description": "Specifies a consistency_policy resource, used to define the consistency policy for this CosmosDB account.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "consistencyLevel"
                          ],
                          "properties": {
                            "consistencyLevel": {
                              "description": "The Consistency Level to use for this CosmosDB Account - can be either BoundedStaleness, Eventual, Session, Strong or ConsistentPrefix.",
                              "type": "string"
                            },
                            "maxIntervalInSeconds": {
                              "description": "When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. The accepted range for this value is 5 - 86400 (1 day). Defaults to 5. Required when consistency_level is set to BoundedStaleness.",
                              "type": "number"
                            },
                            "maxStalenessPrefix": {
                              "description": "When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. The accepted range for this value is 10 â€“ 2147483647. Defaults to 100. Required when consistency_level is set to BoundedStaleness.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "corsRule": {
                        "description": "A cors_rule block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "allowedHeaders",
                            "allowedMethods",
                            "allowedOrigins",
                            "exposedHeaders",
                            "maxAgeInSeconds"
                          ],
                          "properties": {
                            "allowedHeaders": {
                              "description": "A list of headers that are allowed to be a part of the cross-origin request.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "allowedMethods": {
                              "description": "A list of HTTP headers that are allowed to be executed by the origin. Valid options are DELETE, GET, HEAD, MERGE, POST, OPTIONS, PUT or PATCH.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "allowedOrigins": {
                              "description": "A list of origin domains that will be allowed by CORS.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "exposedHeaders": {
                              "description": "A list of response headers that are exposed to CORS clients.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "maxAgeInSeconds": {
                              "description": "The number of seconds the client should cache a preflight response.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "createMode": {
                        "description": "The creation mode for the CosmosDB Account. Possible values are Default and Restore. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "defaultIdentityType": {
                        "description": "The default identity for accessing Key Vault. Possible values are FirstPartyIdentity, SystemAssignedIdentity or UserAssignedIdentity. Defaults to FirstPartyIdentity.",
                        "type": "string"
                      },
                      "enableAutomaticFailover": {
                        "description": "Enable automatic failover for this Cosmos DB account.",
                        "type": "boolean"
                      },
                      "enableFreeTier": {
                        "description": "Enable the Free Tier pricing option for this Cosmos DB account. Defaults to false. Changing this forces a new resource to be created.",
                        "type": "boolean"
                      },
                      "enableMultipleWriteLocations": {
                        "description": "Enable multiple write locations for this Cosmos DB account.",
                        "type": "boolean"
                      },
                      "geoLocation": {
                        "description": "Specifies a geo_location resource, used to define where data should be replicated with the failover_priority 0 specifying the primary location. Value is a geo_location block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "failoverPriority",
                            "location"
                          ],
                          "properties": {
                            "failoverPriority": {
                              "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists. Changing this causes the location to be re-provisioned and cannot be changed for the location with failover priority 0.",
                              "type": "number"
                            },
                            "location": {
                              "description": "The name of the Azure region to host replicated data.",
                              "type": "string"
                            },
                            "zoneRedundant": {
                              "description": "Should zone redundancy be enabled for this region? Defaults to false.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "identity": {
                        "description": "An identity block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "type"
                          ],
                          "properties": {
                            "identityIds": {
                              "description": "Specifies a list of User Assigned Managed Identity IDs to be assigned to this Cosmos Account.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "type": {
                              "description": "The Type of Managed Identity assigned to this Cosmos account. Possible values are SystemAssigned, UserAssigned and SystemAssigned, UserAssigned.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "ipRangeFilter": {
                        "description": "CosmosDB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.",
                        "type": "string"
                      },
                      "isVirtualNetworkFilterEnabled": {
                        "description": "Enables virtual network filtering for this Cosmos DB account.",
                        "type": "boolean"
                      },
                      "keyVaultKeyId": {
                        "description": "A versionless Key Vault Key ID for CMK encryption. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Specifies the Kind of CosmosDB to create - possible values are GlobalDocumentDB, MongoDB and Parse. Defaults to GlobalDocumentDB. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "localAuthenticationDisabled": {
                        "description": "Disable local authentication and ensure only MSI and AAD can be used exclusively for authentication. Defaults to false. Can be set only when using the SQL API.",
                        "type": "boolean"
                      },
                      "location": {
                        "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "mongoServerVersion": {
                        "description": "The Server Version of a MongoDB account. Possible values are 4.2, 4.0, 3.6, and 3.2.",
                        "type": "string"
                      },
                      "networkAclBypassForAzureServices": {
                        "description": "If Azure services can bypass ACLs. Defaults to false.",
                        "type": "boolean"
                      },
                      "networkAclBypassIds": {
                        "description": "The list of resource Ids for Network Acl Bypass for this Cosmos DB account.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "offerType": {
                        "description": "Specifies the Offer Type to use for this CosmosDB Account; currently, this can only be set to Standard.",
                        "type": "string"
                      },
                      "publicNetworkAccessEnabled": {
                        "description": "Whether or not public network access is allowed for this CosmosDB account. Defaults to true.",
                        "type": "boolean"
                      },
                      "resourceGroupName": {
                        "description": "The name of the resource group in which the CosmosDB Account is created. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "restore": {
                        "description": "A restore block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "restoreTimestampInUtc",
                            "sourceCosmosdbAccountId"
                          ],
                          "properties": {
                            "database": {
                              "description": "A database block as defined below. Changing this forces a new resource to be created.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "collectionNames": {
                                    "description": "A list of the collection names for the restore request. Changing this forces a new resource to be created.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "name": {
                                    "description": "Specifies the name of the CosmosDB Account. Changing this forces a new resource to be created.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "restoreTimestampInUtc": {
                              "description": "The creation time of the database or the collection (Datetime Format RFC 3339). Changing this forces a new resource to be created.",
                              "type": "string"
                            },
                            "sourceCosmosdbAccountId": {
                              "description": "The resource ID of the restorable database account from which the restore has to be initiated. The example is /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{restorableDatabaseAccountName}. Changing this forces a new resource to be created.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "tags": {
                        "description": "A mapping of tags to assign to the resource.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "virtualNetworkRule": {
                        "description": "Specifies a virtual_network_rules resource, used to define which subnets are allowed to access this CosmosDB account.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "The ID of the virtual network subnet.",
                              "type": "string"
                            },
                            "ignoreMissingVnetServiceEndpoint": {
                              "description": "If set to true, the specified subnet will be added as a virtual network rule even if its CosmosDB service endpoint is not active. Defaults to false.",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  },
                  "managementPolicy": {
                    "description": "THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
                    "type": "string",
                    "default": "FullControl",
                    "enum": [
                      "FullControl",
                      "ObserveOnly",
                      "OrphanOnDelete"
                    ]
                  },
                  "providerConfigRef": {
                    "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
                    "type": "object",
                    "default": {
                      "name": "default"
                    },
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "providerRef": {
                    "description": "ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "publishConnectionDetailsTo": {
                    "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "configRef": {
                        "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
                        "type": "object",
                        "default": {
                          "name": "default"
                        },
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "Metadata is the metadata for connection secret.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "type": {
                            "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name of the connection secret.",
                        "type": "string"
                      }
                    }
                  },
                  "writeConnectionSecretToRef": {
                    "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
                    "type": "object",
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  }
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "self.managementPolicy == 'ObserveOnly' || has(self.forProvider.consistencyPolicy)",
                    "message": "consistencyPolicy is a required parameter"
                  },
                  {
                    "rule": "self.managementPolicy == 'ObserveOnly' || has(self.forProvider.geoLocation)",
                    "message": "geoLocation is a required parameter"
                  },
                  {
                    "rule": "self.managementPolicy == 'ObserveOnly' || has(self.forProvider.location)",
                    "message": "location is a required parameter"
                  },
                  {
                    "rule": "self.managementPolicy == 'ObserveOnly' || has(self.forProvider.offerType)",
                    "message": "offerType is a required parameter"
                  }
                ]
              },
              "status": {
                "description": "AccountStatus defines the observed state of Account.",
                "type": "object",
                "properties": {
                  "atProvider": {
                    "type": "object",
                    "properties": {
                      "accessKeyMetadataWritesEnabled": {
                        "description": "Is write operations on metadata resources (databases, containers, throughput) via account keys enabled? Defaults to true.",
                        "type": "boolean"
                      },
                      "analyticalStorage": {
                        "description": "An analytical_storage block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "schemaType": {
                              "description": "The schema type of the Analytical Storage for this Cosmos DB account. Possible values are FullFidelity and WellDefined.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "analyticalStorageEnabled": {
                        "description": "Enable Analytical Storage option for this Cosmos DB account. Defaults to false. Enabling and then disabling analytical storage forces a new resource to be created.",
                        "type": "boolean"
                      },
                      "backup": {
                        "description": "A backup block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "intervalInMinutes": {
                              "description": "The interval in minutes between two backups. This is configurable only when type is Periodic. Possible values are between 60 and 1440.",
                              "type": "number"
                            },
                            "retentionInHours": {
                              "description": "The time in hours that each backup is retained. This is configurable only when type is Periodic. Possible values are between 8 and 720.",
                              "type": "number"
                            },
                            "storageRedundancy": {
                              "description": "The storage redundancy is used to indicate the type of backup residency. This is configurable only when type is Periodic. Possible values are Geo, Local and Zone.",
                              "type": "string"
                            },
                            "type": {
                              "description": "The type of the backup. Possible values are Continuous and Periodic. Migration of Periodic to Continuous is one-way, changing Continuous to Periodic forces a new resource to be created.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "capabilities": {
                        "description": "The capabilities which should be enabled for this Cosmos DB account. Value is a capabilities block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "The capability to enable - Possible values are AllowSelfServeUpgradeToMongo36, DisableRateLimitingResponses, EnableAggregationPipeline, EnableCassandra, EnableGremlin, EnableMongo, EnableMongo16MBDocumentSupport, EnableMongoRetryableWrites, EnableMongoRoleBasedAccessControl, EnablePartialUniqueIndex, EnableServerless, EnableTable, EnableTtlOnCustomPath, EnableUniqueCompoundNestedDocs, MongoDBv3.4 and mongoEnableDocLevelTTL.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "capacity": {
                        "description": "A capacity block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "totalThroughputLimit": {
                              "description": "The total throughput limit imposed on this Cosmos DB account (RU/s). Possible values are at least -1. -1 means no limit.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "consistencyPolicy": {
                        "description": "Specifies a consistency_policy resource, used to define the consistency policy for this CosmosDB account.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "consistencyLevel": {
                              "description": "The Consistency Level to use for this CosmosDB Account - can be either BoundedStaleness, Eventual, Session, Strong or ConsistentPrefix.",
                              "type": "string"
                            },
                            "maxIntervalInSeconds": {
                              "description": "When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. The accepted range for this value is 5 - 86400 (1 day). Defaults to 5. Required when consistency_level is set to BoundedStaleness.",
                              "type": "number"
                            },
                            "maxStalenessPrefix": {
                              "description": "When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. The accepted range for this value is 10 â€“ 2147483647. Defaults to 100. Required when consistency_level is set to BoundedStaleness.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "corsRule": {
                        "description": "A cors_rule block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "allowedHeaders": {
                              "description": "A list of headers that are allowed to be a part of the cross-origin request.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "allowedMethods": {
                              "description": "A list of HTTP headers that are allowed to be executed by the origin. Valid options are DELETE, GET, HEAD, MERGE, POST, OPTIONS, PUT or PATCH.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "allowedOrigins": {
                              "description": "A list of origin domains that will be allowed by CORS.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "exposedHeaders": {
                              "description": "A list of response headers that are exposed to CORS clients.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "maxAgeInSeconds": {
                              "description": "The number of seconds the client should cache a preflight response.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "createMode": {
                        "description": "The creation mode for the CosmosDB Account. Possible values are Default and Restore. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "defaultIdentityType": {
                        "description": "The default identity for accessing Key Vault. Possible values are FirstPartyIdentity, SystemAssignedIdentity or UserAssignedIdentity. Defaults to FirstPartyIdentity.",
                        "type": "string"
                      },
                      "enableAutomaticFailover": {
                        "description": "Enable automatic failover for this Cosmos DB account.",
                        "type": "boolean"
                      },
                      "enableFreeTier": {
                        "description": "Enable the Free Tier pricing option for this Cosmos DB account. Defaults to false. Changing this forces a new resource to be created.",
                        "type": "boolean"
                      },
                      "enableMultipleWriteLocations": {
                        "description": "Enable multiple write locations for this Cosmos DB account.",
                        "type": "boolean"
                      },
                      "endpoint": {
                        "description": "The endpoint used to connect to the CosmosDB account.",
                        "type": "string"
                      },
                      "geoLocation": {
                        "description": "Specifies a geo_location resource, used to define where data should be replicated with the failover_priority 0 specifying the primary location. Value is a geo_location block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "failoverPriority": {
                              "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists. Changing this causes the location to be re-provisioned and cannot be changed for the location with failover priority 0.",
                              "type": "number"
                            },
                            "id": {
                              "description": "The ID of the virtual network subnet.",
                              "type": "string"
                            },
                            "location": {
                              "description": "The name of the Azure region to host replicated data.",
                              "type": "string"
                            },
                            "zoneRedundant": {
                              "description": "Should zone redundancy be enabled for this region? Defaults to false.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "id": {
                        "description": "The CosmosDB Account ID.",
                        "type": "string"
                      },
                      "identity": {
                        "description": "An identity block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "identityIds": {
                              "description": "Specifies a list of User Assigned Managed Identity IDs to be assigned to this Cosmos Account.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "principalId": {
                              "description": "The Principal ID associated with this Managed Service Identity.",
                              "type": "string"
                            },
                            "tenantId": {
                              "description": "The Tenant ID associated with this Managed Service Identity.",
                              "type": "string"
                            },
                            "type": {
                              "description": "The Type of Managed Identity assigned to this Cosmos account. Possible values are SystemAssigned, UserAssigned and SystemAssigned, UserAssigned.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "ipRangeFilter": {
                        "description": "CosmosDB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.",
                        "type": "string"
                      },
                      "isVirtualNetworkFilterEnabled": {
                        "description": "Enables virtual network filtering for this Cosmos DB account.",
                        "type": "boolean"
                      },
                      "keyVaultKeyId": {
                        "description": "A versionless Key Vault Key ID for CMK encryption. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Specifies the Kind of CosmosDB to create - possible values are GlobalDocumentDB, MongoDB and Parse. Defaults to GlobalDocumentDB. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "localAuthenticationDisabled": {
                        "description": "Disable local authentication and ensure only MSI and AAD can be used exclusively for authentication. Defaults to false. Can be set only when using the SQL API.",
                        "type": "boolean"
                      },
                      "location": {
                        "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "mongoServerVersion": {
                        "description": "The Server Version of a MongoDB account. Possible values are 4.2, 4.0, 3.6, and 3.2.",
                        "type": "string"
                      },
                      "networkAclBypassForAzureServices": {
                        "description": "If Azure services can bypass ACLs. Defaults to false.",
                        "type": "boolean"
                      },
                      "networkAclBypassIds": {
                        "description": "The list of resource Ids for Network Acl Bypass for this Cosmos DB account.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "offerType": {
                        "description": "Specifies the Offer Type to use for this CosmosDB Account; currently, this can only be set to Standard.",
                        "type": "string"
                      },
                      "publicNetworkAccessEnabled": {
                        "description": "Whether or not public network access is allowed for this CosmosDB account. Defaults to true.",
                        "type": "boolean"
                      },
                      "readEndpoints": {
                        "description": "A list of read endpoints available for this CosmosDB account.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "resourceGroupName": {
                        "description": "The name of the resource group in which the CosmosDB Account is created. Changing this forces a new resource to be created.",
                        "type": "string"
                      },
                      "restore": {
                        "description": "A restore block as defined below.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "database": {
                              "description": "A database block as defined below. Changing this forces a new resource to be created.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "collectionNames": {
                                    "description": "A list of the collection names for the restore request. Changing this forces a new resource to be created.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "name": {
                                    "description": "Specifies the name of the CosmosDB Account. Changing this forces a new resource to be created.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "restoreTimestampInUtc": {
                              "description": "The creation time of the database or the collection (Datetime Format RFC 3339). Changing this forces a new resource to be created.",
                              "type": "string"
                            },
                            "sourceCosmosdbAccountId": {
                              "description": "The resource ID of the restorable database account from which the restore has to be initiated. The example is /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{restorableDatabaseAccountName}. Changing this forces a new resource to be created.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "tags": {
                        "description": "A mapping of tags to assign to the resource.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "virtualNetworkRule": {
                        "description": "Specifies a virtual_network_rules resource, used to define which subnets are allowed to access this CosmosDB account.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The ID of the virtual network subnet.",
                              "type": "string"
                            },
                            "ignoreMissingVnetServiceEndpoint": {
                              "description": "If set to true, the specified subnet will be added as a virtual network rule even if its CosmosDB service endpoint is not active. Defaults to false.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "writeEndpoints": {
                        "description": "A list of write endpoints available for this CosmosDB account.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "conditions": {
                    "description": "Conditions of the resource.",
                    "type": "array",
                    "items": {
                      "description": "A Condition that may apply to a resource.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "A Reason for this condition's last transition from one status to another.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of this condition; is it currently True, False, or Unknown?",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "READY",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
          },
          {
            "name": "SYNCED",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Synced')].status"
          },
          {
            "name": "EXTERNAL-NAME",
            "type": "string",
            "jsonPath": ".metadata.annotations.crossplane\\.io/external-name"
          },
          {
            "name": "AGE",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}