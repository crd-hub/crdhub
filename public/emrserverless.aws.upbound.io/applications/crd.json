{
  "kind": "CustomResourceDefinition",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "name": "applications.emrserverless.aws.upbound.io",
    "creationTimestamp": null,
    "annotations": {
      "controller-gen.kubebuilder.io/version": "v0.13.0"
    }
  },
  "spec": {
    "group": "emrserverless.aws.upbound.io",
    "names": {
      "plural": "applications",
      "singular": "application",
      "kind": "Application",
      "listKind": "ApplicationList",
      "categories": [
        "crossplane",
        "managed",
        "aws"
      ]
    },
    "scope": "Cluster",
    "versions": [
      {
        "name": "v1beta1",
        "served": true,
        "storage": true,
        "schema": {
          "openAPIV3Schema": {
            "description": "Application is the Schema for the Applications API. Manages an EMR Serverless Application",
            "type": "object",
            "required": [
              "spec"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "metadata": {
                "type": "object"
              },
              "spec": {
                "description": "ApplicationSpec defines the desired state of Application",
                "type": "object",
                "required": [
                  "forProvider"
                ],
                "properties": {
                  "deletionPolicy": {
                    "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
                    "type": "string",
                    "default": "Delete",
                    "enum": [
                      "Orphan",
                      "Delete"
                    ]
                  },
                  "forProvider": {
                    "type": "object",
                    "required": [
                      "region"
                    ],
                    "properties": {
                      "architecture": {
                        "description": "–  The CPU architecture of an application. Valid values are ARM64 or X86_64. Default value is X86_64.",
                        "type": "string"
                      },
                      "autoStartConfiguration": {
                        "description": "–  The configuration for an application to automatically start on job submission.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "description": "Enables the application to automatically start on job submission. Defaults to true.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "autoStopConfiguration": {
                        "description": "–  The configuration for an application to automatically stop after a certain amount of time being idle.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "description": "Enables the application to automatically start on job submission. Defaults to true.",
                              "type": "boolean"
                            },
                            "idleTimeoutMinutes": {
                              "description": "The amount of idle time in minutes after which your application will automatically stop. Defaults to 15 minutes.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "imageConfiguration": {
                        "description": "–  The image configuration applied to all worker types.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "imageUri": {
                              "description": "The image URI.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "initialCapacity": {
                        "description": "–  The capacity to initialize when the application is created.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "initialCapacityConfig": {
                              "description": "The initial capacity configuration per worker.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "workerConfiguration": {
                                    "description": "The resource configuration of the initial capacity configuration.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "cpu": {
                                          "description": "The maximum allowed CPU for an application.",
                                          "type": "string"
                                        },
                                        "disk": {
                                          "description": "The maximum allowed disk for an application.",
                                          "type": "string"
                                        },
                                        "memory": {
                                          "description": "The maximum allowed resources for an application.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "workerCount": {
                                    "description": "The number of workers in the initial capacity configuration.",
                                    "type": "number"
                                  }
                                }
                              }
                            },
                            "initialCapacityType": {
                              "description": "The worker type for an analytics framework. For Spark applications, the key can either be set to Driver or Executor. For Hive applications, it can be set to HiveDriver or TezTask.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "maximumCapacity": {
                        "description": "–  The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "cpu": {
                              "description": "The maximum allowed CPU for an application.",
                              "type": "string"
                            },
                            "disk": {
                              "description": "The maximum allowed disk for an application.",
                              "type": "string"
                            },
                            "memory": {
                              "description": "The maximum allowed resources for an application.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "name": {
                        "description": "–  The name of the application.",
                        "type": "string"
                      },
                      "networkConfiguration": {
                        "description": "–  The network configuration for customer VPC connectivity.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "securityGroupIds": {
                              "description": "The array of security group Ids for customer VPC connectivity.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "subnetIds": {
                              "description": "The array of subnet Ids for customer VPC connectivity.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "region": {
                        "description": "Region is the region you'd like your resource to be created in.",
                        "type": "string"
                      },
                      "releaseLabel": {
                        "description": "–  The EMR release version associated with the application.",
                        "type": "string"
                      },
                      "tags": {
                        "description": "Key-value map of resource tags.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "type": {
                        "description": "–  The type of application you want to start, such as spark or hive.",
                        "type": "string"
                      }
                    }
                  },
                  "initProvider": {
                    "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
                    "type": "object",
                    "properties": {
                      "architecture": {
                        "description": "–  The CPU architecture of an application. Valid values are ARM64 or X86_64. Default value is X86_64.",
                        "type": "string"
                      },
                      "autoStartConfiguration": {
                        "description": "–  The configuration for an application to automatically start on job submission.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "description": "Enables the application to automatically start on job submission. Defaults to true.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "autoStopConfiguration": {
                        "description": "–  The configuration for an application to automatically stop after a certain amount of time being idle.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "description": "Enables the application to automatically start on job submission. Defaults to true.",
                              "type": "boolean"
                            },
                            "idleTimeoutMinutes": {
                              "description": "The amount of idle time in minutes after which your application will automatically stop. Defaults to 15 minutes.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "imageConfiguration": {
                        "description": "–  The image configuration applied to all worker types.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "imageUri": {
                              "description": "The image URI.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "initialCapacity": {
                        "description": "–  The capacity to initialize when the application is created.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "initialCapacityConfig": {
                              "description": "The initial capacity configuration per worker.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "workerConfiguration": {
                                    "description": "The resource configuration of the initial capacity configuration.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "cpu": {
                                          "description": "The maximum allowed CPU for an application.",
                                          "type": "string"
                                        },
                                        "disk": {
                                          "description": "The maximum allowed disk for an application.",
                                          "type": "string"
                                        },
                                        "memory": {
                                          "description": "The maximum allowed resources for an application.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "workerCount": {
                                    "description": "The number of workers in the initial capacity configuration.",
                                    "type": "number"
                                  }
                                }
                              }
                            },
                            "initialCapacityType": {
                              "description": "The worker type for an analytics framework. For Spark applications, the key can either be set to Driver or Executor. For Hive applications, it can be set to HiveDriver or TezTask.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "maximumCapacity": {
                        "description": "–  The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "cpu": {
                              "description": "The maximum allowed CPU for an application.",
                              "type": "string"
                            },
                            "disk": {
                              "description": "The maximum allowed disk for an application.",
                              "type": "string"
                            },
                            "memory": {
                              "description": "The maximum allowed resources for an application.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "name": {
                        "description": "–  The name of the application.",
                        "type": "string"
                      },
                      "networkConfiguration": {
                        "description": "–  The network configuration for customer VPC connectivity.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "securityGroupIds": {
                              "description": "The array of security group Ids for customer VPC connectivity.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "subnetIds": {
                              "description": "The array of subnet Ids for customer VPC connectivity.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "releaseLabel": {
                        "description": "–  The EMR release version associated with the application.",
                        "type": "string"
                      },
                      "tags": {
                        "description": "Key-value map of resource tags.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "type": {
                        "description": "–  The type of application you want to start, such as spark or hive.",
                        "type": "string"
                      }
                    }
                  },
                  "managementPolicies": {
                    "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
                    "type": "array",
                    "default": [
                      "*"
                    ],
                    "items": {
                      "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
                      "type": "string",
                      "enum": [
                        "Observe",
                        "Create",
                        "Update",
                        "Delete",
                        "LateInitialize",
                        "*"
                      ]
                    }
                  },
                  "providerConfigRef": {
                    "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
                    "type": "object",
                    "default": {
                      "name": "default"
                    },
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "publishConnectionDetailsTo": {
                    "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "configRef": {
                        "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
                        "type": "object",
                        "default": {
                          "name": "default"
                        },
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "Metadata is the metadata for connection secret.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "type": {
                            "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name of the connection secret.",
                        "type": "string"
                      }
                    }
                  },
                  "writeConnectionSecretToRef": {
                    "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
                    "type": "object",
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    }
                  }
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
                    "message": "spec.forProvider.name is a required parameter"
                  },
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.releaseLabel) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.releaseLabel))",
                    "message": "spec.forProvider.releaseLabel is a required parameter"
                  },
                  {
                    "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.type))",
                    "message": "spec.forProvider.type is a required parameter"
                  }
                ]
              },
              "status": {
                "description": "ApplicationStatus defines the observed state of Application.",
                "type": "object",
                "properties": {
                  "atProvider": {
                    "type": "object",
                    "properties": {
                      "architecture": {
                        "description": "–  The CPU architecture of an application. Valid values are ARM64 or X86_64. Default value is X86_64.",
                        "type": "string"
                      },
                      "arn": {
                        "description": "ARN of the cluster.",
                        "type": "string"
                      },
                      "autoStartConfiguration": {
                        "description": "–  The configuration for an application to automatically start on job submission.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "description": "Enables the application to automatically start on job submission. Defaults to true.",
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "autoStopConfiguration": {
                        "description": "–  The configuration for an application to automatically stop after a certain amount of time being idle.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "description": "Enables the application to automatically start on job submission. Defaults to true.",
                              "type": "boolean"
                            },
                            "idleTimeoutMinutes": {
                              "description": "The amount of idle time in minutes after which your application will automatically stop. Defaults to 15 minutes.",
                              "type": "number"
                            }
                          }
                        }
                      },
                      "id": {
                        "description": "The ID of the cluster.",
                        "type": "string"
                      },
                      "imageConfiguration": {
                        "description": "–  The image configuration applied to all worker types.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "imageUri": {
                              "description": "The image URI.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "initialCapacity": {
                        "description": "–  The capacity to initialize when the application is created.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "initialCapacityConfig": {
                              "description": "The initial capacity configuration per worker.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "workerConfiguration": {
                                    "description": "The resource configuration of the initial capacity configuration.",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "cpu": {
                                          "description": "The maximum allowed CPU for an application.",
                                          "type": "string"
                                        },
                                        "disk": {
                                          "description": "The maximum allowed disk for an application.",
                                          "type": "string"
                                        },
                                        "memory": {
                                          "description": "The maximum allowed resources for an application.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "workerCount": {
                                    "description": "The number of workers in the initial capacity configuration.",
                                    "type": "number"
                                  }
                                }
                              }
                            },
                            "initialCapacityType": {
                              "description": "The worker type for an analytics framework. For Spark applications, the key can either be set to Driver or Executor. For Hive applications, it can be set to HiveDriver or TezTask.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "maximumCapacity": {
                        "description": "–  The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "cpu": {
                              "description": "The maximum allowed CPU for an application.",
                              "type": "string"
                            },
                            "disk": {
                              "description": "The maximum allowed disk for an application.",
                              "type": "string"
                            },
                            "memory": {
                              "description": "The maximum allowed resources for an application.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "name": {
                        "description": "–  The name of the application.",
                        "type": "string"
                      },
                      "networkConfiguration": {
                        "description": "–  The network configuration for customer VPC connectivity.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "securityGroupIds": {
                              "description": "The array of security group Ids for customer VPC connectivity.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "subnetIds": {
                              "description": "The array of subnet Ids for customer VPC connectivity.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "releaseLabel": {
                        "description": "–  The EMR release version associated with the application.",
                        "type": "string"
                      },
                      "tags": {
                        "description": "Key-value map of resource tags.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "tagsAll": {
                        "description": "Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "type": {
                        "description": "–  The type of application you want to start, such as spark or hive.",
                        "type": "string"
                      }
                    }
                  },
                  "conditions": {
                    "description": "Conditions of the resource.",
                    "type": "array",
                    "items": {
                      "description": "A Condition that may apply to a resource.",
                      "type": "object",
                      "required": [
                        "lastTransitionTime",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "A Reason for this condition's last transition from one status to another.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of this condition; is it currently True, False, or Unknown?",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-list-map-keys": [
                      "type"
                    ],
                    "x-kubernetes-list-type": "map"
                  }
                }
              }
            }
          }
        },
        "subresources": {
          "status": {}
        },
        "additionalPrinterColumns": [
          {
            "name": "READY",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
          },
          {
            "name": "SYNCED",
            "type": "string",
            "jsonPath": ".status.conditions[?(@.type=='Synced')].status"
          },
          {
            "name": "EXTERNAL-NAME",
            "type": "string",
            "jsonPath": ".metadata.annotations.crossplane\\.io/external-name"
          },
          {
            "name": "AGE",
            "type": "date",
            "jsonPath": ".metadata.creationTimestamp"
          }
        ]
      }
    ]
  },
  "status": {
    "conditions": null,
    "acceptedNames": {
      "plural": "",
      "kind": ""
    },
    "storedVersions": null
  }
}